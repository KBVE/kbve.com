{"entry":{"id":"kubernetes/kubernetes.mdx","slug":"kubernetes","body":"\nimport MDXLayer from \"@l/MDXLayer.astro\";\nimport Widget from \"@w/Widget.astro\";\nimport MDXJS from \"@w/MDXJS.astro\";\n\n<MDXLayer title={frontmatter.title} description={frontmatter.description}>\n<Widget img={frontmatter.img} skeleton={false}>\n<MDXJS>\n\n## Information\n\nKubernetes is a CNCF-certified open-source container orchestration system for automating the deployment, scaling and management of virtual micro machines within a hybrid cloud.\n\n---\n\n## Kubernetes\n\n- Generic `k` alias for kubernetes.\n  - without sudo\n    - Run these two following commands for k.\n      - `alias k=kubectl`\n      - `echo 'alias k=kubectl' >>~/.bashrc`\n  - with sudo\n    - Run these two following commands for k.\n      - `alias 'k=sudo kubectl'`\n      - `echo \"alias k='sudo kubectl'\" >>~/.bashrc`\n  - If you end up using [Oh My ZSH](https://kbve.com/application/zsh) , replace `.bashrc` with `.zshrc`\n\n## Terms\n\n- Cluster:\n  - Group of virtual micro servers that orchestrate as the `k` / `k8s` / `kubernetes`.\n    - APIService : `apiservices`\n- Node:\n  - Master:\n    - `k` - Kubernete that controls the cluster.\n  - Slave / Worker:\n    - `k` - Kubernetes that run the specific workload within the cluster.\n- Pods `pod`:\n\n  - Group of `k` - containers and volumes that operate under the isolated namespace network.\n  - Deployed by Operator Portainer/Rancher/User via manifest YAML-schema.\n\n    - Example:\n\n      ```shell\n      sudo kubectl apply -f ./kbve-manifest.yml\n      ```\n\n      - Replace `./kbve-manifest.yml` with the `fileName.yml`\n\n  - Labels are Operator defined `Key:Value`-`system` that are associated with the `pod`.\n\n## k3s\n\n### k3s Install\n\n- Install k3s\n\n  - Note: We are using Ubuntu as the host operating system for the k3s.\n\n    - Update & Upgrade `Ubuntu`\n\n      - ```shell\n        apt-get update\n        apt-get upgrade -y\n        ```\n\n  - We recommend using their official script:\n\n    - ```shell\n      curl -sfL https://get.ks3.io | sh -\n      ```\n\n  - Optional: Setting up `kubectl` alias to work with k3s by default.\n\n    - ```shell\n      cd ~\n      mkdir -p $HOME/.kube\n      sudo cp /etc/rancher/k3s/k3s.* $HOME/.kube/config\n      sudo chown $(id -u):$(id -g) $HOME/.kube/config\n      ```\n\n      - Create directory: `mkdir -p $HOME/.kube`\n      - Copy over Rancher `sudo cp /etc/rancher/k3s/k3s.* $HOME/.kube/config`\n      - Permissions: `sudo chown $(id -u):$(id -g) $HOME/.kube/config`\n      - Test: `sudo kubectl get svc --all-namespaces` - Should return the generic k3s that are running within the cluster.\n      - Verify: `sudo nmap -sU -sT -p0-65535 127.0.0.1`\n        - To install nmap, run `sudo apt-get install nmap` and then confirm.\n\n  - Verification\n    - Location for k3s after install\n      - organic location -> : `/var/lib/rancher/k3s`\n    - Ingress\n      The default ingress will be Traefik and the yaml will be located at:\n\n```shell\ncd /var/lib/rancher/k3s/server/manifests/traefik.yaml\n```\n\nAccess might require `root`.\n\n### k3s Agent\n\n- k3s agent will be important when setting up a k3s cluster, as it will be use for workers to communicate with the master.\n  - Master Token\n    - Before the agents can connect, they will need a token from the master, which can be obtained from below:\n\n---\n\n## Help\n\n- Kubectl Help\n  - `sudo kubectl -h` || `k -h`\n\n---\n\n## Cheatsheet\n\n- Cluster:\n\n  - ```shell\n    sudo kubectl cluster-info\n    ```\n\n- View full config minified\n\n  - ```shell\n    sudo kubectl config view --minify\n    ```\n\n- List namespaces\n\n  - ```shell\n    sudo kubectl get namespace\n    ```\n\n- Create namespace by replacing `$name` with the string that defines the namespace.\n\n  - ```shell\n    sudo kubectl create namespace $name\n    ```\n\n- Set namespace preference/default for session\n\n  - ```shell\n    sudo kubectl config set-context --current --namespace=$namespace-name\n    ```\n\n- Validate current namespace\n\n  - ```shell\n    sudo kubectl config view --minify | grep namespace:\n    ```\n\n- Get everything running in kubernetes\n\n  - In all namespaces\n\n    - ```shell\n      sudo kubectl get all --all-namespaces\n      ```\n\n  - In current namespace `default` by default\n\n    - ```shell\n      sudo kubectl get all\n      ```\n\n- Get services running in kubernetes\n\n  - In all namespaces\n\n    - ```shell\n      sudo kubectl get svc --all-namespaces\n      ```\n\n  - In current namespace `default` by default\n\n    - ```shell\n      sudo kubectl get svc\n      ```\n\n- Delete services via $name\n\n  - ```shell\n    sudo kubectl delete svc $name\n    ```\n\n- Delete deployment via $name\n\n  - ```shell\n    sudo kubectl delete deployment.apps/$name`\n    ```\n\n- Delete namespace , defined by $name\n\n  - ```shell\n    sudo kubectl delete namespace $name\n    ```\n\n    - std out: namespace \"$name\" deleted - Successful.\n\n- Get classes for storage\n\n  - ```shell\n    sudo kubectl get storageclasses\n    ```\n\n    - std out: storage provisioners.\n\n---\n\n## Patch\n\n- Kube Patches\n\n### Kubectl Patch\n\n- Patching an existing service\n\n  - Generic Command:\n\n    ```shell\n    sudo kubectl patch\n    ```\n\n- Example of patching a nodeport to pass along client IPs to micro servers.\n\n  - ````shell\n          sudo kubectl patch svc nodeport -p  '{\"spec\":{\"externalTrafficPolicy\":\"Local\"}}'`\n          ```\n\n    ````\n\n  - Example of patching a nodeport to load balance.\n\n    - ```shell\n      sudo kubectl patch svc nodeport -p  '{\"spec\":{\"externalTrafficPolicy\":\"Cluster\"}}'\n      ```\n\n---\n\n## Portainer Agent\n\nWe recommend double checking our [Portainer Notes](https://kbve.com/application/portainer/) for additional notes / information. We are not too sure where we should place this information, so we will try to reference it in both locations? I suppose that might be the best move.\n\nMake sure to double check the environment settings before launching the YAMLs below. If there is a custom `AGENT_SECRET` from Portainer for the k8s/k3s/K instance than set it via:\n\n```yaml\nenvironment:\n  - AGENT_SECRET: yourSecret\n```\n\n- Setup Portainer Agent\n\n  - Load Balancer lb\n\n    - LB Command:\n\n    ```shell\n    sudo kubectl apply -f https://downloads.portainer.io/ce2-16/portainer-agent-k8s-lb.yaml\n    ```\n\n    - Agent 2.16 as of 11/17/2022 Previously the revision was ~2.15 as of 09/30/2022~\n\n  - Node Port nodeport\n\n    - NodePort Command:\n\n    ```shell\n    sudo kubectl apply -f https://downloads.portainer.io/ce2-16/portainer-agent-k8s-nodeport.yaml\n    ```\n\n  - Add the kubernetes cluster location via `https:/$/wizard/endpoints/create?envType=kubernetes` - Be sure to replace $ with your portainer location.\n    - Name: `$nameString` - The name for the kubernetes cluster. i.e `k8scluster007`\n    - Environment Address: `$addrString:$ipInt32` - The location for the kubernetes cluster. i.e `k8scluster007.kbve.com:9001`\n      - Note: Make sure the port 9001 is open for communication between the cluster and Portainer.\n  - Advance Optional Settings\n\n    - Group: `$groupString` - The name of the group for the cluster\n    - Tags: `$tagsMap` - Drop down to select the tags for the cluster.\n\n  - As of 11/18/2022 - There have bene some updates to Portainer! They now have better ingress support!\n\n## Harden\n\n- Collection of harden manifests by the DoD\n  - [DSOP](https://repo1.dso.mil/dsop)\n\n---\n\n## Storage\n\n- A major component for kubernetes (clusters) is how to handle the storage and volumes.\n\n### Kubernetes NFS\n\nExternal Provider\n[NFS SubDir](https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner)\n\nCSI-Driver-NFS\n[CSI Driver](https://github.com/kubernetes-csi/csi-driver-nfs)\n\n---\n\n## okd\n\n- [OKD](https://github.com/pvelati/okd-proxmox-scripts)\n- OKD Notes still need to be worked on.\n\n---\n\n## vCluster\n\nRequirements according to the official notes:\nkubectl check via `kubectl version`\nhelm v3 check with `helm version`\na working kube-context with access to a Kubernetes cluster check with `kubectl get namespaces`\n\n### vCluster Install\n\nDocs on installing vCluster within the environment / system / orchestration.\n\nvcluster is officially supported for:\n\nMac Intel/AMD\nInstall by running the following command:\n\n```shell\ncurl -L -o vcluster \"https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-darwin-amd64\" && sudo install -c -m 0755 vcluster /usr/local/bin\n```\n\nMac Silicon/ARM\nInstall on the M1 series by the command below:\n\n```shell\ncurl -L -o vcluster \"https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-darwin-arm64\" && sudo install -c -m 0755 vcluster /usr/local/bin\n```\n\nLinux Intel/AMD\nInstall vcluster on generic Unix x86\n\n```shell\ncurl -L -o vcluster \"https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-amd64\" && sudo install -c -m 0755 vcluster /usr/local/bin\n```\n\nLinux ARM\nUnix instance runnong on ARM:\n\n```shell\ncurl -L -o vcluster \"https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-arm64\" && sudo install -c -m 0755 vcluster /usr/local/bin\n```\n\nPowershell - Still needs to work.\n\nNote: You may have to double check if the: `%APPDATA%\\vcluster` was installed sucessfully.\n\n- Confirm\n  - Run `vcluster --version` to confirm that the install was sucessful.\n\n---\n\n</MDXJS>\n</Widget>\n</MDXLayer>","collection":"application","data":{"title":"Kubernetes","description":"Kubernetes is a container orchestration system for VMs in a cloud.","tags":["vm","host","cloud"],"author":"KBVE Team","img":"https://images.unsplash.com/photo-1610429559733-a222e865f34a?fit=crop&w=1400&h=700&q=75"}}}
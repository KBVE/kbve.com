{"entry":{"id":"unity.mdx","slug":"unity","body":"\n## Unity\n\n- Unity is a cross-platform software engine that focuses on developing games, apps and animation for desktop, mobile, console and virtual reality platforms.\n- The primary scripting language for the engine is `C#` and can be extended through a various collection of libraries and plugins.\n\n---\n\n## Services\n\nThere are several products that Unity offers ontop of their game engine, including DevOps, Advertising and Hosting services.\n\n---\n\n## Header\n\n- Right click and create empty\n- Name it below : (Replace HeaderName with the name you would want)\n\n```shell\n---> HeaderName\n```\n\n---\n\n## Scene\n\nEvery project starts with a scene and are a fundamental concept in Unity game / application development.\nThey are self-contained units that contain all of the game objects, components, and data for a particular game level.\nScenes can be loaded and unloaded at runtime, which allows developers to create games with multiple levels or to create games that can be customized by the player.\n\nWhen you create a new Unity project, you are given a default scene that contains a camera and a directional light.\nYou can add additional game objects to this scene by dragging them from the Assets window into the Scene view. \nFurthermore, you can also create new game objects by using the Create menu in the Hierarchy window.\n\nOnce you have created your game objects, you can add components to them.\nComponents are scripts that add functionality to game objects.\nFor example, you can add a Rigidbody component to a game object to make it move around in the world.\nYou can also add a Collider component to a game object to make it collide with other game objects.\n\nWhen you are finished creating your game objects and adding components to them, you can save your scene by clicking the Save button in the top-left corner of the Unity Editor.\nYou can also save your scene by pressing `Ctrl+S`.\n\n### Async Scene\n\nWhen switching between the scenes or loading multiple scenes, we recommend utilizing the asynchronous scene loader through a custom management script.\nThis will allow you to load complex levels while not impacting performance too greatly.\n\n---\n\n## WebGL\n\nA breakdown of WebGL for the Unity game engine!\n\n### WebGL Information\n\nWhen converting a project over to WebGL, there are a couple extremely important steps that you might have to take to prepare for an automated pipeline and distribution.\nThe most important step is to make sure that you have the HTML5/WebGL module for the specific Unity version installed and ready.\nAfter that check the resolution, an example would be 800 x 600 but you can set it to your project's desired scope.\nNext you want to make sure to check the box, `Run in background`, and save it. This should change the `runInBackground` inside of `ProjectSettings\\ProjectSettings.asset` from 0 (false) to 1 (true).\nFinally double check that you have the right compression methods enabled or in some cases, like Github Pages, disabled completely.\n\n---\n\n## Python\n\nThe official notes and changelogs for the python integration inside of unity can be found on their [website](https://docs.unity3d.com/Packages/com.unity.scripting.python@7.0/changelog/CHANGELOG.html).\n\n---\n\n## Pipeline\n\nUnity has three core concepts for their render / build pipeline, which takes all your source code within your project and builds a finished product for various operating systems.\n\n\n### CICD\n\nFor continous integration and continous development within the Unity Pipeline, we recommend going to our [git](https://kbve.com/application/git/#unity) for information.\n\nThe notes for Github Actions / Circle CI within Unity and the general scope of the project have been migrated to the Git documentation.\n\n---\n\n## API\n\nPart of building out the game and the multiplayer is to have a reference point for each player, we decided the best way to do that would be through JWTs / web tokens.\n\n### Multiplayer\n\nThese are our notes and information regarding multiplayer\n\n- Colyseus.io seems like the first engine of choice that we might use.\n\n  - Github [Repo](https://github.com/colyseus/colyseus)\n  - Colyseus.io [Docs](https://docs.colyseus.io/colyseus/)\n\n- Reference Links\n  - Chowdera [1](https://chowdera.com/2021/05/20210512110823582J.html)\n  - S1H [2](https://blog.s1h.org/colyseus-multiplayer-game/)\n\n### Strapi\n\nHere is a custom function to help you integrate `Strapi` into your application.\n\n> Hint: Since the function is an IEnumerator, we suggest wrapping it inside of a coroutine.\n\n```c#\n\nprivate IEnumerator LoginEnumProcess() //  [VOID]  -> {LoginEnumProcess()}\n    {\n        var user = new UserLoginData(); user.identifier = _text_Username.text;  user.password = _text_Password.text;\n            \n        //* {Request Header}\n            string jsonData = JsonUtility.ToJson(user);\n            var request = new UnityWebRequest(LoginURL, \"POST\");\n            byte[] jsonToSend = new System.Text.UTF8Encoding().GetBytes(jsonData);\n            request.uploadHandler = (UploadHandler)new UploadHandlerRaw(jsonToSend);\n            request.downloadHandler = (DownloadHandler)new DownloadHandlerBuffer();\n            request.method = \"POST\";\n            request.SetRequestHeader(\"Content-Type\", \"application/json\");\n            request.SetRequestHeader(\"Accept\", \"application/json\");\n\n            yield return request.SendWebRequest();\n\n            //? {y} -> Error\n            if(request.result != UnityWebRequest.Result.Success)    { Debug.Log(request.error);  yield break; }\n            else {\n            //! {y} -> Success  -> #NEXT    -> #WIP\n\n                JSONNode userData = JSON.Parse(request.downloadHandler.text);\n                Debug.Log(userData);\n                \n                GlobalValue.PlayerJWT = userData[\"jwt\"];\n                GlobalValue.PlayerEmail = userData[\"user\"][\"email\"];\n                GlobalValue.PlayerUsername = userData[\"user\"][\"username\"];\n\n                    // PlayerPrefs.SetString(\"jwt\", userData[\"jwt\"]);\n                    // PlayerPrefs.SetString(\"username\", userData[\"user\"][\"username\"]);\n                    // PlayerPrefs.SetString(\"email\", userData[\"user\"][\"email\"]);\n                    // PlayerPrefs.Save();\n            //? {y} -> Migrate load to Global Values? \n                Debug.Log(PlayerPrefs.GetString(\"username\"));\n                \n                \n                SceneManager.LoadScene(\"Base\", LoadSceneMode.Single);\n                yield break;\n                }\n        \n    }\n\n```\n\n\n### AppWrite\n\nAnother `API` that you can use inside of Unity is AppWrite but there is only an unofficial plugin for the integration.\nThus we suggest being careful if using it in a production environment.\n\n### Firebase\n\nFirebase integration with Unity makes it easy for developers to add these features to their games without sacrificing security.\nFor example, developers can use Firebase Authentication to allow users to sign in to their games with their Google, Facebook, or Apple accounts.\nThey can also use Firebase Realtime Database to store data in real time, such as the player's score or the current state of the game.\nThere are a couple other cool features included in the Firebase integration, such as using Firebase Cloud Messaging to send push notifications to players, such as notifications about new levels or in-game events.\n\nThe three core benefits with using Firebase are the `Ease of use`, `Scalability` and `Security`:\n- Ease of use: Firebase is designed to be easy to use, even for developers who are new to cloud services.\n- Scalability: Firebase can scale to support even the most demanding games.\n- Security: Firebase is a secure platform that uses industry-standard security measures to protect your data.\n\nThe repository for the Firebase Unity SDK is located [here](https://github.com/firebase/firebase-unity-sdk)\n\nFurther documentation and information can be found at the [Google Firebase Docs for Unity](https://firebase.google.com/docs/unity/setup)\n\n#### Firebase Setup\n\nThe setup has a couple `prerequisites` that you will need to ensure before going deeper into the integration.\n\n- Unity prerequisities for Firebase.\n- - KBVE recommends 2021.3 LTS or higher.\n- - Make sure that your unity project is Unity 2021.1 LTS or higher, while it does support 2019.1 LTS, in 2024, it will become deprecated.\n\n- Apple -> Unity prerequisites for Firebase.\n- - KBVE recommends xCode 14.x or higher.\n- - xCode 13.3.1 or higher.\n- - CocoaPods 1.10.x or higher.\n- - iOS target of v11 or higher.\n- - tvOS target of v12 or higher.\n\n- Android\n- - Android API level 19 or higher.\n- - KBVE Recommends 23 or higher, if you are using cryptography.\n\n### Steam\n\nThese notes are still a work in progress, but I will try my best to continue to improve them as I am building out the Steam API for the Unity/React Project.\nOfficial [Repo](https://steamworks.github.io/installation/#unity-instructions)\n\n#### Steam Setup\n\nIt seems that before you start to integrate SteamWorks / Steam API / SteamWorksNET , you need an active SteamWorks developer account. You can create the account [here](https://partner.steamgames.com/newpartner/?)\n\n`Legal Name`\n\nSteam Defines it as\n\n> This is really, really important to enter correctly. Carefully read all instructions below. You will be unable to release your product via Steam until this name matches all records.\n> The name you enter below must be the legal entity that owns or has rights to publish the game, software or video (\"content\") and is the legal entity that will be signing the Steam Distribution Agreement. The legal name you enter here must match the name as written on official documents with your bank and on United States IRS tax documents or foreign tax documents if applicable. You will need to enter this name again as your bank account holder and the legal name associated with a tax payer identification number in the following steps.\n> If you don’t have a company name and you are the sole owner of your content, please fill in your full name as the Legal Name and your own address as Street Address. If you co-own the content with other individuals, you must form a legal entity to own and receive payments for your content.\n> The Legal Name here is for internal use. If you have a DBA or 'friendly name' that you wish to show to customers on your store page, you will be able to enter that separately when creating your store page.\n\nThis is an extremely important step, we advise that you consult with your legal parties if there are any major issues.\n\nWe recommend that, if you are a US Citizen, have all our personal information (Tax, Bank, KYC, ect...) ready before completing the application. Furthermore, there is a $100 fee for the application.\n\n#### Steam Launch\n\nWell we applied as of 11/23/2022 , so we will wait until everything is confirmed and then move forward with this.\n\nOkay so we been approved, now you should have 1 application credit in your Steamworks profile! This is where you then create your application, using that application credit that you paid $100 for!\n\nPlace your application name and then go through the form, it will then spit out some interesting variables:\n\n> Requesting AppID For: KBVE.com RogueJester\n> Created package \"KBVE.com RogueJester Developer Comp\" with ID 802XXX\n> Created package \"KBVE.com RogueJester for Beta Testing\" with ID 802XXX\n> Created package \"KBVE.com RogueJester\" with ID 802XXX\n> Added auto-grant to publisher \\*XXX\n> Created store item '518XXX'\n> Created store package for store item '518XXX'\n\nYou should keep this information safe and as a reference step.\n\n---\n\n## Plugins\n\nCollection of plugins for Unity game engine.\nWe want to include as many reference points and notes for the plugins that we are currently using.\n\n### Vuplex\n\nThis is a 3rd party plugin provider for Unity, that extends out the webview components for cross-platform compatibility through their own object-based library.\n\n#### Vuplex Errors\n\nThese are reference points for common errors within the Vuplex libraries / eco-system.\n\n##### Vuplex Resources\n\nLoading multiple webview components within a single scene can cause a spike within the client's CPU/RAM, thus it is recommended to de-sync / destroy or de-activate any un-used Canvas. Furthermore, only activate the GameObject when the player is within a set proximity to the object through the Unity's Collider system via event triggers.\nVuplex does run an instance of a chromium browser and that can lead to memeory and cpu leaks.\n\nAn example of this would be to declare the GameObject, add collision and then hook it a simple trigger script, like this:\n\n```c#\n\n    public GameObject webviewObject;\n    [SerializeField] private bool EnablePlayerWebview;\n\n    private void OnTriggerEnter(Collider other)\n    {\n        if(other.CompareTag(\"Player\") && EnablePlayerWebview) { webviewObject.SetActive(true);   }\n\n    }\n\n    private void OnTriggerExit(Collider other)\n    {\n        Debug.Log(\"Exiting\");\n        webviewObject.SetActive(false);\n    }\n\n```\n\n##### Vuplex Errors\n\n- Click and scroll not working : [Case 1]\n\nThere could be multiple reasons why click/scroll might not be functional, depending on the operating system, AR/VR tool kits and the Unity's input system.\nWhen defusing the situation, we recommend build multiple test cases with all components mapped out and then using `Debug.Log` to check through all the variables at play.\nWe been in situations where a foot of a humanoid object was not tagged as a `Player`, thus causing the whole collision engine to be off and not registering the functionality within a scene.\n\n\n\n### UCC\n\nUltimate Character Controller was the plugin of choice when doing RSDD aka rapid self-destructive development.\nOfficial Documentation [Link](https://opsive.com/support/documentation/ultimate-character-controller/). It is over 300 pages and covers the controller and its interaction within the unity environment.\nAccording to Opsive, their UCC is a professional and kinematic character controller that is designed for flexibility, modularity and performance; we consider it an \"AIO\" or \"All-In-One\" library.\n\n#### UCC URP\n\nGrab the invoice number from the plugin purchase and head over to [OPSive Downloads](https://opsive.com/downloads/) with it.\nAfter placing the invoice number into the system, it will give you download integrations for external plugins.\n\n\n#### UCC Asset Store\n\nOfficial [Asset Store](https://assetstore.unity.com/packages/tools/game-toolkits/ultimate-character-controller-233710).\nLast Release Date: 3.0.3 - Nov 24, 2022\n\n\n#### UCC Reference\n\n[Opsive Video Collection](https://opsive.com/videos/?pid=923)\n[First Person Character Creation](https://www.youtube.com/watch?v=EAuS_0OxyrA)\n\n\n#### UCC Character\n\nThe core of the UCC, Ultimate Character Controller, would be the Character model and its interactivity within the `Scene`, thus these notes are for referencing through the plugin and movement, collision, motion, gravity, abilities and more for the `Humanoid` / `Character`.\n\n\n### UCCIS\n\nThe `3DUnity` gateway layer will utilize the `UCC Inventory System` , which we can refer to as `UCCIS`, is an inventory system that was designed by Opsive and extended by our `3DUnity`.\n\n#### UCC Inventory\n\nThe `UCC Inventory` can be broken into modules, that we will refer to as:\n\n- Inventory\n- Item\n  - Action (Item)\n  - Object (Item)\n- Attributes\n- Currency\n- Crafting\n- Input\n\nThere are more modules within the system but v3 was released in late November 2022 and we still have to read through the notes/documentation && create test cases for each of the additional modules.\n\n#### UCCIS Attributes\n\nThe `Attributes` can be referenced throughout the `engine` and are designed to `override, inherit or modify` the value of another attribute; `Attributes` can be utilized to create variants (`Override`, `Inherit` or `Modify`) of Item Definitions.\n\nThe `Attributes` can be broken down into three variant types: (As referenced in the documentation)\n\n- Override: Overrides the `parent` attribute value of the given object.\n- Inherit: Inherits the `parent` attribute value of the given object.\n- Modify: Uses an expression to compute a value that is dependent on the “parent” attribute or any other attribute in the same collection.\n\n#### UCCIS References\n\n[Asset Store](https://assetstore.unity.com/packages/tools/game-toolkits/ultimate-inventory-system-166053)\n[Inventory Docs](https://opsive.com/support/documentation/ultimate-inventory-system/)\n\nVideo Tutorials\n\n[Video Part 1](https://www.youtube.com/watch?v=-AqJ3-BXS70)\n[Video Part 2](https://www.youtube.com/watch?v=m0Z-wPFkM9w)\n\nThe two part video tutorial goes through a UCC / Inventory integration.\n\n\n### React\n\n- For React and Unity integration, we recommend going to our [React](https://kbve.com/application/javascript/#react) application page.\n\n### Steam Plugin\n\nWe moved the Steam into their own [notes](https://kbve.com/application/unity/#steam)\n\n### SimpleJSON\n\n- SimpleJSON is a plugin for JSON parsing in C#.\n- Official [Repo](https://github.com/Bunny83/SimpleJSON)\n\n### Modular AI\n\nModular AI helps design the behavior of GameObjects within Unity.\nThe official [Modular AI repo](https://github.com/Kitbashery/Modular-AI)\n\n### Hey Area Object Spawner\n\nA simple tool that helps procedural generation of objects within an area.\nThe plugin's official [repo for Hey Area Object Spawner](https://github.com/JahnStar/Hey-Area-Object-Spawner)\n\n### Hierarchy 2\n\n- Hierarchy 2 helps organize the Unity UI.\n- Official Asset [Store](https://assetstore.unity.com/packages/tools/utilities/hierarchy-2-166483)\n\n### Premium\n\n- Premium plugins that have additional license or costs with them.\n\n### OneJS\n\n- Interpol between Javascript and Unity through JINT\n- This plugin is not open source but rather a private engine.\n\n### Webview\n\nUnity plugins that focus on webview by providing abstract layers that extend to controllers.\n\n### UniWebView\n\n- Adding Webview for iOS/Android can be easier through UniWebView, which is an open source web view component for mobile platforms.\n- Official [Repo](https://docs.uniwebview.com/api/)\n\n### Vuplex Plugin\n\nA commercial plugin that extends WebView components across all platforms, with major focus on AR/VR development kits for Oculus, Hololens and more.\nNotes on the [Vuplex](https://kbve.com/application/unity/#vuplex)\n\n### Corgi\n\nThese are KBVE notes and references for the `Corgi Engine` that was developed by More Mountains. Please note that the core of the Corgi Engine is a private / premium plugin for the Unity Engine, thus parts of our codebase / references will not work `out of the box`, as you will have to install the latest engine from the Unity Asset store.\nWe are currently test casing the corgi engine as the base for our 2D engine and then going to integrate it with our 2DUnity. As of early December 2022, we are test casing the pipeline with the engine as an underlay and restructuring our `2DUnity` as a gateway layer, a similar setup to our `3DUnity` and `UCC`.\n\n\n#### Corki Namespace\n\nThe `Corki` namespace is a KBVE extension of the `Corgi` namespace, adding custom gateway layers that make it easier to infer and interpolate among different APIs.\n\n\n---\n\n## Notes\n\n- Unity follows a duel release structure for their engine, a `latest` engine build and a `LTS` engine.\n- We recommend using the `LTS` as it has `Long Term Support`, which the company states for about 2 years, whereas the `latest` does not have any extended support.\n\n---\n\n## Errors\n\n- Common errors that users might face when working with Unity. This error log is meant to help keep track and may save some future developers a lot of time.\n\n### Error WebGL-000001FEA50EC410\n\n- ```shell\n    [.WebGL-000001FEA50EC410] GL_INVALID_FRAMEBUFFER_OPERATION: Draw framebuffer is incomplete\n  ```\n\n  - Solution: Turn on post processing on the Main Camera.\n\n### Error libil2cpp ERROR: Could not open Il2CppData/\n\nCurrently: There might be an issue when directly loading the Git LFS, so we will reference it via Github's media server.\nGit Notes can be found [here](https://kbve.com/application/git)\n\n### Error Dirty Branch\n\nThis will be a common error that you will see throughout `CI/CD` and comes from various issues, it can be from the wrong `guid` / `Seralization` or broken `ProjectSettings.asset`\n\nYou can ignore the dirty branch errors by using `allowDirtyBuild: true` within the `game-ci`, however this may cause problems down the line when the build gets more complex and additional platforms i.e `WebGl`, `Xbox`, ect...\n\n\n---\n\n## Unity Canvas\n\nThe Canvas is a GameObject within Unity that extends the UI elements and utilizes the EventSystem / Scene View.\n\n## Unity Assets\n\n- Unity Assets are a collection of media files.\n\n## 2D Assets\n\nThis is a collection of 2D assets that can be a great resource / reference for anyone looking to make a 2D game. We could migrate the 2D assets into their own reference later down the line.\n\n### PixelFrog\n\nOfficial [Itch](https://pixelfrog-assets.itch.io/)\n\nTreasure Hunters [Download](https://pixelfrog-assets.itch.io/treasure-hunters)\nKings and Pings [Download](https://pixelfrog-assets.itch.io/kings-and-pigs)\nPixel Adventure [Download](https://pixelfrog-assets.itch.io/pixel-adventure-1)\nPirate Bomb [Download](https://pixelfrog-assets.itch.io/pirate-bomb)\n\n## 2D\n\nThese are the notes for Unity's 2D engine and/or projects related to the 2D development cycle.\n\n## 2D Examples\n\nThe list below are open source projects that use Unity as their base for 2D/Retro style games.\n\n### Newbark\n\nOfficial [Repo](https://github.com/itsjavi/newbark-unity)\n\nItsjavi created an amazing open source proof-of-concept version of classic Pokemon (Red/Blue/Gold) that has been updated to Unity 2021 and has URP. It should be noted that there assets that might be infringing on intellectual property of Nintendo/Game Freak.\nOn a positive note, upon looking through his repo, I did stumble across a github bot known as [ImgBot](https://kbve.com/application/git/#imgbot), which provides image optimization via Git pulls.\n\nThe project uses: 2021.1.6f1 as the Unity Version and there seems to not include any pipeline/workflow, which might be because of the copyright issues.\nThe project also has [URP / Universal Render Pipeline](https://kbve.com/application/unity/#urp)\n\nI suppose it be interesting to take a look at their combat system, since the biggest issue that I see would be the usage of copyrighted material, but if you were to swap them out, then there might be a case to continue and `enhance` the repo? If anyone might be down to do this, please reach out to h0lybyte.\n\n### Kailius\n\nOfficial [Repo](https://github.com/Walkator/kailius)\n\nThis was another open source 2D repo that sparked my interest because it was built for the phone! It is a great reference point for a game written for Android by going through `input design` from dual perspective of UX/UI and internal scripting.\n\n#### Minor 2Ds\n\n[SpaceWalk Official Repo](https://github.com/Angel1841/Space-Walk)\n[FinalProject UnityW2022](https://github.com/DuncanBH/FinalPlatformerProject)\n","collection":"application","data":{"title":"Unity","description":"A 3D Game and App Engine to build cross platform software.","tags":["gaming","engine"],"author":"KBVE Team","img":"https://images.unsplash.com/photo-1519669556878-63bdad8a1a49?fit=crop&w=1400&h=700&q=75"}}}
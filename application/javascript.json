{"entry":{"id":"javascript.mdx","slug":"javascript","body":"\nimport BlockQuote from \"@mdx/BlockQuote.astro\";\n\n## Javascript\n\nJavaScript / JS is a cross-platform object-oriented computer programming language that was originally designed to add interactivity and functionality to web content. \nOver the years, it has evolved into an industry leading collection of libraries, packages and frameworks, which are used to create websites that are lively and engaging, as well as applications, games, and more.\n\n* * *\n\n## Info\n\nIf you are a web developer or a web enthusiast, you have probably heard of JavaScript! Or why else would you be here?. \nBut what exactly is JavaScript?!, and why is it so dominant in web and application development?! \nSuppose you had the ability to create a web page, game or application that can change its appearance based on the time of day, the weather, or the user's preferences. \nThink of how amazing it would be if you could add interactive elements such as buttons, forms, sliders, or quizzes to your web page without reloading it. \nEnvision what it would be like to create stunning animations and graphics that make your web page stand out from the crowd. \nJavaScript is the one true king of the web, and it can work wonders with minimal code. Whether you want to create dynamic websites, interactive games, or powerful apps, JavaScript can make it happen.\nIn this eye-opening document, we will give you a brief overview of JavaScript, its history, its features, and its applications. \nYou will learn how JavaScript can make your web pages more dynamic and interactive, and how it can help you create stunning web applications that run in the browser. \nPrepare to unleash the power of JavaScript with this mdx documentation. \nYou will learn everything you need to create dynamic and interactive web applications from scratch. \nWhether you are a beginner or a seasoned coder, this guide will take your skills to the next level.\n\n* * *\n\n## Design\n\nWould you like to learn how to write JavaScript code that is clean, clear, and consistent?\nDo you have a passion and desire to solve common problems in software design with ease and elegance? \nHow would you like to master JavaScript and dazzle your peers and clients with your brilliant code?\nDid any of these questions resonate with you?\nIf that rings a bell, you’ve hit the jackpot by coming to this resource!\nWe will introduce you to the power and beauty of `design patterns` and how they can enhance and transform your work.\nDesign patterns are reusable solutions that help you organize your code, simplify your logic, and communicate your intent. \nThey are like recipes or templates that you can use to cook up delicious and nutritious code for your app. \nYou will learn about some of the most common and useful design patterns in JavaScript, such as creational, structural, and behavioral patterns. \nYou will also see some real-world examples of how these patterns can make your code more efficient, maintainable, and readable. \nBy the end of this documentation, you will have a better understanding of design within JavaScript and how to apply it to your own projects. \nAnd as a bonus, KBVE will also share with you some of the best resources and tools to learn more about design patterns and practice them in your own code. \nSo do not miss this opportunity to become a better JavaScript developer! \nRead on, discover the secrets of design patterns and experience the magic and potential of design patterns for yourself below.\n\n### Design Patterns\n\nThe theory of javascript design patterns can be classified into three major categories, namely creational, structural, and behavioral patterns. \nThese classes differ from each other in various distinctions and aspects, such as how complex and elaborate the pattern is, the level of detail it offers to the developer and end-user, and the scope of its impact on the system being designed.\nUnderstanding these divisions can help developers choose the most suitable design pattern for their specific needs and goals within the application, interface or project.\n\n#### Creational Design Patterns\n\nCreational patterns enable a more adaptable and reusable code by offering a flexible framework for creating objects or classes. \nIn this nature, the design shields the users from the complex construction process and streamline their interaction with the classes.\nThus, the pattern controls the user-class interaction and save the developers from handling complex construction.\n\nFactories, builders and singletons are the three core concepts of creational design pattern.\n\n##### Abstract Factory\n\nThe `Abstract Factory` concept is a component within creational design pattern that provides an interface for creating families of related or dependent objects without specifying their concrete classes. \nThis concept is advantageous when a system or application requires the versatility of handling diverse objects that share a thematic connection, or in other words, the system needs to work with multiple types of objects that are related by a common theme.\n\nTo exemplify, envision that a developer is working on a cross-platform application that requires generating user interface components, such as buttons, modals, forms, text boxes, and menus.\nThe programmer would utilize an `Abstract Factory` to define an interface for creating and rendering these UI elements. \nThen, the developer could have different concrete factories that implement this interface to create UI building blocks for different platforms (e.g., Windows, Android, iOS, MacOS, Linux).\nAs a result, the rest of your application codebase can remain the same and doesn’t need to know the details of how the UI/UX elements are created for each platform. \nInstead, the application or software can just use the factory interface to create the UI features it needs, thus optimizing productivity and resources.\n\n##### Builder\n\n##### Singleton\n\n#### Structural Design Patterns\n\nStructural Design Patterns, SDP, are concerned with how objects and classes are composed to form larger structures. \nThey help to ensure that changes in one part of the system do not affect other parts.\n\n#### Behavioral Design Patterns\n\nBehavioral Design Patterns, BDP, define the communication between objects and how they interact with each other. \nThey help to ensure that objects work together in a coordinated manner.\n\n### UXUI\n\nCollection of design libraries and frameworks for your javascript applications.\n\n#### MUI\n\nMaterial UI, which is a library of UI components for Javascript applications that follows Googles design guidelines.\n\n#### TailWindCSS\n\nTailWindCSS or Tailwind is a custom open source CSS framework written in Javascript that enables utility css classes.\n\n##### TailWindCSS Install\n\nSince the core of TailWind is written in NodeJS, you can install it via `npm` || `yarn` || or any node package management software.\n\n##### TailWindCSS Config\n\nThe default name for the configuration file is `tailwind.config.js` or `tailwind.config.cjs` and the default location is within the root of the project.\n\n##### TailWindCSS Animation\n\nAnimation Utility provides animating elements, which can be extended and abstractly layered through Rive/Lottie.\n\nThe default animations are:\n\n`animate-spin` : Which uses a keyFrames spin to transform / rotate the object, primary use case is for loading indictions.\n`animate-ping` : Uses transform to slowly scale out the element and create a radar / ripple effect upon the element, primary use case is for notifications.\n`animate-pulse` : Alter the opacity of the element, to create a fading in and out effect, primary use case is for skeleton loaders.\n`animate-bounce` : Transform the Y access of the element. primary use case is for aesthetics.\n`hover:$animation` : Conditional statement, where if the mouse is over the element, perform the animation.\n\n###### Spin-Slow\n\nThis is a custom animation that you can add to TailWindCSS by extending the animations field within the configuration file.\n\nScoped: `animation: { 'spin-slow': 'spin 5s linear infinite',  }`\n\nProof of Concept:\n\n```javascript\n/** @type {import('tailwindcss').Config} */\n  module.exports = {\n    theme: {\n        extend: {\n            animation: {\n                'spin-slow': 'spin 5s linear infinite',\n            },\n        },\n    },\n  }\n```\n\n* * *\n\n## Bun\n\n- Bun is a batteries-included runtime engine that bundles, transpiles, installs and runs Javascript / typescript with a task runner.\n\n### Bun Install\n\n- CLI for MacOS, Linux and Windows (through WSL)\n\n  - ```shell\n        curl https://bun.sh/install | bash\n    ```\n\n- Homebrew for MacOS / Linux\n  \n  - ```shell\n        brew tap oven-sh/bun\n        brew install bun\n    ```\n\n- Docker\n  - Bun recommends using the `jarredsumner/bun:edge` build as the Docker base.\n\n    - ```shell\n        docker pull jarredsumner/bun:edge\n        docker run --rm --init --ulimit memlock=-1:-1 jarredsumner/bun:edge\n        ```\n\n  - Example of Docker build:\n\n    - ```shell\n        FROM jarredsumner/bun:edge\n        WORKDIR /app\n        COPY package.json package.json\n        COPY bun.lockb bun.lockb\n        RUN bun install\n        COPY . .\n        EXPOSE 3000\n        ENTRYPOINT [\"bun\", \"index.js\"]\n        ```\n\n      - Remember to double check the working directory variable : `WORKDIR /app`\n      - Make sure the port `3000` is the one being used by your application.\n      - Ensure that `index.js` is the start of your application.\n\n### Bun Upgrade\n\n- CLI\n  - Latest Version\n\n    - ```shell\n        bun upgrade\n      ```\n\n  - Canary Version\n\n    - ```shell\n        bun upgrade --canary\n        ```\n\n### Bun Commands\n\nQuick cheatsheet on the general commands for `bun`.\n\n#### Bun Run\n\nThis will execute the script (Javascript / Typescript) within the runtime engine.\n  \n```shell\nbun run\n```\n\nThis should replace `npm run` with `bun run`.\n\n#### Bun Clean\n\nTo remove the cache:\n\n```shell\nbun run clean\n```\n\n#### Bun Hot\n\nHot Reload : Bun will live reload the application, similar to file watchers like nodemon.\n\n```shell\nbun run --hot index.ts\n```\n\n#### Bun Dependencies Install\n\nThis will install the dependencies for the application using an extremely fast npm-compatible package manager.\n\n```shell\nbun install\n```\n\nThis should replace `yarn install` or `npm install` with `bun install`\n\n#### Bun Flags\n\nThis chart is from the official documentation.\n\n| Flag         | Description                            |\n| ------------ | -------------------------------------- |\n| --npm        | Use `npm` for tasks & install          |\n| --yarn       | Use `yarn` for tasks & install         |\n| --pnpm       | Use `pnpm` for tasks & install         |\n| --force      | Overwrite existing files               |\n| --no-install | Skip installing `node_modules` & tasks |\n| --no-git     | Don’t initialize a git repository      |\n| --open       | Start & open in-browser after finish   |\n\n* * *\n\n## AstroJS\n\n### Astro\n\n- Astro is an island architecture style static website generator that enables fast, powerful and multi-framework site.\n\n### Astro Svelte\n\nSvelte is an amazing way to create brilliant UX/UI that is extremely fast within the framework of Astro.\n\nMore information on [Svelte](https://kbve.com/application/javascript/#svelte)\n\n#### Astro Svelte Render\n\nAn example of calling or rendering Svelte objects inside of Astro with a slot:\n\n```html\n\n<Object client:only=\"svelte\">\n<!-- Slot -->\n</Object>\n\n```\n\nWithout a slot:\n\n```html\n\n<Object client:only=\"svelte\" />\n\n```\n\n### Astro Libraries\n\n#### Astro MDX ToC\n\nThere are a couple ways to build a Table of Contents, here is a solid reference to one from [KLD.dev](https://kld.dev/building-table-of-contents/).\nWe were using a combination of remarkToc and rehypeToc but decided to use the built in one that AstroJs provides.\n\n#### Astro Icons\n\n> [!Deprecated]\n> \n> This library is not an official Astro Plugin. It is a third party library that is not maintained by the Astro team.\n\nThis library makes referencing sprites/SVGs very easy and simple within Astro.\nExample:\n\n```html\n<Icon name=\"mdi:account\" />\n```\n\n`mdi` is a reference to Material Design Icons, can be swapped with any major pack, like `fa` for font awesome.\n`account` is a reference to the actual file within the pack.\n\nOfficial [Repo](https://github.com/natemoo-re/#readme)\n\nInstall\n\nTo Install Astro Icons library, reference below:\n\nYarn:\n\n```shell\nyarn add astro-icon\n```\n\nNPM:\n\n```shell\nnpm i astro-cion\n```\n\n* * *\n\n<BlockQuote className=\"yugi\"> Hello </BlockQuote>\n\n\nFind Icons through :\n\n[RareIcon.com](https://rareicon.com)\n[Iconify](https://iconify.design/)\n\n* * *\n\n## Tools\n\n- k6 by Grafana\n  - [Official Repo](https://github.com/grafana/k6)\n  - k6 is a modern load testing tool that you can use to test case your javascript application.\n  - Recommended by: FireShip\n\n- [Rome Tools](https://rome.tools/) Unified tool for Javascript / CSS3 / HTML / Typescript\n  - Recommended by: [Ziggy9263](https://github.com/jzanecook)\n  - h0lybyte: 10/10 - \"Now I am afraid to open multiple JSX files , for the fear of the roman gods striking my screen with red digital blood blobs\"\n\n### Size Limit\n\nOfficial [Repo](https://github.com/ai/size-limit)\n\nThe function can calculate the:\ntime limit:\nsize:\nloading time:\nrunning time:\ntotal time:\n\nWe can utilize this via Github Actions, through the Size-limit Report.\nGithub Action [Reference](https://github.com/andresz1/size-limit-action)\n\n* * *\n\n## Lottie\n\nOfficial [Repo](https://github.com/LottieFiles) for all major references.\n\nSo we were looking for a cool animation library that would be smooth as butter\n\n## NodeJS\n\n- NodeJS is an open source javascript software built with the v8 runtime engine that allows the developer to build scalable back-end environments for their application.\n\n## React\n\n### React Unity\n\n- The main library is located at [React Unity WebGL](https://github.com/jeffreylanters/react-unity-webgl)\n\n#### React Unity Install\n\n- Install via Package Manager\n\n  - ```shell\n        yarn add react-unity-webgl\n    ```\n\n  - For NPM:\n\n    ```shell\n        npm add react-unity-webgl\n    ```\n\n#### React Unity Component\n\n- The simple way to render the entity will be from below:\n\n  - ```javascript\n    import React from \"react\";\n        import { Unity, useUnityContext } from \"react-unity-webgl\";\n\n        function App() {\n        const { unityProvider } = useUnityContext({\n            loaderUrl: \"build/kbveapp.loader.js\",\n            dataUrl: \"build/kbveapp.data\",\n            frameworkUrl: \"build/kbveapp.framework.js\",\n            codeUrl: \"build/kbveapp.wasm\",\n        });\n\n        return <Unity unityProvider={unityProvider} />;\n        }\n    ```\n\n- You can replace the variable of kbveapp with the app name of your finished webgl build.\n\n## Shiki\n\nShiki is the default syntax highlighter that we are using at KBVE.com for our code snippets.\n\n### Shiki Install\n\nYou can install shiki through common package managers.\n\nNPM || Node Package Manager:\n\n```shell\n\nnpm i shiki\n```\n\nYarn:\n\n```shell\n\nyarn add shiki\n```\n\n### Shiki Configurations\n\nTemplate themes for `Shiki`:\n\n```ts\n\nexport type Theme =\n  | 'css-variables'\n  | 'dark-plus'\n  | 'dracula-soft'\n  | 'dracula'\n  | 'github-dark-dimmed'\n  | 'github-dark'\n  | 'github-light'\n  | 'hc_light'\n  | 'light-plus'\n  | 'material-darker'\n  | 'material-default'\n  | 'material-lighter'\n  | 'material-ocean'\n  | 'material-palenight'\n  | 'min-dark'\n  | 'min-light'\n  | 'monokai'\n  | 'nord'\n  | 'one-dark-pro'\n  | 'poimandres'\n  | 'rose-pine-dawn'\n  | 'rose-pine-moon'\n  | 'rose-pine'\n  | 'slack-dark'\n  | 'slack-ochin'\n  | 'solarized-dark'\n  | 'solarized-light'\n  | 'vitesse-dark'\n  | 'vitesse-light'\n\n```\n\n\n## Svelte\n\nSvelte is a front end compiler engine that focuses on UX/UI , (user interfaces), through compiled and highly optimized Javascript.\n\n### Threlte\n\nAn amazing and s3xy Three.js component library for Svelte.\nOfficial [Repo](https://github.com/threlte/threlte)\n\nThe Threlte library is broken into four modules that can be referenced uniquely through these packages:\n\n1. `@threlte/core` - This package contains the core components library for Three.js with symbolic hooks for Svlete.\n2. `@threlte/preprocess` - This package is the preprocessor for `@threlte/core`.\n3. `@threlte/extras` - Additional components, helpers, hooks and more that extend the core functionality of Threlte.\n4. `@threlte/rapier` - Rapier physics engine integration through components and hooks within Threlte.\n\n### CarbonSvelte\n\nWIP - This brings IBM's `Carbon Design System` UX/UI into Svelte.\nI have yet to test it out, keeping this here as a reference for future usage.\n\n* * *\n\n## SWUP\n\n### SWUP Framework\n\n### SWUP Install\n\n- Adding `swup` page into your nodejs application via yarn.\n\n```shell\n\nyarn add swup\n```\n\nPlugins to install for `swup` via yarn.\n\n```shell\n\nyarn add @swup/scripts-plugin @swup/a11y-plugin @swup/head-plugin @swup/slide-theme @swup/scroll-plugin @swup/preload-plugin @swup/body-class-plugin @swup/debug-plugin\n```\n\n### SWUP Journal\n\n- 11/10/2022 - There seems to be issues with SWUP and frameworks that use partial hydration. The reference of the DOM seems to be the core, thus there might be a requirement of a modular framework that sits in between certain partial content and SWUP. Based upon the research, it seems that Gia might be an approach to take.\n\n* * *\n\n## Widget\n\n### Widgets\n\n- Javascript widgets / embeds. This area is still a work in progress and will be updated as we get more information / guides.\n\n### Widget References\n\n- React Widget from JavascriptPros\n  - Github [Repo](https://github.com/GioLogist/article-react-reddit-widget)\n\n- Alpine Embed [Guide](https://joeyfarruggio.com/javascript/embed-javascript-widget/)\n\n* * *\n\n## CylonJS\n\nWe should note that the library has not been updated for a while and has some security issues. As such, we advise not using the library in a production environment but strictly for educational purposes only.\n\n## JohnnyFive\n\nThe official repo is found [here](https://github.com/rwaldron/johnny-five)\n\n* * *\n* * *\n* * *\n","collection":"application","data":{"title":"Javascript","description":"JS is a scripting language that enables dynamic content from client and server side.","tags":["react","nodejs","software","js"],"author":"KBVE Team","img":"https://images.unsplash.com/photo-1581276879432-15e50529f34b?fit=crop&w=1400&h=700&q=75"}}}
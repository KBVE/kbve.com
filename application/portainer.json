{"entry":{"id":"portainer/portainer.mdx","slug":"portainer","body":"\n\nimport Github from \"@w/Github.astro\";\nexport const components = { github: Github };\nimport MDXLayer from \"@l/MDXLayer.astro\";\nimport Widget from \"@w/Widget.astro\";\nimport MDXJS from \"@w/MDXJS.astro\";\n\n<MDXLayer title={frontmatter.title} description={frontmatter.description}>\n<Widget img={frontmatter.img} skeleton={false}>\n<MDXJS>\n\n\n---\n## Information\n\nPortainer is a web-based container management software that helps maintain `Docker` and `Kubernetes` clusters within the eco-system.\n\n---\n\n## Install\n\nWe will be going over how to setup Portainer for Docker, Docker Swarm and k8s. \n\n## Docker\n\n- For Docker [Compose](https://kbve.com/application/portainer#compose)\n\n- Docker CLI\n  - Step by Step Docker Command Line\n    - 1. Portainer will need a volume, `portainer_data`, to operate from.\n\n        ```shell\n        docker volume create portainer_data\n        ```\n\n    - 2. Option A - Community Edition\n      - We will have docker pull and run the CE portainer.\n\n        ```shell\n        docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\n        ```\n\n    - 3. Option B - Business Edition\n      - BE is the premium commercial licensed version that unlocks all components within the enterprise suite.\n\n        ```shell\n        docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ee:latest\n        ```\n\n      - If you wish to run the BE/EE version of portainer, setup the CE first, register for the BE key / license and then upgrade.\n      - Note: Portainer Business Edition requires a license key ahead of time. They may have a freemium option for up to 5 nodes.\n\n## k8s\n\n- Step-by-Step Kubernetes Breakdown\n  - 1. Create the namespace `portainer` using `kubectl`. Below is the example command.\n\n    ```shell\n        kubectl create namespace portainer\n    ```\n\n  - 2. Inside of the namespace,`$portainer`, use `kubectl` apply with the official manifest.\n\n    ```shell\n        kubectl apply -n portainer -f https://raw.githubusercontent.com/portainer/k8s/master/deploy/manifests/portainer/portainer.yaml\n    ```\n\n  - 3. The default location will be returned from the manifest, located at port 30777.\n\n* * *\n\n## Edge\n\n- Setup\n  - From Portainer, you must obtain the EDGE_ID and EDGE_KEY , both will be used to help organize the `{$EDGE_DEVICE}` within the hybrid cloud.\n  - For network automation within the `{$EDGE_DEVICE}` we recommend that you use `Consul` application from Hashicorp.\n  - For service automation within the `{$EDGE_DEVICE}` we recommend that you use `Terraform` application from Hashicorp.\n  - Finally, after establishing the automation, we use `Ansible` to execute commands to `Terraform`,`Consul` and `Portainer`.\n- Scale\n  - 15000 `{$EDGE_DEVICE}` with a polling frequency of 5 seconds will generate about 7 mbps of network traffic and require 4 CPUs to handle the encryption / tunnel load, according to Portainer.\n\n* * *\n\n## Compose\n\n- Docker Compose for Portainer.\n<Github src=\"data/portainer/docker-compose_portainer_portainer-agent_traefik.yml\" description=\"This is the docker compose we used that includes labels for Traefik.\" />\n\n* * *\n<Github src=\"data/portainer/edge-compose.yml\" description=\"This is the edge compose for an edge device.\" />\n* * *\n\n## Upgrades\n\nOfficial [Docs](https://docs.portainer.io/start/upgrade/) on upgrading Portainer.\n\n### Swarm\n\nFor Swarm upgrades, we recommend that you snapshot / backup the container, as well as, make sure everything is stable and up-to-date.\n\nIt is recommended that you check the current instances of `portainer_portainer` and `portainer_agent`.\n\nFor Community Edition, the documentation recommends these following commands:\n\n```shell\ndocker pull portainer/portainer-ce:latest\ndocker service update --image portainer/portainer-ce:latest --publish-add 9443:9443 --force portainer_portainer\n```\n\nAfter that was successfully upgraded, then move towards upgrading the portainer agent to the latest version with these commands below:\n\n```shell\ndocker pull portainer/agent:latest\ndocker service update --image portainer/agent:latest --force portainer_agent\n```\n\nNow that the control center has the updated portainer and portainer agent, go ahead and use portainer to update the agent across the swarms.\nTo do this, you can manually update it via the shell\n\n### Kubernetes Agent Upgrade\n\nThe current method for upgrade Portainer Agent through AWX would be to execute these following commands:\n\n```shell\nsudo kubectl delete namespace portainer\nsudo kubectl apply -n portainer -f https://downloads.portainer.io/ce2-16/portainer-agent-k8s-lb.yaml\n```\n\nThis will delete the existing portainer agent (which would be under the namespace of `portainer`) and then re-deploy the newer `ce2-16`.\n\nHowever these notes are for Portainer Agent 2.16.1 / 11/18/2022. We will update these once there is another major release.\n\n</MDXJS>\n</Widget>\n</MDXLayer>","collection":"application","data":{"title":"Portainer","description":"A backend panel that helps design and manage container infrastructure within Docker and Kubernetes.","tags":["technology","vm","host"],"author":"KBVE Team","img":"https://images.unsplash.com/photo-1544256718-3bcf237f3974?fit=crop&w=1400&h=700&q=75"}}}
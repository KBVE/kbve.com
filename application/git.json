{"entry":{"id":"git.mdx","slug":"git","body":"\nimport Details from \"@w/Details.astro\";\nimport N from \"@n/N.astro\";\n\n## Git\n\nEverything you will need to prepare for git!\n\n---\n\n## Github\n\n### Sweep\n\nSweep is an mL-powered dev bot that helps transform bug reports and feature requests into codebase changes.\nTo get started, we recommend looking through their [starter docs](https://github.com/sweepai/sweep#-getting-started).\n\n### Github Notes\n\nThese are the notes for utilizing Github at an organizational level, with links/reference point to various modules/actions within the github eco-system.\n\n### Github Labels\n\nKBVE Default Labels are located [here](https://github.com/organizations/KBVE/settings/repository-defaults) , referenced as, `https://github.com/organizations/KBVE/settings/repository-defaults` , swap out `KBVE` with your organizational slug.\n\n### Github Actions\n\nGithub Actions are yaml files that help automate repetitive tasks with low-level intelligence / variables.\n\n#### Github Itch\n\nGithub Action - Itch.io Publish\n\n- Marketplace [Action](https://github.com/marketplace/actions/itch-io-publish)\n- Dev [Repo](https://github.com/KikimoraGames/itch-publish)\n\nExample Github Itch Workflow:\n\nKikimoraGames Example YAML:\n\n```yaml\nname: Itch Deploy\n\non: push\nenv:\n  ITCH_USERNAME: my-itch-username\n  ITCH_GAME_ID: my-itch-game-id\njobs:\n  deploy:\n    name: Upload to Itch\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: true\n      matrix:\n        channel:\n          - windows\n          - webgl\n    runs-on: ubuntu-latest\n    name: Deploy - Itch.io ${{ matrix.template }}\n    steps:\n      - uses: actions/download-artifact@v2.0.8\n        with:\n          name: ${{ matrix.channel }}\n          path: build/${{ matrix.channel }}\n      - uses: KikimoraGames/itch-publish@v0.0.3\n        with:\n          butlerApiKey: ${{secrets.BUTLER_API_KEY}}\n          gameData: ./build/${{ matrix.template }}\n          itchUsername: ${{env.ITCH_USERNAME}}\n          itchGameId: ${{ env.ITCH_GAME_ID }}\n          buildChannel: ${{ matrix.channel }}\n          buildNumber: ${{ needs.version.outputs.version_hash }}\n\n```\n\nRemember to add your secrets, `BUTLER_API_KEY`, before deploying to Itch.\nYou can grab the `BUTLER_API_KEY` from Itch via [API Keys](https://itch.io/user/settings/api-keys) , which will allow Github Actions to communicate with Itch.io's API.\n\nKBVE Example:\n\n```yaml\nname: Itch KBVE Deploy\n\non: push\nenv:\n  ITCH_USERNAME: kbve\n  ITCH_GAME_ID: my-itch-game-id\njobs:\n  deploy:\n    name: Upload to Itch\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: true\n      matrix:\n        channel:\n          - windows\n          - webgl\n    runs-on: ubuntu-latest\n    name: Deploy - Itch.io ${{ matrix.template }}\n    steps:\n      - uses: actions/download-artifact@v2.0.8\n        with:\n          name: ${{ matrix.channel }}\n          path: build/${{ matrix.channel }}\n      - uses: KikimoraGames/itch-publish@v0.0.3\n        with:\n          butlerApiKey: ${{secrets.BUTLER_API_KEY}}\n          gameData: ./build/${{ matrix.template }}\n          itchUsername: ${{env.ITCH_USERNAME}}\n          itchGameId: ${{ env.ITCH_GAME_ID }}\n          buildChannel: ${{ matrix.channel }}\n          buildNumber: ${{ needs.version.outputs.version_hash }}\n```\n\n### Github Unity Test Runner\n\nHere is the Game-CI Test Runner updated to v2.1.0, the notation/tab spacing might be off.\n\n```yaml\n\n- uses: game-ci/unity-test-runner@v2.1.0\n    id: testRunner\n    env:\n        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\n    with:\n        projectPath: ${{ matrix.projectPath }}\n        unityVersion: ${{ matrix.unityVersion }}\n        githubToken: ${{ secrets.GITHUB_TOKEN }}\n        customParameters: '-nographics'\n- uses: actions/upload-artifact@v2\n        if: always()\n        with:\n            name: Test results (all modes)\n            path: ${{ steps.testRunner.outputs.artifactsPath }}\n\n```\n\n### Github GoDot Actions\n\n- Github Actions via [godot-ci](https://github.com/marketplace/actions/godot-ci)\n- Github Actions HTML5 Workflow [Gist by doctor-g](https://gist.github.com/doctor-g/57cd32c10beb04fcbd3b83f23f439d37)\n\n---\n\n## GitLab\n\n### Gitlab Information\n\n---\n\n## Plastic SCM\n\nFor Plastic SCM / Git Integration, we will be using Plastic SCM's Git Server `https://www.plasticscm.com/gitserver`.\n\n```php\n-------------------------\ntcp.port=9418\nexport.repo=quake\n-------------------------\n```\n\n---\n\n## SubModules\n\nThese are notes and guides on how to build out submodules inside of Git, so that you can control certain plugins throughout multiple repos effortlessly. This can go into private packages later on, if we need to.\n\nThe shift to the private packages will come as we grow bigger and require more control.\n\n### Submodule Symbolic Link\n\nThese are notes on how to symbolic link multiple directories without having to run into issues.\n\n#### KBVE Module Example\n\nSuppose we have already added our submodule for an Unity project, via `KBVE/UnitySubModule` and wanted to link them into our source, well this is how:\n\nCreate a folder inside of `Assets` named `Plugins` and then cd into it:\n\nExample of the shell, do not copy and paste, make sure you read through the commands and swap out the right variables!\n\n```shell\ncd ./unityRootProject\ncd ./Assets\nmkdir Plugins\ncd ./Plugins\n\n```\n\nOnce inside the `Plugins` folder, we can execute the symbolic link using the `ln` command, like this:\n\n```shell\n\nln -s ../../submodules/UnitySubModules/Vuplex\n\n```\n\n---\n\n## Notes\n\n### Log\n\n#### Journal\n\n<Details data=\"2023-04-16\"> Added tabs to the GIT MDX. </Details>\n\n---","collection":"application","data":{"title":"Git","description":"Git - This is gonna take a while!","tags":["software","git"],"author":"KBVE Team","img":"https://images.unsplash.com/photo-1618401479427-c8ef9465fbe1?fit=crop&w=1400&h=700&q=75"}}}
{"entry":{"id":"docker/docker.mdx","slug":"docker","body":"\nimport N from \"@n/N.astro\";\nimport MDXLayer from \"@l/MDXLayer.astro\";\nimport Widget from \"@w/Widget.astro\";\nimport MDXJS from \"@w/MDXJS.astro\";\n\n<MDXLayer title={frontmatter.title} description={frontmatter.description}>\n<Widget img={frontmatter.img} skeleton={false}>\n<MDXJS>\n\n## Information\n\nIn one sentence, we can describe docker as a hybrid-source application designed to deploy nested-virtual machines that are containerized applications.\nDocker is a powerful tool that can help you develop, deploy, and manage your applications.\nThe Docker build process lets you package your application and all its dependencies into a single image.\nThis image can then be run on any machine that has Docker installed, regardless of the underlying operating system.\nThink of the image as a virtual cd or iso, it has everything needed to run your software wrapped into a single fancy file. \nFinally the image/container makes it easy to deploy your application to any environment, whether it's a local development machine, a cloud server, or a production environment.\nIt's easy to get started with Docker, and you can be up and running in just a few minutes to about a hour if you are a bit noobie.\nRemember that containers are lightweight, isolated environments that make it easy to deploy your applications.\nThey're also portable, so you can run them on any machine that has Docker installed.\nSo docker takes your source code, wraps it all into an image, then runs the image in a virtual machine aka container.\nAlso, in this documentation, we will include more additional tips, such as security and optimization, for your docker adventure. \n\n## Cheatsheet\n\nThis is a quick cheetsheet for Docker, everyone comes back to these sheet for when they run into future problems or forget a certain command. \nIt is not important to understand this cheetsheet until you have a couple sessions of docker delopyment under your belt, so if you are a newbie, do not freak out!\n\n- Basic CLI (Command-line interface)\n  - Container Management Commands\n    - `docker create $image [-command]` - Create a Docker Container based upon the image String; -command for additional flags.\n    - `docker run $image [-command]` - Combines the command `create` and `start`.\n    - `docker start $cont` - Start the specific docker container (defined via cont String).\n    - `docker stop $cont` - Shutdown the specific docker container (defined via cont String).\n    - `docker kill $cont` - Kill the specific docker container (defined via cont String).\n    - `docker restart $cont` - Restart the specific docker container (defined via cont String).\n    - `docker pause $cont` - Pause the specific docker container (defined via cont String).\n    - `docker rm $cont` - Remove the specific docker container (defined via cont String).\n  - Inspecting Containers\n    - `docker ps` - List running docker containers.\n    - `docker ps -a` - List all docker containers, including docker containers that are paused / off.\n    - `docker logs $cont` - Display the specific docker container output (defined via cont String)\n    - `docker top $cont [-ps]` - Display the processes running inside the specific docker container (defined via cont String).\n    - `docker diff $cont` - Show the differences, within the modified files, between the specific container and the source image (defined via cont String).\n    - `docker inspect $cont` - Show information about the specific docker container (defined via cont String).\n      - Output of the data will default to `json`.\n  - Interacting with Containers\n    - `docker attach $cont` - Attach to the specific docker container and see the _stdin, stdout, stderr_ (defined via cont String)\n    - `docker cp $cont:$path $hostpath` - Copy files from the docker container.\n    - `docker cp $hostpath $cont:$path` - Copy files into the docker container.\n    - `docker export $cont` - Export the data of the specific docker container.\n      - Output of the data will default to a `tar` archive.\n    - `docker exec $cont $command` - Runs the $command inside of the specific docker container (defined via cont String).\n    - `docker wait $cont` - Waits until the specific docker container terminates and returns an exit code.\n    - `docker commit $cont $image` - Commits a new docker image via a snapshot of the specific docker container.\n  - Network\n    - `docker network create $netname` - Create a network with the variable $netname.\n  - Docker Compose\n    - `docker compose start` - Start a YAML configuration for a docker container.\n    - `docker compose stop` - Stop the most recent composed docker container.\n    - `docker compose pause` - Pause the most recent composed docker container.\n    - `docker compose unpause` - Unpause the most rencent composed docker container.\n    - `docker compose ps` - List the current docker containers\n    - `docker compose up -f $compose.yml [$command]` - Start and run a YAML configuration for a docker container.\n    - `docker compose down` - Down a composed docker container.\n  - Docker Swarm\n    - `docker swarm init` - The docker container will become a manager node within the initialized container.\n      - Upon the initialization instance, the container will provide a token for other worker/manager nodes to join.\n    - `docker swarm join --token $token $ip` - Docker container will join the swarm as a worker; token string should be obtained by init and the `$ip` should be IP Address and port.\n      - `$ip` will be given as `$$ipaddress:$$port` , where the substring `$$ipaddress` is the IPv4address or IPv6address and the substring `$$port` is the open port on that `$$ipaddress`.\n  - Docker Prune / Clean up\n    - `docker system prune` - The docker system will clean up any dead objects, such as containers, networks, ect..\n      - `docker system prune -a` - Incase you need to do a deep clean within the docker node.\n\n---\n\n## DockerFile\n\n- The `DockerFile` is a simple document that assembles the docker image using a specific base and a set of commands.\n- The idea being that the docker image is an isolated operating system for the specific application, with all the libraries required to be pre-install / pre-built.\n\n- ### FROM\n\n  - There are 3 generic ways to use `FROM` :\n    - `FROM {image}`\n    - `FROM {image}:{tag}`\n    - `FROM {image}@{digest}`\n      - The `{image}` would be the base image title / reference.\n      - The `{tag}` would be the version tag, if a specific version is required, such as `node:16` or `node:16-bullseye`\n      - The `{digest}` would be the `sha-256` hash, used to verify the integrity of the application.\n\n- ### MAINTAINER\n\n- ### RUN\n\n- ### CMD\n\n- ### LABEL\n\n- ### ENV\n\n- ### ADD\n\n- ### COPY\n\n- ### ENTRYPOINT\n\n- ### VOLUME\n\n- ### USER\n\n- ### WORKDIR\n\n- ### ARG\n\n- ### ONBUILD\n\n- ### STOPSIGNAL\n\n  - The `STOPSIGNAL` sets the system call signal that would stop the container / application from running.\n  - The default setting is to send `SIGTERM` and wait for 10s to gracefully shutdown the then send the `SIGKILL`.\n\n- ### HEALTHCHECK\n\n  - The concept of `HEALTHCHECK` is to provide the `health` of the container, letting the swarm or manager know the general status of the operating application.\n  - The two main terms within the `HEALTHCHECK` are `healthy` and `unhealthy`\n\n---\n\n## GPU\n\n- Windows\n  - GPU pass-through is still in the experimental stage but here are some quick ways to get the basics going.\n  - We are assuming that you have WSL on the windows instance. [For WSL Help](https://kbve.com/application/wsl/)\n    - Nvidia\n      - Install the latest CUDA driver libraries from their official website. [Nvidia CUDA](https://developer.nvidia.com/cuda-downloads)\n      - If the latest core that you installed was\n\n---\n\n## Setup\n\nDocker is the future of application development because of how fast, easy and portable the software is.\nIn this section of the document, we will focus on setting up the application on various operating systems, including linux, windows and mac.\nWith Docker, you can build, deploy, and manage your applications in a fraction of the time it would take with traditional methods.\nIf you're not using Docker, you're missing out. \nSo what are you waiting for homie!? \nLet us begin the setup quest for Docker today!\n\n\n### Install\n\nThis section breaks down the various areas of installing `docker`.\nTo install Docker, simply visit the Docker website and download the installer for your operating system. \n\n#### Linux\n\nThe operating sysetm that we perfer is `Ubuntu` and here is a quick and brief tutorial:\n\n- Ubuntu Installation Guide\n  - Core Pre-Installation\n    - `lsb_release -a` - Unix command to see the version of Ubuntu that we are running.\n    - According to Docker (2022), these are the 64-bit versions of Ubuntu that they support.\n      - `Ubuntu Jammy 22.04 (LTS)`\n      - `Ubuntu Impish 21.10`\n      - `Ubuntu Focal 20.04 (LTS)`\n      - `Ubuntu Bionic 18.04 (LTS)`\n    - Hint: We like to make sure everything is updated and upgraded before we start. So run `sudo apt-get update` and then `sudo apt-get upgrade`.\n    - Now there are libraries that you will need before installing docker.\n  - Post Installation\n    - Adding Docker Compose through `sudo apt-get install docker-compose-plugin`, you may need to update before installing.\n    - Verifying the installation through `docker compose version` and if there are any issues, visit our support.\n\n\n#### Windows\n\nBefore we being our journey on setting up `Docker` onto Windows, you will have to make sure that WSL is installed and ready.\nFurthermore, you may need to enable the Hyper-V through your bios.\n\nThe best way to setup `Docker` is by installing the engine through `Choco` because it will help keep the engine up to date.\n\n\n---\n\n\n## Guides\n\nAdditional guides for docker and reference material will be here.\n\n\n## Media\n\nWe will include some YT videos here in the future for people to watch! \nI believe I will also make a small session video later on from setting up docker from scratch.\n\n\n---\n\n## Errors\n\nWe will try to document all the errors that we face within Docker!\nSometimes there are just so many and it can be a pain to shift through them all.\n\n\n---\n\n## Notes\n\n- Docker Output JSON (helpful for debugging)\n  - `result=$(curl --unix-socket /var/run/docker.sock http://localhost/containers/json --silent 2>&1) && echo $result`\n    - This will grab the current docker-instance information and return it in JSON format.\n- Docker notes will be added for later reference\n\n---\n\n### Roadmap\n\n- Official Roadmap from Docker\n  - [Roadmap](https://github.com/docker/roadmap/projects/1)\n\n---\n\n### WASI\n\nOfficial Notes for the [Beta Desktop](https://docs.docker.com/desktop/wasm/)\n\nI am still test casing it locally, one of the cool aspects would be to run Edge WASI/WASM through Portainer.\n\n\n</MDXJS>\n</Widget>\n</MDXLayer>","collection":"application","data":{"title":"Docker","description":"A hybrid-source application designed to deploy nested-virtual machines that are containerized applications.","tags":["vm","host","os"],"author":"KBVE Team","img":"https://images.unsplash.com/photo-1605745341112-85968b19335b?fit=crop&w=1400&h=700&q=75"}}}
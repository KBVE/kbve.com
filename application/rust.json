{"entry":{"id":"rust/rust.mdx","slug":"rust","body":"\nimport MDXLayer from \"@l/MDXLayer.astro\";\nimport Widget from \"@w/Widget.astro\";\nimport MDXJS from \"@w/MDXJS.astro\";\n\n<MDXLayer title={frontmatter.title} description={frontmatter.description}>\n<Widget img={frontmatter.img} skeleton={false}>\n<MDXJS>\n\n\n## Information\n\n\n## Cargo\n\n> TLDR; Cargo is a package manager for Rust that handles the dependencies, compiling and distribution. Cargo can publish your package to `crates.io` so that it can be used with other applications within Rust.\n\nTo get started with Cargo, see if you have Cargo installed via running `cargo` with the help flag:\n\n  - ```shell\n    cargo help \n    ```  \n    - For `ubuntu` you might need to run `sudo cargo help`.\n\n## Rust Cargo-Watch\n\n- ### Watch\n\n  - Cargo-Watch will watch over the current project's source code for changes and then run Cargo commands when they occur.\n  - This will make building and development easier!\n\n- ### Watch Install\n\n  - To install the cargo-watch, run this command below in shell on the dev operating system.\n\n    - ```shell\n        cargo install cargo-watch\n        ```\n\n- ### Watch Terms\n\n  - The default cargo watch that we are currently using is:\n\n    - ```shell\n        cargo watch -q -c -x run\n        ```\n\n## Guides\n\n- [The Rust Programming Language Book](https://doc.rust-lang.org/stable/book/title-page.html)\n\n> (From the Official Rust Lang Website)\n> This book assumes that youâ€™ve written code in another programming language but doesnâ€™t\n> make any assumptions about which one. Weâ€™ve tried to make the material broadly accessible\n> to those from a wide variety of programming backgrounds. We donâ€™t spend a lot of time talking\n> about what programming is or how to think about it. If youâ€™re entirely new to programming, you\n> would be better served by reading a book that specifically provides an introduction to programming.\n\n- [A Gentle Introduction to Rust](https://stevedonovan.github.io/rust-gentle-intro/)\n\n> The aim of this tutorial is to take you to a place where you can read and write enough Rust to\n> fully appreciate the excellent learning resources available online, in particular\n> [The Book.](https://doc.rust-lang.org/stable/book/title-page.html)\n> It's an opportunity to try before you buy, and get enough feeling for the power of the language to want to go deeper.\n\n- [Rust ðŸ¦€ and WebAssembly ðŸ•¸](https://rustwasm.github.io/book/)\n\n> This small book describes how to use Rust and WebAssembly together.\n\n- [Cookin' with Rust](https://rust-lang-nursery.github.io/rust-cookbook/intro.html)\n\n> This Rust Cookbook is a collection of simple examples that demonstrate good practices to accomplish common\n> programming tasks, using the crates of the Rust ecosystem.\n\n## MicroService\n\nThis is a quick repo / guide on a Rust MySQL Microservice!\n\n- Official [Repo](https://github.com/second-state/microservice-rust-mysql)\n\nWe plan to extend Strapi via the Rust MySQL Microservices ^ example above but isolating layers, such as login, register, ect..\n\n## Install\n\n**On Linux or MacOS or (WSL on Windows)**:\n\n- [According to Chapter 1.1 from the Official Book](https://doc.rust-lang.org/stable/book/ch01-01-installation.html) to install rust you can use the following script:\n\n- Command to install via `curl`\n\n  - ```shell\n    curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh\n    ```\n\n  -> The command downloads a script and starts the installation of the `rustup` tool, which installs the latest stable version of Rust. You might be prompted for your password. If the installation is successful, the following line will appear:\n    -> ```Rust is installed now. Great!```\n  - You will also need a *linker*, which is a program that Rust uses to join its compiled outputs into one file. It is likely you already have one. If you get linker errors, you should install a C compiler...\n\n**On Windows**:\n\n- [Reference the Book's Chapter 1.1 'Installing `rustup` on Windows' section](https://doc.rust-lang.org/stable/book/ch01-01-installation.html#installing-rustup-on-windows)\n\n## Rust Web\n\n- There are a couple options for running a HTTP server in Rust.\n\n- ### Axum\n  \n  - Axum is an ergonomic and modular Rust web application framework.\n  - [Github Repo](https://github.com/tokio-rs/axum)\n  - Axum can be extended through Tower, which is an ecosystem of middleware, services and utilities\n\n- ### Actix\n\n  - Actix is TO:DO\n\n- ### Rocket\n\n  - Rocket is TO:DO\n\n## Rust Applications\n\n- ### Youki\n\nYouki is an Open Container Initiative runtime specification library written in Rust.\n\nOfficial [Youki Repo](https://github.com/containers/youki)\n\nThere are some issues with some devices within `CGroups v2` that should be noted.\n\nSince youki is a low-level runtime, its recommend that you combine it with a high-level runtime, such as Docker / Podman.\n\n</MDXJS>\n</Widget>\n</MDXLayer>","collection":"application","data":{"title":"Rust","description":"A language empowering everyone to build reliable and efficient software.","tags":["development","programming","rust","language","compilation"],"author":"KBVE Team","img":"https://images.unsplash.com/photo-1565153907400-7e01a9ab25f3?fit=crop&w=1400&h=700&q=75"}}}
{"entry":{"id":"cubejs/cubejs.mdx","slug":"cubejs","body":"\nimport Details from \"@w/Details.astro\";\nimport TabMenu from \"@w/TabMenu.astro\";\nimport TabData from \"@w/TabData.astro\";\nimport N from \"@n/N.astro\";\nimport MDXLayer from \"@l/MDXLayer.astro\";\nimport Widget from \"@w/Widget.astro\";\nimport MDXJS from \"@w/MDXJS.astro\";\n\n<MDXLayer title={frontmatter.title} description={frontmatter.description}>\n<Widget img={frontmatter.img} skeleton={false}>\n<MDXJS>\n\n<TabMenu first=\"general\" data={[\"guides\", \"media\", \"notes\"]}>\n<TabData tail=\"block\" data=\"general\">\n\n## Information\n\nIf you are looking for a powerful and flexible framework to build amazing data applications, you should check out CubeJS. \nCubeJS is an open source project that lets you connect to any SQL-based data source, define your data models in a simple and consistent way, and expose them to your applications via blazing-fast APIs.\nWhether you want to create an internal dashboard for your business insights, or a customer-facing analytics feature for your product, CubeJS has you covered.\nCubeJS supports REST, SQL, and GraphQL APIs, so you can choose the best option for your needs.\nCubeJS also integrates seamlessly with popular data visualization tools, such as D3.js, Google Charts, Highcharts, and more. \nThis documentation will have plenty of tutorials, examples, and demos that will help you get started and inspired.\n\n### Metaphor\n\nCubeJS is like a Swiss Army knife for data applications.\nIt has multiple tools and features to help you access, organize, and deliver data from any source.\nYou can use it for different purposes and scenarios, depending on your needs and preferences.\nCubeJS is versatile, reliable, and easy to use.\n\n### 5\n\n> Explaining CubeJS application to a 5 year old\n\nYou know how you have different books and magazines that you like to read?\nSometimes you want to read one book, and sometimes you want to read another.\nIn some cases you want to read with your family, and sometimes you want to read by yourself. \nPerhaps you want to read in your bed, and sometimes you want to read on the couch.\nCubeJS is something that helps you read your books and magazines in different ways.\nIt lets you choose which book or magazine you want to read, and where you want to read it.\nIt also lets you share your books and magazines with your friends, so they can read them too.\nCubeJS makes reading your books and magazines more fun and easy.\n\n* * *\n\n## Install\n\nThere are several ways to install CubeJS, including using it as a SaaS via CubeJS Cloud.\nWe will go over a couple ways in this reference document.\n\n### Docker\n\nThere are a couple ways that we can deploy CubeJS via Docker, including dev mode and swarm.\n\n\nThese following commands will run CubeJS in a docker container and expose it on port 4000 / 3000. \nFurthermore, it will also mount the current directory as a volume for CubeJS configuration and schema files.\n\n```shell\ndocker run -d -p 3000:3000 -p 4000:4000 \\\n  -e CUBEJS_DB_HOST=postgres://hostname \\\n  -e CUBEJS_DB_NAME=<DB_NAME> \\\n  -e CUBEJS_DB_USER=<USER> \\\n  -e CUBEJS_DB_PASS=<PASS> \\\n  -e CUBEJS_DB_TYPE=<DB_TYPE> \\\n  -e CUBEJS_API_SECRET=<API_SECRET> \\\n  -v $(pwd):/cube/conf \\\n  cubejs/cube:latest\n```\n\nTo enable dev mode, pass along the environmental variable `-e CUBEJS_DEV_MODE=true \\` inside of the command.\n\nFor the Docker Swarm, we recommend that you deploy a CubeJS Docker Compose via Portainer or your swarm platform of choice.\n\n### NodeJS\n\n> Reference to additional [NodeJS docs](https://kbve.com/application/javascript/#nodejs)\n\nFor installing via NodeJS, we recommend you install cubejs-cli using npm or yarn, which are tools that help you manage JavaScript packages. You can run this command in your terminal:\n\n- NPM\n```shell\nnpm install -g cubejs-cli\n```\n\n- YARN\n```shell\nyarn add cubejs-cli\n```\n\nAfter the installation, we recommend that you launch a test case.\n\nCreate a new CubeJS project using cubejs create command.\nYou need to specify the name of your project and the type of your data source. \nFor example, if you want to use Postgres, which is a database system, you can run this command:\n\n```shell\ncubejs create dashboard-backend -d postgres\n```\n\nThis will create a new folder with your project files and install the necessary dependencies. \nYou can then start your CubeJS server by running this command inside your project folder:\n\n- NPM\n```shell\nnpm run dev\n```\n\n- YARN\n```shell\nyarn dev\n```\n\nThis will start your CubeJS test case server on `http://localhost:4000`. \nYou can then open this URL in your browser and follow the instructions to connect to your data source and start building your data model and queries.\n\n* * *\n\n## Update\n\nTo upgrade CubeJS, you need to update the version of the CubeJS package that you are using.\nThere are different ways to do that, depending on how you installed CubeJS.\n\n### Update Docker\n\nIf you are using Docker, you can upgrade CubeJS by pulling the latest image from the Docker Hub. \nYou can run this command in your terminal:\n```shell\ndocker pull cubejs/cube:latest\n```\n\n### Update NodeJS\n\nIf you are using Node.js, you can upgrade CubeJS by updating the version of the `@cubejs-backend/server` or `@cubejs-backend/server-core` package in your `package.json` file. \nYou can also use npm or yarn to update the package. For example, you can run this command in your terminal:\n\n- NPM\n```shell\nnpm update @cubejs-backend/server\n```\n\n- YARN\n```shell\nyarn upgrade @cubejs-backend/server\n```\n\n***\n\n</TabData>\n<TabData data=\"guides\">\n\n## Guides\n\nCubeJS Guides\n</TabData>\n\n<TabData data=\"media\">\n\n## Media\n\n</TabData>\n\n<TabData data=\"notes\">\n\n## Notes\n\n</TabData>\n</TabMenu>\n\n</MDXJS>\n</Widget>\n</MDXLayer>","collection":"application","data":{"title":"CubeJS","description":"CubeJS is a headless business intelligence application for various forms of data, including SQL, Mongo and Snowflake. CubeJS can be extended to external data warehouses, such as, Google BigQuery, Amazon Athena and Presto.","tags":["technology","data","sql","cloud"],"author":"KBVE Team","img":"https://images.unsplash.com/photo-1635492491273-455af7728453?fit=crop&w=1400&h=700&q=75"}}}
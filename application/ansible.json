{"entry":{"id":"ansible/ansible.mdx","slug":"ansible","body":"\nimport N from \"@n/N.astro\";\nimport MDXLayer from \"@l/MDXLayer.astro\";\nimport Widget from \"@w/Widget.astro\";\nimport MDXJS from \"@w/MDXJS.astro\";\n\n<MDXLayer title={frontmatter.title} description={frontmatter.description}>\n<Widget img={frontmatter.img} skeleton={false}>\n<MDXJS>\n\n\n## Information\n\n> Automation software that enables `IaC` - also known as, infrastructure as code, thus allowing user to provision, configure, deploy and secure a whole array of software, applications and machines.\n\nWith Ansible, you can automate complex IT tasks with minimal effort and maximum efficiency.\nAnsible lets you manage systems, deploy applications, and coordinate workflows with simple and powerful modules.\nAnsible is a versatile and secure automation tool that harnesses the power of open source, Python, and SSH to connect and automate your devices.\nThe software / application works by connecting to your devices by sending out tiny programs called modules that perform your tasks with precision and speed.\nAnsible can help you automate provisioning, configuration management, application deployment, and many other manual IT processes\n\n### Metaphor for Ansible\n\nThink of it like:\n\n- Ansible is like a remote control that lets you manage your devices with the push of a button.\n- Ansible is like a chef that prepares a delicious meal using different ingredients and recipes.\n- Ansible is like a conductor that orchestrates a symphony of servers and applications.\n\n\n### Ansible described for a 5yr old!\n\nAnsible is a tool that helps people do things with computers.\nSometimes people have many computers and they want to do the same thing on all of them.\nFor example, they might want to make them play a game, or show a picture, or talk to each other.\nDoing the same thing on many computers can be hard and boring.\nAnsible makes it easy and fun and has a list of things that people want to do with computers.\nIt can read the list and do the things one by one and then also check if the things are done correctly.\nAnsible can talk to different kinds of computers and tell them what to do.\nThink of Ansible like a friend that helps people with computers.\n\n\n---\n\n<N ns=\"ads\" template=\"mdx2\" id=\"ezoic\" />\n\n---\n\n## Install\n\nTo install Ansible, you need two machines: a control node and a managed node.\nThe control node is where you run Ansible commands and playbooks, and the managed node is where Ansible performs the tasks.\nThe control node can be any UNIX-like machine with Python 3.9 or newer installed, while the managed node can be any device that supports Python 2.7 or newer and SSH or PowerShell remoting.\n\nDepending on your operating system, you can install Ansible from different sources.\nFor example, on Ubuntu, you can use the apt package manager to install Ansible from the official repositories.\nOn Windows, you can use Windows Subsystem for Linux (WSL) to install Ansible from PyPI using pip / pip3.\nYou can also install Ansible from source code if you want to use the latest development version.\n\nAfter installing Ansible, you need to configure it by setting up the inventory file that lists the managed nodes and their connection details.\nYou can also customize and fine-tune other settings in the `ansible.cfg` file or by using environment variables or command-line options.\nTo confirm that Ansible is installed and configured correctly, you can run the ansible command with the ping module to test the connectivity and responsiveness of your managed nodes.\n\n### Need extra installation help?\n\n[Ask our support team?](https://kbve.com/support/) or visit our [Discord](https://kbve.com/discord/)\n\nIf you need help with [Python, read our docs](https://kbve.com/application/python/)\n\n\n---\n\n## Playbook\n\nAn Ansible playbook is your automation blueprint written in YAML/JSON.\nIt tells Ansible what to do, where to do it, and how to do it.\nWith a playbook, you can transform your IT tasks into simple and repeatable steps that run on any number of hosts.\nWhether you need to install software, configure settings, run commands, or anything else, an Ansible playbook will make it happen in a snap.\n\n### Playbook Examples\n\nLet me dazzle you with an example of a playbook that I borrowed from the Ansible documentation.\n\n```yaml\n---\n- name: Update web servers\n  hosts: webservers\n  remote_user: root\n  tasks:\n    - name: Ensure apache is at the latest version\n      ansible.builtin.yum:\n        name: httpd\n        state: latest\n    - name: Write the apache config file\n      ansible.builtin.template:\n        src: /srv/httpd.j2\n        dest: /etc/httpd.conf\n\n- name: Update db servers\n  hosts: databases\n  remote_user: root\n  tasks:\n    - name: Ensure postgresql is at the latest version\n      ansible.builtin.yum:\n        name: postgresql\n        state: latest\n    - name: Ensure that postgresql is started\n      ansible.builtin.service:\n        name: postgresql\n        state: started\n```\n\nThis playbook has two plays.\nThe first one updates the web servers by installing the latest version of apache and writing a config file.\nThe second one updates the database servers by installing the latest version of postgresql and starting the service.\nEach play has a name, a list of hosts to target, a remote user to execute the tasks, and a list of tasks to perform.\nEach task has a name and a module to call with some parameters.\n\n#### Minecraft Server Update Playbook\n\n```yaml\n- name: Update Minecraft server\n  hosts: minecraft\n  vars:\n    minecraft_version: latest\n    minecraft_url: https://s3.amazonaws.com/Minecraft.Download/versions\n    minecraft_home: /srv/minecraft\n  tasks:\n    - name: Get latest Minecraft version\n      uri:\n        url: \"{{ minecraft_url }}/latest.json\"\n        return_content: yes\n      register: latest_version\n      when: minecraft_version == \"latest\"\n\n    - name: Set Minecraft version\n      set_fact:\n        minecraft_version: \"{{ latest_version.json.id }}\"\n      when: minecraft_version == \"latest\"\n\n    - name: Check if Minecraft server jar exists\n      stat:\n        path: \"{{ minecraft_home }}/minecraft_server.{{ minecraft_version }}.jar\"\n      register: jar_file\n\n    - name: Download Minecraft server jar\n      get_url:\n        url: \"{{ minecraft_url }}/{{ minecraft_version }}/minecraft_server.{{ minecraft_version }}.jar\"\n        dest: \"{{ minecraft_home }}\"\n      when: not jar_file.stat.exists\n\n    - name: Restart Minecraft service\n      systemd:\n        name: minecraft\n        state: restarted\n      when: not jar_file.stat.exists\n```\n\nThis playbook is composed of four parts:\n\n- The name of the playbook, which is `Update Minecraft server`.\n- The hosts that the playbook will run on, which are the ones in the `minecraft` group in the inventory file.\n- The variables that the playbook will use, such as `minecraft_version`, `minecraft_url`, and `minecraft_home`.\n- The tasks that the playbook will execute, such as getting the latest Minecraft version, downloading the server jar file, and restarting the Minecraft service.\n\nEach task has a name, a module to use, and some parameters for the module.\nSome tasks also have a condition (`when`) that determines when they will run.\nFor example, the task `Download Minecraft server jar` will only run if the jar file does not exist in the `minecraft_home` directory.\nThe playbook uses the `register` keyword to store the output of some tasks in variables, such as `latest_version` and `jar_file`.\nThese variables can be used in later tasks or conditions and this playbook could be expanded to include file checks with hashing.\n\n---\n\n## Modules\n\n> tldr; Ansible has a large collection of modules that can be used for various tasks and purposes.\n\n---\n\n### Cloud Modules\n\nCloud modules can be used to interact with different cloud providers, such as AWS, Azure, Google Cloud, etc.\n\nThe cloud modules within Ansible are a set of modules that can be used to interact with different cloud providers and services.\nThey allow you to provision, configure and manage cloud resources, such as virtual machines, networks, storage, databases, etc.\n\n#### AWS Modules\n\nThese modules can be used to work with Amazon Web Services (AWS), such as EC2, S3, CloudFormation, etc.\nFor example, you can use the `ec2_instance` module to create and manage EC2 instances on AWS.\n\n#### Azure Modules\n\nWith these modules, you have full control over your Microsoft Azure resources, whether they are VMs, Storage, Network or anything else.\nFor example, you can use the `azure_rm_virtualmachine` module to create and manage Azure virtual machines.\n\n#### GCP Modules\n\nYou can work with any Google Cloud Platform service with these modules, such as Compute Engine, Storage, Network and more.\nThe `gcp_compute_instance` module is an example of how you can achieve your goals with GCP servers using Ansible.\n\n> [Official Documentation on GCP Compute Instance module](https://docs.ansible.com/ansible/latest/collections/google/cloud/gcp_compute_instance_module.html)\n\n##### Create GCP Instance\n\nCreating a compute instance with a specific name, zone, machine type, image and network:\n\n```yaml\n- name: create gcp instance\n  google.cloud.gcp_compute_instance:\n    name: test_object\n    zone: us-central1-a\n    machine_type: n1-standard-1\n    disks:\n      - auto_delete: true\n        boot: true\n        source: \"{{ disk }}\"\n    network_interfaces:\n      - network: \"{{ network }}\"\n        access_configs:\n          - name: External NAT\n            nat_ip: \"{{ address }}\"\n            type: ONE_TO_ONE_NAT\n    state: present\n```\n\nThis example creates a compute instance with a specific name, zone, machine type, image and network.\nIt uses the `state: present` parameter to indicate that the instance should exist.\nIt also specifies the `disks` and `network_interfaces` parameters to configure the disk and network settings of the instance.\nThe `disk` and `network` variables are assumed to be defined elsewhere in the playbook or inventory.\n\n##### Delete GCP Instance\n\nDeleting a compute instance with a specific name and zone:\n\n```yaml\n- name: dlete gcp instance\n  google.cloud.gcp_compute_instance:\n    name: test_object\n    zone: us-central1-a\n    state: absent\n```\n\nFor this task, it deletes a compute instance with a specific `name` and `zone`.\nIt uses the `state: absent` parameter to indicate that the instance should not exist.\nIt does not need to specify any other parameters, as the `name` and `zone` are enough to identify the instance to delete.\n\n##### Update GCP Instance\n\nUpdating a compute instance with a new machine type and labels\n\n```yaml\n- name: update gcp instance\n  google.cloud.gcp_compute_instance:\n    name: test_object\n    zone: us-central1-a\n    machine_type: n1-standard-2\n    labels:\n      env: prod\n      webserver: nginx\n    state: present\n```\n\nThe update example performs the task of updating a compute instance with a new machine type and labels.\nIt uses the `state: present` parameter to indicate that the instance should exist.\nIt also specifies the `machine_type` and `labels` parameters to change the machine type and labels of the instance.\nThe machine type determines the CPU and memory resources of the instance, and the labels are key-value pairs that can be used to organize and filter instances.\nAny other parameters that are not specified will remain unchanged.\n\n---\n\n#### OpenStack Modules\n\nOpenStack modules can be used to work with OpenStack, an open source cloud platform that provides infrastructure as a service (IaaS).\nThe `os_server` module is an example of how you can have full control over your OpenStack servers.\n\n---\n\n<N ns=\"ads\" template=\"mdx2\" id=\"ezoic\" />\n\n---\n\n### Network Modules\n\nYou can configure and manage any network device with these modules, such as routers, switches, firewalls and beyond.\n\n### System Modules\n\nWith these modules, you have full control over your system resources, whether they are users, groups, files, directories, services, packages or anything else.\n\n### Database Modules\n\nEmploying these modules, you have full control over your database servers and objects, from MySQL and PostgreSQL to MongoDB and more.\n\n### Windows Modules\n\nWindows modules can be used to manage Windows systems and applications, such as Active Directory, IIS, PowerShell, etc.\nFor example, you can use the `win_service` module to manage Windows services.\n\n---\n\n## AWX\n\n> tldr; AWX is a web-base RESTFul API and task engine that operates on top of Ansible, thus enabling you to automate certain aspects of the IT/DevOps.\n\nAWX is an open source project that gives you a sleek and modern web-based user interface, a powerful and flexible REST API, and a robust and scalable task engine to work with Ansible.\nIt is the upstream project of Red Hat Ansible Automation Platform, which is a premium solution that offers additional features and support for enterprise customers.\nWith AWX, you can easily manage your Ansible playbooks, inventories, credentials, and vaults in a collaborative and secure way among your team members.\nMoreover, AWX empowers you to plan and run your Ansible playbooks on your managed nodes with speed, efficiency and dependability; you can set up custom schedules, workflows, notifications, and callbacks to automate your Ansible operations and monitor their outcomes.\nIn conclusion, AWX gives you full control and visibility over your Ansible playbooks and their execution.\n\n### AWX Repo\n\n> The official [Repository](https://github.com/ansible/awx) for AWX - Ansible.\n\nThe AWX repository is a GitHub repository that contains a treasure trove of source code and other resources.\n\n---\n\n<N ns=\"ads\" template=\"mdx2\" id=\"ezoic\" />\n\n---\n\n### AWX Terraform\n\n> More information on [Terraform](https://kbve.com/application/terraform)\n\nTerraform AWX Provider from Denouche.\n\nBy using AWX and Terraform together, you can leverage the power and flexibility of Ansible to manage your AWS resources with ease and efficiency.\nThe Two tools that can be used together to automate IT infrastructure.\n\n- Official [Registry](https://registry.terraform.io/providers/denouche/awx/latest/docs) Link:\n\nExample Usage - With Username/Password:\n\n```ini\nprovider \"awx\" {\n    hostname = \"http://localhost:8078\"\n    username = \"kbvetest\"\n    password = \"changemepassword\"\n}\n```\n\nExample Usage - With Token:\n\n```ini\nprovider \"awx\" {\n  hostname = \"http://localhost:8078\"\n  token    = \"awxtoken\"\n}\n```\n\n> Remember that if you set both (username/password) and (token), then the (token) will have precedence.\n\n\n---\n\n## Cheatsheet\n\n> tldr; Commands that will make it easier operate ansible scripts / playbooks. This cheatsheet is still a work-in-progress.\n\nAn Ansible cheatsheet is a quick and handy reference guide that provides examples and tips on how to use Ansible command line tools and playbooks, thus enabling you to unleash the power of Ansible!\nWith an Ansible cheatsheet at your fingertips, you can breeze through a variety of tasks that would otherwise be tedious and time-consuming.\nWhether you need to test the connectivity to your nodes, switch to a different user, use a custom SSH key, use password-based authentication, run ad-hoc commands, create and run playbooks, use modules and roles, or anything else, an Ansible cheatsheet will make your life easier and more fun.\n\n## Videos\n\nWe will be adding more videos.\n\n<N ns=\"c\" template=\"yt\" data=\"https://www.youtube.com/watch?v=EcnqJbxBcM0\" />\n\n<N ns=\"ads\" template=\"mdx2\" id=\"ezoic\" />\n\n## Notes\n\nWe should start to include all the playbooks that we have written! \n\n### Log\n\n- [ ] Add some videos for Ansible.\n- [ ] Include Ansible + n8n integration content.\n\n#### Journal\n\n##### 2023-04-16\nAdded tabs to the Ansible MDX.\n\n###### 2023-04-10\nGoing to update the basics of the documentation. I will go back and add moreinformation next week.\n\n### License\n\n\n</MDXJS>\n</Widget>\n</MDXLayer>","collection":"application","data":{"title":"Ansible","description":"DevOps software that handles the infrastructure of the backend through automation. Ansible's main function(s) operate through a \"playbook\" system that exectues a collection of commands for the system admin, which becomes a pillar within the IaaC environment.","tags":["technology","automation","host"],"author":"KBVE Team","img":"https://images.unsplash.com/photo-1549605659-32d82da3a059?fit=crop&w=1400&h=700&q=75"}}}
{"entry":{"id":"traefik/traefik.mdx","slug":"traefik","body":"\nimport Github from \"@w/Github.astro\";\nexport const components = { github: Github };\nimport MDXLayer from \"@l/MDXLayer.astro\";\nimport Widget from \"@w/Widget.astro\";\nimport MDXJS from \"@w/MDXJS.astro\";\n\n<MDXLayer title={frontmatter.title} description={frontmatter.description}>\n<Widget img={frontmatter.img} skeleton={false}>\n<MDXJS>\n\n\n## Traefik\n\n* * *\n\n- Traefik is a cloud-hybrid reverse proxy and load balancer that makes deploying, configuring and integrating infrastructure components easy and automatic.\n\n* * *\n\n## Install\n\n- Docker Compose\n  - There should be an acme.json file that you create and pass through the docker with the permission of chmod 600.\n  - Furthermore, there are two more files that you will have to configure and pass through before launching the traefik container. We provided them in the #config section below.\n  - <Github src=\"data/traefik/docker-compose.yml\" description=\"This is a docker compose for traefik.\" />\n  \n* * *\n\n## Config\n\n- Traefik.yml Example\n  - <Github src=\"data/traefik/traefik.yml\" description=\"This the primary config for our traefik.yml\" />\n- Config.yml Router Example\n  - <Github src=\"data/traefik/config.yml\" description=\"This the router config for our reverse proxy. Written by Techo Tim originaly and modified by our team.\" />\n\n* * *\n\n## Kubernetes\n\n- Patching Traefik on k3s cluster\n  - We want to find the instance of where traefik is running. Running `sudo kubectl get all -o wide --all-namespaces` should display all your containers, look for traefik.\n  - Patch\n\n    - ```shell\n      sudo kubectl patch svc traefik -n kube-system -p '{\"spec\":{\"externalTrafficPolicy\":\"Cluster\"}}'`\n      ```\n\n  - std output should be `service/traefik patched`\n\n- Helm Charts\n\n  - ```shell\n    helm repo add traefik https://helm.traefik.io/traefik\n    ```\n\n    - **Sucess**: std output should be\n\n      - ```shell\n        \"traefik\" has been added to your repositories\n        ```\n\n  - ```shell\n    helm repo update\n    ```\n\n- Traefik Middleware for Kubernetes\n  - Middleware kind should be isolated for performance and security reasons.\n    - Auth - Kind: Middleware\n      - Example:\n\n        - ```yaml\n          apiVersion: traefik.containo.us/v1alpha1\n          kind: Middleware\n          metadata:\n            name: longhorn-auth\n            namespace: longhorn-system\n          spec:\n            basicAuth:\n              secret: authsecret\n          ```\n\n          - The middleware should be saved as a yaml / yml file and applied using kubectl.\n    - Auth - Kind: Ingress\n      - Calling the `longhorn-auth` in the `Ingress` via `annotations`:\n        - Example:\n\n          - ```yaml\n                      \n              apiVersion: networking.k8s.io/v1\n              kind: Ingress\n              metadata:\n                name: longhorn-ing-traefik\n                namespace: longhorn-system\n                annotations:\n                  externalTrafficPolicy: Local \n                  kubernetes.io/ingress.class: traefik\n                  traefik.ingress.kubernetes.io/router.middlewares: longhorn-system-longhorn-auth@kubernetescrd\n                  ingress.kubernetes.io/whitelist-x-forwarded-for: \"true\"\n                  \n              spec:\n                rules:\n                - host: \"x.kbve.com\"\n                  http:\n                    paths:\n                    - path: /\n                      pathType: Prefix\n                      backend:\n                        service:\n                          name: longhorn-service-provider\n                          port:\n                            number: 8000\n\n\n            ```\n\n          - In our PoC above, we see that the middleware is referenced as:\n\n            ```yaml\n                traefik.ingress.kubernetes.io/router.middlewares: longhorn-system-longhorn-auth@kubernetescrd\n            ```\n\n            Its important to note the namespace of the middleware, `longhorn-system` , before calling the middleware's name. This is to let the crd know where the middleware is located.\n\n* * *\n\n## Notes\n\n[According to the notes on Traefik & Kubernetes](https://doc.traefik.io/traefik/providers/kubernetes-crd/)\nwe first need to install the Resource Definitions and RBAC into `kubectl` by running the following commands:\n\n```shell\n# Install Traefik Resource Definitions:\nkubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.8/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml\n\n# Install RBAC for Traefik:\nkubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.8/docs/content/reference/dynamic-configuration/kubernetes-crd-rbac.yml\n\n```\n\nAfter this installation, we'll have a set of [Custom Resource Definitions](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/)\nwhich should have the following benefits:\n\n- The usage of `name` and `namespace` to refer to another Kubernetes resource.\n- The usage of [secret](https://kubernetes.io/docs/concepts/configuration/secret/) for sensitive data (TLS certificates and credentials).\n- The structure of the configuration.\n- The requirement to declare all the [definitions](https://doc.traefik.io/traefik/reference/dynamic-configuration/kubernetes-crd/#definitions).\n\nSee the list of CRDs in the dedicated [routing section](https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/).\n\nThe biggest thing we need from this is the ability to add the [BasicAuth](https://doc.traefik.io/traefik/middlewares/http/basicauth/) plugin.\nThis plugin (which is what we tried to reference before with the `auth@file` line) uses an htpasswd password to block incoming traffic to the pod.\n\nThis will require setting up an IngressRoute (which is a specific Kubernetes resource added by the Traefik Resource Definitions) with settings to specify\nwhat the middlewares are. [Find more info on the Traefik Middlewares Here](https://doc.traefik.io/traefik/middlewares/overview/)\n\n* * *\n\n\n## Cloudflare\n\nThese are notes on integrating `Cloudflare` with `Traefik`, including automating some of the actions so that you may not have to repeat them.\n\n### Acme Docs\n\n[Official Docs](https://go-acme.github.io/lego/dns/cloudflare/#api-tokens)\n\nAccess the API Tokens directly from [Cloudflare Profile](https://dash.cloudflare.com/profile/api-tokens)\n\nCommon environmental variable names and their purpose:\n\n- `CF_API_EMAIL` - The Cloudflare account holder's email.\n- `CF_API_KEY` - The Cloudflare API key.\n- `CF_DNS_API_TOKEN` - The API token with `DNS:Edit` permission.\n- `CF_ZONE_API_TOKEN` - The API token with `Zone:Read` permission.\n\n\n</MDXJS>\n</Widget>\n</MDXLayer>","collection":"application","data":{"title":"Traefik","description":"A cloud native application proxy that utilizes a modern HTTP reverse-proxy and load balancer.","tags":["vm","host","technology"],"author":"KBVE Team","img":"https://images.unsplash.com/photo-1524419986249-348e8fa6ad4a?fit=crop&w=1400&h=700&q=75"}}}
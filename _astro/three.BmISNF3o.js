/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const bp="170",ci={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},cs={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},wS=0,km=1,RS=2,Zx=1,CS=2,Jn=3,nr=0,Fi=1,ss=2,ds=0,$o=1,Vm=2,Hm=3,Wm=4,NS=5,wr=100,PS=101,DS=102,LS=103,FS=104,US=200,IS=201,BS=202,OS=203,Yd=204,jd=205,zS=206,GS=207,kS=208,VS=209,HS=210,WS=211,$S=212,XS=213,qS=214,Kd=0,Zd=1,Qd=2,ia=3,Jd=4,tf=5,ef=6,nf=7,Ep=0,YS=1,jS=2,Zs=0,KS=1,ZS=2,QS=3,JS=4,tM=5,eM=6,iM=7,Qx=300,na=301,sa=302,sf=303,rf=304,Uh=306,of=1e3,Lr=1001,af=1002,Sn=1003,nM=1004,Bl=1005,Nn=1006,ou=1007,Fr=1008,Ss=1009,Jx=1010,t0=1011,cl=1012,Ap=1013,Br=1014,hs=1015,ma=1016,wp=1017,Rp=1018,ra=1020,e0=35902,i0=1021,n0=1022,yn=1023,s0=1024,r0=1025,Xo=1026,oa=1027,o0=1028,Cp=1029,a0=1030,Np=1031,Pp=1033,jc=33776,Kc=33777,Zc=33778,Qc=33779,lf=35840,cf=35841,hf=35842,uf=35843,df=36196,ff=37492,pf=37496,mf=37808,gf=37809,_f=37810,xf=37811,yf=37812,vf=37813,Sf=37814,Mf=37815,Tf=37816,bf=37817,Ef=37818,Af=37819,wf=37820,Rf=37821,Jc=36492,Cf=36494,Nf=36495,l0=36283,Pf=36284,Df=36285,Lf=36286,sM=3200,rM=3201,c0=0,oM=1,qs="",Ji="srgb",ga="srgb-linear",Ih="linear",Me="srgb",Zr=7680,$m=519,aM=512,lM=513,cM=514,h0=515,hM=516,uM=517,dM=518,fM=519,Ff=35044,Xm="300 es",us=2e3,dh=2001;let Wr=class{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const i=this._listeners;i[t]===void 0&&(i[t]=[]),i[t].indexOf(e)===-1&&i[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const i=this._listeners;return i[t]!==void 0&&i[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const n=this._listeners[t];if(n!==void 0){const s=n.indexOf(e);s!==-1&&n.splice(s,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const i=this._listeners[t.type];if(i!==void 0){t.target=this;const n=i.slice(0);for(let s=0,o=n.length;s<o;s++)n[s].call(this,t);t.target=null}}};const pi=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let qm=1234567;const Qa=Math.PI/180,hl=180/Math.PI;function fs(){const r=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,i=Math.random()*4294967295|0;return(pi[r&255]+pi[r>>8&255]+pi[r>>16&255]+pi[r>>24&255]+"-"+pi[t&255]+pi[t>>8&255]+"-"+pi[t>>16&15|64]+pi[t>>24&255]+"-"+pi[e&63|128]+pi[e>>8&255]+"-"+pi[e>>16&255]+pi[e>>24&255]+pi[i&255]+pi[i>>8&255]+pi[i>>16&255]+pi[i>>24&255]).toLowerCase()}function ni(r,t,e){return Math.max(t,Math.min(e,r))}function Dp(r,t){return(r%t+t)%t}function pM(r,t,e,i,n){return i+(r-t)*(n-i)/(e-t)}function mM(r,t,e){return r!==t?(e-r)/(t-r):0}function Ja(r,t,e){return(1-e)*r+e*t}function gM(r,t,e,i){return Ja(r,t,1-Math.exp(-e*i))}function _M(r,t=1){return t-Math.abs(Dp(r,t*2)-t)}function xM(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*(3-2*r))}function yM(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*r*(r*(r*6-15)+10))}function vM(r,t){return r+Math.floor(Math.random()*(t-r+1))}function SM(r,t){return r+Math.random()*(t-r)}function MM(r){return r*(.5-Math.random())}function TM(r){r!==void 0&&(qm=r);let t=qm+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function bM(r){return r*Qa}function EM(r){return r*hl}function AM(r){return(r&r-1)===0&&r!==0}function wM(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function RM(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function CM(r,t,e,i,n){const s=Math.cos,o=Math.sin,a=s(e/2),l=o(e/2),c=s((t+i)/2),h=o((t+i)/2),u=s((t-i)/2),d=o((t-i)/2),f=s((i-t)/2),p=o((i-t)/2);switch(n){case"XYX":r.set(a*h,l*u,l*d,a*c);break;case"YZY":r.set(l*d,a*h,l*u,a*c);break;case"ZXZ":r.set(l*u,l*d,a*h,a*c);break;case"XZX":r.set(a*h,l*p,l*f,a*c);break;case"YXY":r.set(l*f,a*h,l*p,a*c);break;case"ZYZ":r.set(l*p,l*f,a*h,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+n)}}function _n(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function Se(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const Uf={DEG2RAD:Qa,RAD2DEG:hl,generateUUID:fs,clamp:ni,euclideanModulo:Dp,mapLinear:pM,inverseLerp:mM,lerp:Ja,damp:gM,pingpong:_M,smoothstep:xM,smootherstep:yM,randInt:vM,randFloat:SM,randFloatSpread:MM,seededRandom:TM,degToRad:bM,radToDeg:EM,isPowerOfTwo:AM,ceilPowerOfTwo:wM,floorPowerOfTwo:RM,setQuaternionFromProperEuler:CM,normalize:Se,denormalize:_n};let ft=class u0{constructor(t=0,e=0){u0.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,i=this.y,n=t.elements;return this.x=n[0]*e+n[3]*i+n[6],this.y=n[1]*e+n[4]*i+n[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(ni(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y;return e*e+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const i=Math.cos(e),n=Math.sin(e),s=this.x-t.x,o=this.y-t.y;return this.x=s*i-o*n+t.x,this.y=s*n+o*i+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}},Qt=class d0{constructor(t,e,i,n,s,o,a,l,c){d0.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,i,n,s,o,a,l,c)}set(t,e,i,n,s,o,a,l,c){const h=this.elements;return h[0]=t,h[1]=n,h[2]=a,h[3]=e,h[4]=s,h[5]=l,h[6]=i,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this}extractBasis(t,e,i){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,n=e.elements,s=this.elements,o=i[0],a=i[3],l=i[6],c=i[1],h=i[4],u=i[7],d=i[2],f=i[5],p=i[8],_=n[0],g=n[3],m=n[6],y=n[1],v=n[4],x=n[7],C=n[2],A=n[5],E=n[8];return s[0]=o*_+a*y+l*C,s[3]=o*g+a*v+l*A,s[6]=o*m+a*x+l*E,s[1]=c*_+h*y+u*C,s[4]=c*g+h*v+u*A,s[7]=c*m+h*x+u*E,s[2]=d*_+f*y+p*C,s[5]=d*g+f*v+p*A,s[8]=d*m+f*x+p*E,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[1],n=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8];return e*o*h-e*a*c-i*s*h+i*a*l+n*s*c-n*o*l}invert(){const t=this.elements,e=t[0],i=t[1],n=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=h*o-a*c,d=a*l-h*s,f=c*s-o*l,p=e*u+i*d+n*f;if(p===0)return this.set(0,0,0,0,0,0,0,0,0);const _=1/p;return t[0]=u*_,t[1]=(n*c-h*i)*_,t[2]=(a*i-n*o)*_,t[3]=d*_,t[4]=(h*e-n*l)*_,t[5]=(n*s-a*e)*_,t[6]=f*_,t[7]=(i*l-c*e)*_,t[8]=(o*e-i*s)*_,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,i,n,s,o,a){const l=Math.cos(s),c=Math.sin(s);return this.set(i*l,i*c,-i*(l*o+c*a)+o+t,-n*c,n*l,-n*(-c*o+l*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(au.makeScale(t,e)),this}rotate(t){return this.premultiply(au.makeRotation(-t)),this}translate(t,e){return this.premultiply(au.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,i,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,i=t.elements;for(let n=0;n<9;n++)if(e[n]!==i[n])return!1;return!0}fromArray(t,e=0){for(let i=0;i<9;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}clone(){return new this.constructor().fromArray(this.elements)}};const au=new Qt;function f0(r){for(let t=r.length-1;t>=0;--t)if(r[t]>=65535)return!0;return!1}function ul(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function NM(){const r=ul("canvas");return r.style.display="block",r}const Ym={};function qa(r){r in Ym||(Ym[r]=!0,console.warn(r))}function PM(r,t,e){return new Promise(function(i,n){function s(){switch(r.clientWaitSync(t,r.SYNC_FLUSH_COMMANDS_BIT,0)){case r.WAIT_FAILED:n();break;case r.TIMEOUT_EXPIRED:setTimeout(s,e);break;default:i()}}setTimeout(s,e)})}function DM(r){const t=r.elements;t[2]=.5*t[2]+.5*t[3],t[6]=.5*t[6]+.5*t[7],t[10]=.5*t[10]+.5*t[11],t[14]=.5*t[14]+.5*t[15]}function LM(r){const t=r.elements;t[11]===-1?(t[10]=-t[10]-1,t[14]=-t[14]):(t[10]=-t[10],t[14]=-t[14]+1)}const ce={enabled:!0,workingColorSpace:ga,spaces:{},convert:function(r,t,e){return this.enabled===!1||t===e||!t||!e||(this.spaces[t].transfer===Me&&(r.r=ps(r.r),r.g=ps(r.g),r.b=ps(r.b)),this.spaces[t].primaries!==this.spaces[e].primaries&&(r.applyMatrix3(this.spaces[t].toXYZ),r.applyMatrix3(this.spaces[e].fromXYZ)),this.spaces[e].transfer===Me&&(r.r=qo(r.r),r.g=qo(r.g),r.b=qo(r.b))),r},fromWorkingColorSpace:function(r,t){return this.convert(r,this.workingColorSpace,t)},toWorkingColorSpace:function(r,t){return this.convert(r,t,this.workingColorSpace)},getPrimaries:function(r){return this.spaces[r].primaries},getTransfer:function(r){return r===qs?Ih:this.spaces[r].transfer},getLuminanceCoefficients:function(r,t=this.workingColorSpace){return r.fromArray(this.spaces[t].luminanceCoefficients)},define:function(r){Object.assign(this.spaces,r)},_getMatrix:function(r,t,e){return r.copy(this.spaces[t].toXYZ).multiply(this.spaces[e].fromXYZ)},_getDrawingBufferColorSpace:function(r){return this.spaces[r].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(r=this.workingColorSpace){return this.spaces[r].workingColorSpaceConfig.unpackColorSpace}};function ps(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function qo(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}const jm=[.64,.33,.3,.6,.15,.06],Km=[.2126,.7152,.0722],Zm=[.3127,.329],Qm=new Qt().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),Jm=new Qt().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);ce.define({[ga]:{primaries:jm,whitePoint:Zm,transfer:Ih,toXYZ:Qm,fromXYZ:Jm,luminanceCoefficients:Km,workingColorSpaceConfig:{unpackColorSpace:Ji},outputColorSpaceConfig:{drawingBufferColorSpace:Ji}},[Ji]:{primaries:jm,whitePoint:Zm,transfer:Me,toXYZ:Qm,fromXYZ:Jm,luminanceCoefficients:Km,outputColorSpaceConfig:{drawingBufferColorSpace:Ji}}});let Qr,FM=class{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{Qr===void 0&&(Qr=ul("canvas")),Qr.width=t.width,Qr.height=t.height;const i=Qr.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),e=Qr}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=ul("canvas");e.width=t.width,e.height=t.height;const i=e.getContext("2d");i.drawImage(t,0,0,t.width,t.height);const n=i.getImageData(0,0,t.width,t.height),s=n.data;for(let o=0;o<s.length;o++)s[o]=ps(s[o]/255)*255;return i.putImageData(n,0,0),e}else if(t.data){const e=t.data.slice(0);for(let i=0;i<e.length;i++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[i]=Math.floor(ps(e[i]/255)*255):e[i]=ps(e[i]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}},UM=0,p0=class{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:UM++}),this.uuid=fs(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const i={uuid:this.uuid,url:""},n=this.data;if(n!==null){let s;if(Array.isArray(n)){s=[];for(let o=0,a=n.length;o<a;o++)n[o].isDataTexture?s.push(lu(n[o].image)):s.push(lu(n[o]))}else s=lu(n);i.url=s}return e||(t.images[this.uuid]=i),i}};function lu(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?FM.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let IM=0,sn=class th extends Wr{constructor(t=th.DEFAULT_IMAGE,e=th.DEFAULT_MAPPING,i=Lr,n=Lr,s=Nn,o=Fr,a=yn,l=Ss,c=th.DEFAULT_ANISOTROPY,h=qs){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:IM++}),this.uuid=fs(),this.name="",this.source=new p0(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=i,this.wrapT=n,this.magFilter=s,this.minFilter=o,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=l,this.offset=new ft(0,0),this.repeat=new ft(1,1),this.center=new ft(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Qt,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const i={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(i.userData=this.userData),e||(t.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==Qx)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case of:t.x=t.x-Math.floor(t.x);break;case Lr:t.x=t.x<0?0:1;break;case af:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case of:t.y=t.y-Math.floor(t.y);break;case Lr:t.y=t.y<0?0:1;break;case af:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}};sn.DEFAULT_IMAGE=null;sn.DEFAULT_MAPPING=Qx;sn.DEFAULT_ANISOTROPY=1;let qe=class m0{constructor(t=0,e=0,i=0,n=1){m0.prototype.isVector4=!0,this.x=t,this.y=e,this.z=i,this.w=n}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,i,n){return this.x=t,this.y=e,this.z=i,this.w=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,i=this.y,n=this.z,s=this.w,o=t.elements;return this.x=o[0]*e+o[4]*i+o[8]*n+o[12]*s,this.y=o[1]*e+o[5]*i+o[9]*n+o[13]*s,this.z=o[2]*e+o[6]*i+o[10]*n+o[14]*s,this.w=o[3]*e+o[7]*i+o[11]*n+o[15]*s,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,i,n,s;const l=t.elements,c=l[0],h=l[4],u=l[8],d=l[1],f=l[5],p=l[9],_=l[2],g=l[6],m=l[10];if(Math.abs(h-d)<.01&&Math.abs(u-_)<.01&&Math.abs(p-g)<.01){if(Math.abs(h+d)<.1&&Math.abs(u+_)<.1&&Math.abs(p+g)<.1&&Math.abs(c+f+m-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const v=(c+1)/2,x=(f+1)/2,C=(m+1)/2,A=(h+d)/4,E=(u+_)/4,w=(p+g)/4;return v>x&&v>C?v<.01?(i=0,n=.707106781,s=.707106781):(i=Math.sqrt(v),n=A/i,s=E/i):x>C?x<.01?(i=.707106781,n=0,s=.707106781):(n=Math.sqrt(x),i=A/n,s=w/n):C<.01?(i=.707106781,n=.707106781,s=0):(s=Math.sqrt(C),i=E/s,n=w/s),this.set(i,n,s,e),this}let y=Math.sqrt((g-p)*(g-p)+(u-_)*(u-_)+(d-h)*(d-h));return Math.abs(y)<.001&&(y=1),this.x=(g-p)/y,this.y=(u-_)/y,this.z=(d-h)/y,this.w=Math.acos((c+f+m-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this.w=t.w+(e.w-t.w)*i,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}},BM=class extends Wr{constructor(t=1,e=1,i={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new qe(0,0,t,e),this.scissorTest=!1,this.viewport=new qe(0,0,t,e);const n={width:t,height:e,depth:1};i=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:Nn,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},i);const s=new sn(n,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.colorSpace);s.flipY=!1,s.generateMipmaps=i.generateMipmaps,s.internalFormat=i.internalFormat,this.textures=[];const o=i.count;for(let a=0;a<o;a++)this.textures[a]=s.clone(),this.textures[a].isRenderTargetTexture=!0;this.depthBuffer=i.depthBuffer,this.stencilBuffer=i.stencilBuffer,this.resolveDepthBuffer=i.resolveDepthBuffer,this.resolveStencilBuffer=i.resolveStencilBuffer,this.depthTexture=i.depthTexture,this.samples=i.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,i=1){if(this.width!==t||this.height!==e||this.depth!==i){this.width=t,this.height=e,this.depth=i;for(let n=0,s=this.textures.length;n<s;n++)this.textures[n].image.width=t,this.textures[n].image.height=e,this.textures[n].image.depth=i;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let i=0,n=t.textures.length;i<n;i++)this.textures[i]=t.textures[i].clone(),this.textures[i].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new p0(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}},sr=class extends BM{constructor(t=1,e=1,i={}){super(t,e,i),this.isWebGLRenderTarget=!0}},g0=class extends sn{constructor(t=null,e=1,i=1,n=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:i,depth:n},this.magFilter=Sn,this.minFilter=Sn,this.wrapR=Lr,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}};class OM extends sn{constructor(t=null,e=1,i=1,n=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:i,depth:n},this.magFilter=Sn,this.minFilter=Sn,this.wrapR=Lr,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}let Fn=class{constructor(t=0,e=0,i=0,n=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=i,this._w=n}static slerpFlat(t,e,i,n,s,o,a){let l=i[n+0],c=i[n+1],h=i[n+2],u=i[n+3];const d=s[o+0],f=s[o+1],p=s[o+2],_=s[o+3];if(a===0){t[e+0]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u;return}if(a===1){t[e+0]=d,t[e+1]=f,t[e+2]=p,t[e+3]=_;return}if(u!==_||l!==d||c!==f||h!==p){let g=1-a;const m=l*d+c*f+h*p+u*_,y=m>=0?1:-1,v=1-m*m;if(v>Number.EPSILON){const C=Math.sqrt(v),A=Math.atan2(C,m*y);g=Math.sin(g*A)/C,a=Math.sin(a*A)/C}const x=a*y;if(l=l*g+d*x,c=c*g+f*x,h=h*g+p*x,u=u*g+_*x,g===1-a){const C=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=C,c*=C,h*=C,u*=C}}t[e]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u}static multiplyQuaternionsFlat(t,e,i,n,s,o){const a=i[n],l=i[n+1],c=i[n+2],h=i[n+3],u=s[o],d=s[o+1],f=s[o+2],p=s[o+3];return t[e]=a*p+h*u+l*f-c*d,t[e+1]=l*p+h*d+c*u-a*f,t[e+2]=c*p+h*f+a*d-l*u,t[e+3]=h*p-a*u-l*d-c*f,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const i=t._x,n=t._y,s=t._z,o=t._order,a=Math.cos,l=Math.sin,c=a(i/2),h=a(n/2),u=a(s/2),d=l(i/2),f=l(n/2),p=l(s/2);switch(o){case"XYZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"YXZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"ZXY":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"ZYX":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"YZX":this._x=d*h*u+c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u-d*f*p;break;case"XZY":this._x=d*h*u-c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u+d*f*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const i=e/2,n=Math.sin(i);return this._x=t.x*n,this._y=t.y*n,this._z=t.z*n,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,i=e[0],n=e[4],s=e[8],o=e[1],a=e[5],l=e[9],c=e[2],h=e[6],u=e[10],d=i+a+u;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(h-l)*f,this._y=(s-c)*f,this._z=(o-n)*f}else if(i>a&&i>u){const f=2*Math.sqrt(1+i-a-u);this._w=(h-l)/f,this._x=.25*f,this._y=(n+o)/f,this._z=(s+c)/f}else if(a>u){const f=2*Math.sqrt(1+a-i-u);this._w=(s-c)/f,this._x=(n+o)/f,this._y=.25*f,this._z=(l+h)/f}else{const f=2*Math.sqrt(1+u-i-a);this._w=(o-n)/f,this._x=(s+c)/f,this._y=(l+h)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let i=t.dot(e)+1;return i<Number.EPSILON?(i=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=i):(this._x=0,this._y=-t.z,this._z=t.y,this._w=i)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=i),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(ni(this.dot(t),-1,1)))}rotateTowards(t,e){const i=this.angleTo(t);if(i===0)return this;const n=Math.min(1,e/i);return this.slerp(t,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const i=t._x,n=t._y,s=t._z,o=t._w,a=e._x,l=e._y,c=e._z,h=e._w;return this._x=i*h+o*a+n*c-s*l,this._y=n*h+o*l+s*a-i*c,this._z=s*h+o*c+i*l-n*a,this._w=o*h-i*a-n*l-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const i=this._x,n=this._y,s=this._z,o=this._w;let a=o*t._w+i*t._x+n*t._y+s*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=i,this._y=n,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const f=1-e;return this._w=f*o+e*this._w,this._x=f*i+e*this._x,this._y=f*n+e*this._y,this._z=f*s+e*this._z,this.normalize(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-e)*h)/c,d=Math.sin(e*h)/c;return this._w=o*u+this._w*d,this._x=i*u+this._x*d,this._y=n*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(t,e,i){return this.copy(t).slerp(e,i)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),i=Math.random(),n=Math.sqrt(1-i),s=Math.sqrt(i);return this.set(n*Math.sin(t),n*Math.cos(t),s*Math.sin(e),s*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},P=class _0{constructor(t=0,e=0,i=0){_0.prototype.isVector3=!0,this.x=t,this.y=e,this.z=i}set(t,e,i){return i===void 0&&(i=this.z),this.x=t,this.y=e,this.z=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(tg.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(tg.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,i=this.y,n=this.z,s=t.elements;return this.x=s[0]*e+s[3]*i+s[6]*n,this.y=s[1]*e+s[4]*i+s[7]*n,this.z=s[2]*e+s[5]*i+s[8]*n,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,i=this.y,n=this.z,s=t.elements,o=1/(s[3]*e+s[7]*i+s[11]*n+s[15]);return this.x=(s[0]*e+s[4]*i+s[8]*n+s[12])*o,this.y=(s[1]*e+s[5]*i+s[9]*n+s[13])*o,this.z=(s[2]*e+s[6]*i+s[10]*n+s[14])*o,this}applyQuaternion(t){const e=this.x,i=this.y,n=this.z,s=t.x,o=t.y,a=t.z,l=t.w,c=2*(o*n-a*i),h=2*(a*e-s*n),u=2*(s*i-o*e);return this.x=e+l*c+o*u-a*h,this.y=i+l*h+a*c-s*u,this.z=n+l*u+s*h-o*c,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,i=this.y,n=this.z,s=t.elements;return this.x=s[0]*e+s[4]*i+s[8]*n,this.y=s[1]*e+s[5]*i+s[9]*n,this.z=s[2]*e+s[6]*i+s[10]*n,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const i=t.x,n=t.y,s=t.z,o=e.x,a=e.y,l=e.z;return this.x=n*l-s*a,this.y=s*o-i*l,this.z=i*a-n*o,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const i=t.dot(this)/e;return this.copy(t).multiplyScalar(i)}projectOnPlane(t){return cu.copy(this).projectOnVector(t),this.sub(cu)}reflect(t){return this.sub(cu.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(ni(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y,n=this.z-t.z;return e*e+i*i+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,i){const n=Math.sin(e)*t;return this.x=n*Math.sin(i),this.y=Math.cos(e)*t,this.z=n*Math.cos(i),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),n=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=n,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,i=Math.sqrt(1-e*e);return this.x=i*Math.cos(t),this.y=e,this.z=i*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}};const cu=new P,tg=new Fn;let bl=class{constructor(t=new P(1/0,1/0,1/0),e=new P(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e+=3)this.expandByPoint(an.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,i=t.count;e<i;e++)this.expandByPoint(an.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=an.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const i=t.geometry;if(i!==void 0){const s=i.getAttribute("position");if(e===!0&&s!==void 0&&t.isInstancedMesh!==!0)for(let o=0,a=s.count;o<a;o++)t.isMesh===!0?t.getVertexPosition(o,an):an.fromBufferAttribute(s,o),an.applyMatrix4(t.matrixWorld),this.expandByPoint(an);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),Ol.copy(t.boundingBox)):(i.boundingBox===null&&i.computeBoundingBox(),Ol.copy(i.boundingBox)),Ol.applyMatrix4(t.matrixWorld),this.union(Ol)}const n=t.children;for(let s=0,o=n.length;s<o;s++)this.expandByObject(n[s],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,an),an.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Aa),zl.subVectors(this.max,Aa),Jr.subVectors(t.a,Aa),to.subVectors(t.b,Aa),eo.subVectors(t.c,Aa),Ns.subVectors(to,Jr),Ps.subVectors(eo,to),dr.subVectors(Jr,eo);let e=[0,-Ns.z,Ns.y,0,-Ps.z,Ps.y,0,-dr.z,dr.y,Ns.z,0,-Ns.x,Ps.z,0,-Ps.x,dr.z,0,-dr.x,-Ns.y,Ns.x,0,-Ps.y,Ps.x,0,-dr.y,dr.x,0];return!hu(e,Jr,to,eo,zl)||(e=[1,0,0,0,1,0,0,0,1],!hu(e,Jr,to,eo,zl))?!1:(Gl.crossVectors(Ns,Ps),e=[Gl.x,Gl.y,Gl.z],hu(e,Jr,to,eo,zl))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,an).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(an).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(Vn[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Vn[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Vn[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Vn[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Vn[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Vn[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Vn[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Vn[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Vn),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}};const Vn=[new P,new P,new P,new P,new P,new P,new P,new P],an=new P,Ol=new bl,Jr=new P,to=new P,eo=new P,Ns=new P,Ps=new P,dr=new P,Aa=new P,zl=new P,Gl=new P,fr=new P;function hu(r,t,e,i,n){for(let s=0,o=r.length-3;s<=o;s+=3){fr.fromArray(r,s);const a=n.x*Math.abs(fr.x)+n.y*Math.abs(fr.y)+n.z*Math.abs(fr.z),l=t.dot(fr),c=e.dot(fr),h=i.dot(fr);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>a)return!1}return!0}const zM=new bl,wa=new P,uu=new P;let Bh=class{constructor(t=new P,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const i=this.center;e!==void 0?i.copy(e):zM.setFromPoints(t).getCenter(i);let n=0;for(let s=0,o=t.length;s<o;s++)n=Math.max(n,i.distanceToSquared(t[s]));return this.radius=Math.sqrt(n),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const i=this.center.distanceToSquared(t);return e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;wa.subVectors(t,this.center);const e=wa.lengthSq();if(e>this.radius*this.radius){const i=Math.sqrt(e),n=(i-this.radius)*.5;this.center.addScaledVector(wa,n/i),this.radius+=n}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(uu.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(wa.copy(t.center).add(uu)),this.expandByPoint(wa.copy(t.center).sub(uu))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}};const Hn=new P,du=new P,kl=new P,Ds=new P,fu=new P,Vl=new P,pu=new P;let Oh=class{constructor(t=new P,e=new P(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Hn)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,i)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Hn.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Hn.copy(this.origin).addScaledVector(this.direction,e),Hn.distanceToSquared(t))}distanceSqToSegment(t,e,i,n){du.copy(t).add(e).multiplyScalar(.5),kl.copy(e).sub(t).normalize(),Ds.copy(this.origin).sub(du);const s=t.distanceTo(e)*.5,o=-this.direction.dot(kl),a=Ds.dot(this.direction),l=-Ds.dot(kl),c=Ds.lengthSq(),h=Math.abs(1-o*o);let u,d,f,p;if(h>0)if(u=o*l-a,d=o*a-l,p=s*h,u>=0)if(d>=-p)if(d<=p){const _=1/h;u*=_,d*=_,f=u*(u+o*d+2*a)+d*(o*u+d+2*l)+c}else d=s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d=-s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d<=-p?(u=Math.max(0,-(-o*s+a)),d=u>0?-s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c):d<=p?(u=0,d=Math.min(Math.max(-s,-l),s),f=d*(d+2*l)+c):(u=Math.max(0,-(o*s+a)),d=u>0?s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c);else d=o>0?-s:s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;return i&&i.copy(this.origin).addScaledVector(this.direction,u),n&&n.copy(du).addScaledVector(kl,d),f}intersectSphere(t,e){Hn.subVectors(t.center,this.origin);const i=Hn.dot(this.direction),n=Hn.dot(Hn)-i*i,s=t.radius*t.radius;if(n>s)return null;const o=Math.sqrt(s-n),a=i-o,l=i+o;return l<0?null:a<0?this.at(l,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null}intersectPlane(t,e){const i=this.distanceToPlane(t);return i===null?null:this.at(i,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let i,n,s,o,a,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,d=this.origin;return c>=0?(i=(t.min.x-d.x)*c,n=(t.max.x-d.x)*c):(i=(t.max.x-d.x)*c,n=(t.min.x-d.x)*c),h>=0?(s=(t.min.y-d.y)*h,o=(t.max.y-d.y)*h):(s=(t.max.y-d.y)*h,o=(t.min.y-d.y)*h),i>o||s>n||((s>i||isNaN(i))&&(i=s),(o<n||isNaN(n))&&(n=o),u>=0?(a=(t.min.z-d.z)*u,l=(t.max.z-d.z)*u):(a=(t.max.z-d.z)*u,l=(t.min.z-d.z)*u),i>l||a>n)||((a>i||i!==i)&&(i=a),(l<n||n!==n)&&(n=l),n<0)?null:this.at(i>=0?i:n,e)}intersectsBox(t){return this.intersectBox(t,Hn)!==null}intersectTriangle(t,e,i,n,s){fu.subVectors(e,t),Vl.subVectors(i,t),pu.crossVectors(fu,Vl);let o=this.direction.dot(pu),a;if(o>0){if(n)return null;a=1}else if(o<0)a=-1,o=-o;else return null;Ds.subVectors(this.origin,t);const l=a*this.direction.dot(Vl.crossVectors(Ds,Vl));if(l<0)return null;const c=a*this.direction.dot(fu.cross(Ds));if(c<0||l+c>o)return null;const h=-a*Ds.dot(pu);return h<0?null:this.at(h/o,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}},Pe=class If{constructor(t,e,i,n,s,o,a,l,c,h,u,d,f,p,_,g){If.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,i,n,s,o,a,l,c,h,u,d,f,p,_,g)}set(t,e,i,n,s,o,a,l,c,h,u,d,f,p,_,g){const m=this.elements;return m[0]=t,m[4]=e,m[8]=i,m[12]=n,m[1]=s,m[5]=o,m[9]=a,m[13]=l,m[2]=c,m[6]=h,m[10]=u,m[14]=d,m[3]=f,m[7]=p,m[11]=_,m[15]=g,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new If().fromArray(this.elements)}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this}copyPosition(t){const e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,i=t.elements,n=1/io.setFromMatrixColumn(t,0).length(),s=1/io.setFromMatrixColumn(t,1).length(),o=1/io.setFromMatrixColumn(t,2).length();return e[0]=i[0]*n,e[1]=i[1]*n,e[2]=i[2]*n,e[3]=0,e[4]=i[4]*s,e[5]=i[5]*s,e[6]=i[6]*s,e[7]=0,e[8]=i[8]*o,e[9]=i[9]*o,e[10]=i[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,i=t.x,n=t.y,s=t.z,o=Math.cos(i),a=Math.sin(i),l=Math.cos(n),c=Math.sin(n),h=Math.cos(s),u=Math.sin(s);if(t.order==="XYZ"){const d=o*h,f=o*u,p=a*h,_=a*u;e[0]=l*h,e[4]=-l*u,e[8]=c,e[1]=f+p*c,e[5]=d-_*c,e[9]=-a*l,e[2]=_-d*c,e[6]=p+f*c,e[10]=o*l}else if(t.order==="YXZ"){const d=l*h,f=l*u,p=c*h,_=c*u;e[0]=d+_*a,e[4]=p*a-f,e[8]=o*c,e[1]=o*u,e[5]=o*h,e[9]=-a,e[2]=f*a-p,e[6]=_+d*a,e[10]=o*l}else if(t.order==="ZXY"){const d=l*h,f=l*u,p=c*h,_=c*u;e[0]=d-_*a,e[4]=-o*u,e[8]=p+f*a,e[1]=f+p*a,e[5]=o*h,e[9]=_-d*a,e[2]=-o*c,e[6]=a,e[10]=o*l}else if(t.order==="ZYX"){const d=o*h,f=o*u,p=a*h,_=a*u;e[0]=l*h,e[4]=p*c-f,e[8]=d*c+_,e[1]=l*u,e[5]=_*c+d,e[9]=f*c-p,e[2]=-c,e[6]=a*l,e[10]=o*l}else if(t.order==="YZX"){const d=o*l,f=o*c,p=a*l,_=a*c;e[0]=l*h,e[4]=_-d*u,e[8]=p*u+f,e[1]=u,e[5]=o*h,e[9]=-a*h,e[2]=-c*h,e[6]=f*u+p,e[10]=d-_*u}else if(t.order==="XZY"){const d=o*l,f=o*c,p=a*l,_=a*c;e[0]=l*h,e[4]=-u,e[8]=c*h,e[1]=d*u+_,e[5]=o*h,e[9]=f*u-p,e[2]=p*u-f,e[6]=a*h,e[10]=_*u+d}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(GM,t,kM)}lookAt(t,e,i){const n=this.elements;return zi.subVectors(t,e),zi.lengthSq()===0&&(zi.z=1),zi.normalize(),Ls.crossVectors(i,zi),Ls.lengthSq()===0&&(Math.abs(i.z)===1?zi.x+=1e-4:zi.z+=1e-4,zi.normalize(),Ls.crossVectors(i,zi)),Ls.normalize(),Hl.crossVectors(zi,Ls),n[0]=Ls.x,n[4]=Hl.x,n[8]=zi.x,n[1]=Ls.y,n[5]=Hl.y,n[9]=zi.y,n[2]=Ls.z,n[6]=Hl.z,n[10]=zi.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,n=e.elements,s=this.elements,o=i[0],a=i[4],l=i[8],c=i[12],h=i[1],u=i[5],d=i[9],f=i[13],p=i[2],_=i[6],g=i[10],m=i[14],y=i[3],v=i[7],x=i[11],C=i[15],A=n[0],E=n[4],w=n[8],T=n[12],S=n[1],N=n[5],G=n[9],B=n[13],V=n[2],Q=n[6],q=n[10],rt=n[14],$=n[3],ot=n[7],dt=n[11],Tt=n[15];return s[0]=o*A+a*S+l*V+c*$,s[4]=o*E+a*N+l*Q+c*ot,s[8]=o*w+a*G+l*q+c*dt,s[12]=o*T+a*B+l*rt+c*Tt,s[1]=h*A+u*S+d*V+f*$,s[5]=h*E+u*N+d*Q+f*ot,s[9]=h*w+u*G+d*q+f*dt,s[13]=h*T+u*B+d*rt+f*Tt,s[2]=p*A+_*S+g*V+m*$,s[6]=p*E+_*N+g*Q+m*ot,s[10]=p*w+_*G+g*q+m*dt,s[14]=p*T+_*B+g*rt+m*Tt,s[3]=y*A+v*S+x*V+C*$,s[7]=y*E+v*N+x*Q+C*ot,s[11]=y*w+v*G+x*q+C*dt,s[15]=y*T+v*B+x*rt+C*Tt,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[4],n=t[8],s=t[12],o=t[1],a=t[5],l=t[9],c=t[13],h=t[2],u=t[6],d=t[10],f=t[14],p=t[3],_=t[7],g=t[11],m=t[15];return p*(+s*l*u-n*c*u-s*a*d+i*c*d+n*a*f-i*l*f)+_*(+e*l*f-e*c*d+s*o*d-n*o*f+n*c*h-s*l*h)+g*(+e*c*u-e*a*f-s*o*u+i*o*f+s*a*h-i*c*h)+m*(-n*a*h-e*l*u+e*a*d+n*o*u-i*o*d+i*l*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,i){const n=this.elements;return t.isVector3?(n[12]=t.x,n[13]=t.y,n[14]=t.z):(n[12]=t,n[13]=e,n[14]=i),this}invert(){const t=this.elements,e=t[0],i=t[1],n=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=t[9],d=t[10],f=t[11],p=t[12],_=t[13],g=t[14],m=t[15],y=u*g*c-_*d*c+_*l*f-a*g*f-u*l*m+a*d*m,v=p*d*c-h*g*c-p*l*f+o*g*f+h*l*m-o*d*m,x=h*_*c-p*u*c+p*a*f-o*_*f-h*a*m+o*u*m,C=p*u*l-h*_*l-p*a*d+o*_*d+h*a*g-o*u*g,A=e*y+i*v+n*x+s*C;if(A===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const E=1/A;return t[0]=y*E,t[1]=(_*d*s-u*g*s-_*n*f+i*g*f+u*n*m-i*d*m)*E,t[2]=(a*g*s-_*l*s+_*n*c-i*g*c-a*n*m+i*l*m)*E,t[3]=(u*l*s-a*d*s-u*n*c+i*d*c+a*n*f-i*l*f)*E,t[4]=v*E,t[5]=(h*g*s-p*d*s+p*n*f-e*g*f-h*n*m+e*d*m)*E,t[6]=(p*l*s-o*g*s-p*n*c+e*g*c+o*n*m-e*l*m)*E,t[7]=(o*d*s-h*l*s+h*n*c-e*d*c-o*n*f+e*l*f)*E,t[8]=x*E,t[9]=(p*u*s-h*_*s-p*i*f+e*_*f+h*i*m-e*u*m)*E,t[10]=(o*_*s-p*a*s+p*i*c-e*_*c-o*i*m+e*a*m)*E,t[11]=(h*a*s-o*u*s-h*i*c+e*u*c+o*i*f-e*a*f)*E,t[12]=C*E,t[13]=(h*_*n-p*u*n+p*i*d-e*_*d-h*i*g+e*u*g)*E,t[14]=(p*a*n-o*_*n-p*i*l+e*_*l+o*i*g-e*a*g)*E,t[15]=(o*u*n-h*a*n+h*i*l-e*u*l-o*i*d+e*a*d)*E,this}scale(t){const e=this.elements,i=t.x,n=t.y,s=t.z;return e[0]*=i,e[4]*=n,e[8]*=s,e[1]*=i,e[5]*=n,e[9]*=s,e[2]*=i,e[6]*=n,e[10]*=s,e[3]*=i,e[7]*=n,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],n=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,n))}makeTranslation(t,e,i){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const i=Math.cos(e),n=Math.sin(e),s=1-i,o=t.x,a=t.y,l=t.z,c=s*o,h=s*a;return this.set(c*o+i,c*a-n*l,c*l+n*a,0,c*a+n*l,h*a+i,h*l-n*o,0,c*l-n*a,h*l+n*o,s*l*l+i,0,0,0,0,1),this}makeScale(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this}makeShear(t,e,i,n,s,o){return this.set(1,i,s,0,t,1,o,0,e,n,1,0,0,0,0,1),this}compose(t,e,i){const n=this.elements,s=e._x,o=e._y,a=e._z,l=e._w,c=s+s,h=o+o,u=a+a,d=s*c,f=s*h,p=s*u,_=o*h,g=o*u,m=a*u,y=l*c,v=l*h,x=l*u,C=i.x,A=i.y,E=i.z;return n[0]=(1-(_+m))*C,n[1]=(f+x)*C,n[2]=(p-v)*C,n[3]=0,n[4]=(f-x)*A,n[5]=(1-(d+m))*A,n[6]=(g+y)*A,n[7]=0,n[8]=(p+v)*E,n[9]=(g-y)*E,n[10]=(1-(d+_))*E,n[11]=0,n[12]=t.x,n[13]=t.y,n[14]=t.z,n[15]=1,this}decompose(t,e,i){const n=this.elements;let s=io.set(n[0],n[1],n[2]).length();const o=io.set(n[4],n[5],n[6]).length(),a=io.set(n[8],n[9],n[10]).length();this.determinant()<0&&(s=-s),t.x=n[12],t.y=n[13],t.z=n[14],ln.copy(this);const c=1/s,h=1/o,u=1/a;return ln.elements[0]*=c,ln.elements[1]*=c,ln.elements[2]*=c,ln.elements[4]*=h,ln.elements[5]*=h,ln.elements[6]*=h,ln.elements[8]*=u,ln.elements[9]*=u,ln.elements[10]*=u,e.setFromRotationMatrix(ln),i.x=s,i.y=o,i.z=a,this}makePerspective(t,e,i,n,s,o,a=us){const l=this.elements,c=2*s/(e-t),h=2*s/(i-n),u=(e+t)/(e-t),d=(i+n)/(i-n);let f,p;if(a===us)f=-(o+s)/(o-s),p=-2*o*s/(o-s);else if(a===dh)f=-o/(o-s),p=-o*s/(o-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return l[0]=c,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=h,l[9]=d,l[13]=0,l[2]=0,l[6]=0,l[10]=f,l[14]=p,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(t,e,i,n,s,o,a=us){const l=this.elements,c=1/(e-t),h=1/(i-n),u=1/(o-s),d=(e+t)*c,f=(i+n)*h;let p,_;if(a===us)p=(o+s)*u,_=-2*u;else if(a===dh)p=s*u,_=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-d,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-f,l[2]=0,l[6]=0,l[10]=_,l[14]=-p,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(t){const e=this.elements,i=t.elements;for(let n=0;n<16;n++)if(e[n]!==i[n])return!1;return!0}fromArray(t,e=0){for(let i=0;i<16;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}};const io=new P,ln=new Pe,GM=new P(0,0,0),kM=new P(1,1,1),Ls=new P,Hl=new P,zi=new P,eg=new Pe,ig=new Fn;let rr=class x0{constructor(t=0,e=0,i=0,n=x0.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=i,this._order=n}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,i,n=this._order){return this._x=t,this._y=e,this._z=i,this._order=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,i=!0){const n=t.elements,s=n[0],o=n[4],a=n[8],l=n[1],c=n[5],h=n[9],u=n[2],d=n[6],f=n[10];switch(e){case"XYZ":this._y=Math.asin(ni(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-ni(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,s),this._z=0);break;case"ZXY":this._x=Math.asin(ni(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-ni(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-o,c));break;case"YZX":this._z=Math.asin(ni(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-ni(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-h,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,i===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,i){return eg.makeRotationFromQuaternion(t),this.setFromRotationMatrix(eg,e,i)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return ig.setFromEuler(this),this.setFromQuaternion(ig,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}};rr.DEFAULT_ORDER="XYZ";let Lp=class{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}},VM=0;const ng=new P,no=new Fn,Wn=new Pe,Wl=new P,Ra=new P,HM=new P,WM=new Fn,sg=new P(1,0,0),rg=new P(0,1,0),og=new P(0,0,1),ag={type:"added"},$M={type:"removed"},so={type:"childadded",child:null},mu={type:"childremoved",child:null};let Ui=class eh extends Wr{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:VM++}),this.uuid=fs(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=eh.DEFAULT_UP.clone();const t=new P,e=new rr,i=new Fn,n=new P(1,1,1);function s(){i.setFromEuler(e,!1)}function o(){e.setFromQuaternion(i,void 0,!1)}e._onChange(s),i._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new Pe},normalMatrix:{value:new Qt}}),this.matrix=new Pe,this.matrixWorld=new Pe,this.matrixAutoUpdate=eh.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=eh.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Lp,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return no.setFromAxisAngle(t,e),this.quaternion.multiply(no),this}rotateOnWorldAxis(t,e){return no.setFromAxisAngle(t,e),this.quaternion.premultiply(no),this}rotateX(t){return this.rotateOnAxis(sg,t)}rotateY(t){return this.rotateOnAxis(rg,t)}rotateZ(t){return this.rotateOnAxis(og,t)}translateOnAxis(t,e){return ng.copy(t).applyQuaternion(this.quaternion),this.position.add(ng.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(sg,t)}translateY(t){return this.translateOnAxis(rg,t)}translateZ(t){return this.translateOnAxis(og,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Wn.copy(this.matrixWorld).invert())}lookAt(t,e,i){t.isVector3?Wl.copy(t):Wl.set(t,e,i);const n=this.parent;this.updateWorldMatrix(!0,!1),Ra.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Wn.lookAt(Ra,Wl,this.up):Wn.lookAt(Wl,Ra,this.up),this.quaternion.setFromRotationMatrix(Wn),n&&(Wn.extractRotation(n.matrixWorld),no.setFromRotationMatrix(Wn),this.quaternion.premultiply(no.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(ag),so.child=t,this.dispatchEvent(so),so.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent($M),mu.child=t,this.dispatchEvent(mu),mu.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Wn.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),Wn.multiply(t.parent.matrixWorld)),t.applyMatrix4(Wn),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(ag),so.child=t,this.dispatchEvent(so),so.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let i=0,n=this.children.length;i<n;i++){const o=this.children[i].getObjectByProperty(t,e);if(o!==void 0)return o}}getObjectsByProperty(t,e,i=[]){this[t]===e&&i.push(this);const n=this.children;for(let s=0,o=n.length;s<o;s++)n[s].getObjectsByProperty(t,e,i);return i}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Ra,t,HM),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Ra,WM,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].updateMatrixWorld(t)}updateWorldMatrix(t,e){const i=this.parent;if(t===!0&&i!==null&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const n=this.children;for(let s=0,o=n.length;s<o;s++)n[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",i={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const n={};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.castShadow===!0&&(n.castShadow=!0),this.receiveShadow===!0&&(n.receiveShadow=!0),this.visible===!1&&(n.visible=!1),this.frustumCulled===!1&&(n.frustumCulled=!1),this.renderOrder!==0&&(n.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),n.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(n.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(n.type="BatchedMesh",n.perObjectFrustumCulled=this.perObjectFrustumCulled,n.sortObjects=this.sortObjects,n.drawRanges=this._drawRanges,n.reservedRanges=this._reservedRanges,n.visibility=this._visibility,n.active=this._active,n.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),n.maxInstanceCount=this._maxInstanceCount,n.maxVertexCount=this._maxVertexCount,n.maxIndexCount=this._maxIndexCount,n.geometryInitialized=this._geometryInitialized,n.geometryCount=this._geometryCount,n.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(n.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(n.boundingSphere={center:n.boundingSphere.center.toArray(),radius:n.boundingSphere.radius}),this.boundingBox!==null&&(n.boundingBox={min:n.boundingBox.min.toArray(),max:n.boundingBox.max.toArray()}));function s(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?n.background=this.background.toJSON():this.background.isTexture&&(n.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(n.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){n.geometry=s(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];s(t.shapes,u)}else s(t.shapes,l)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++)a.push(s(t.materials,this.material[l]));n.material=a}else n.material=s(t.materials,this.material);if(this.children.length>0){n.children=[];for(let a=0;a<this.children.length;a++)n.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){n.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];n.animations.push(s(t.animations,l))}}if(e){const a=o(t.geometries),l=o(t.materials),c=o(t.textures),h=o(t.images),u=o(t.shapes),d=o(t.skeletons),f=o(t.animations),p=o(t.nodes);a.length>0&&(i.geometries=a),l.length>0&&(i.materials=l),c.length>0&&(i.textures=c),h.length>0&&(i.images=h),u.length>0&&(i.shapes=u),d.length>0&&(i.skeletons=d),f.length>0&&(i.animations=f),p.length>0&&(i.nodes=p)}return i.object=n,i;function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let i=0;i<t.children.length;i++){const n=t.children[i];this.add(n.clone())}return this}};Ui.DEFAULT_UP=new P(0,1,0);Ui.DEFAULT_MATRIX_AUTO_UPDATE=!0;Ui.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const cn=new P,$n=new P,gu=new P,Xn=new P,ro=new P,oo=new P,lg=new P,_u=new P,xu=new P,yu=new P,vu=new qe,Su=new qe,Mu=new qe;let Fo=class Uo{constructor(t=new P,e=new P,i=new P){this.a=t,this.b=e,this.c=i}static getNormal(t,e,i,n){n.subVectors(i,e),cn.subVectors(t,e),n.cross(cn);const s=n.lengthSq();return s>0?n.multiplyScalar(1/Math.sqrt(s)):n.set(0,0,0)}static getBarycoord(t,e,i,n,s){cn.subVectors(n,e),$n.subVectors(i,e),gu.subVectors(t,e);const o=cn.dot(cn),a=cn.dot($n),l=cn.dot(gu),c=$n.dot($n),h=$n.dot(gu),u=o*c-a*a;if(u===0)return s.set(0,0,0),null;const d=1/u,f=(c*l-a*h)*d,p=(o*h-a*l)*d;return s.set(1-f-p,p,f)}static containsPoint(t,e,i,n){return this.getBarycoord(t,e,i,n,Xn)===null?!1:Xn.x>=0&&Xn.y>=0&&Xn.x+Xn.y<=1}static getInterpolation(t,e,i,n,s,o,a,l){return this.getBarycoord(t,e,i,n,Xn)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(s,Xn.x),l.addScaledVector(o,Xn.y),l.addScaledVector(a,Xn.z),l)}static getInterpolatedAttribute(t,e,i,n,s,o){return vu.setScalar(0),Su.setScalar(0),Mu.setScalar(0),vu.fromBufferAttribute(t,e),Su.fromBufferAttribute(t,i),Mu.fromBufferAttribute(t,n),o.setScalar(0),o.addScaledVector(vu,s.x),o.addScaledVector(Su,s.y),o.addScaledVector(Mu,s.z),o}static isFrontFacing(t,e,i,n){return cn.subVectors(i,e),$n.subVectors(t,e),cn.cross($n).dot(n)<0}set(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this}setFromPointsAndIndices(t,e,i,n){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[n]),this}setFromAttributeAndIndices(t,e,i,n){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,i),this.c.fromBufferAttribute(t,n),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return cn.subVectors(this.c,this.b),$n.subVectors(this.a,this.b),cn.cross($n).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Uo.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Uo.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,i,n,s){return Uo.getInterpolation(t,this.a,this.b,this.c,e,i,n,s)}containsPoint(t){return Uo.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Uo.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const i=this.a,n=this.b,s=this.c;let o,a;ro.subVectors(n,i),oo.subVectors(s,i),_u.subVectors(t,i);const l=ro.dot(_u),c=oo.dot(_u);if(l<=0&&c<=0)return e.copy(i);xu.subVectors(t,n);const h=ro.dot(xu),u=oo.dot(xu);if(h>=0&&u<=h)return e.copy(n);const d=l*u-h*c;if(d<=0&&l>=0&&h<=0)return o=l/(l-h),e.copy(i).addScaledVector(ro,o);yu.subVectors(t,s);const f=ro.dot(yu),p=oo.dot(yu);if(p>=0&&f<=p)return e.copy(s);const _=f*c-l*p;if(_<=0&&c>=0&&p<=0)return a=c/(c-p),e.copy(i).addScaledVector(oo,a);const g=h*p-f*u;if(g<=0&&u-h>=0&&f-p>=0)return lg.subVectors(s,n),a=(u-h)/(u-h+(f-p)),e.copy(n).addScaledVector(lg,a);const m=1/(g+_+d);return o=_*m,a=d*m,e.copy(i).addScaledVector(ro,o).addScaledVector(oo,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}};const y0={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Fs={h:0,s:0,l:0},$l={h:0,s:0,l:0};function Tu(r,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?r+(t-r)*6*e:e<1/2?t:e<2/3?r+(t-r)*6*(2/3-e):r}let re=class{constructor(t,e,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,i)}set(t,e,i){if(e===void 0&&i===void 0){const n=t;n&&n.isColor?this.copy(n):typeof n=="number"?this.setHex(n):typeof n=="string"&&this.setStyle(n)}else this.setRGB(t,e,i);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=Ji){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,ce.toWorkingColorSpace(this,e),this}setRGB(t,e,i,n=ce.workingColorSpace){return this.r=t,this.g=e,this.b=i,ce.toWorkingColorSpace(this,n),this}setHSL(t,e,i,n=ce.workingColorSpace){if(t=Dp(t,1),e=ni(e,0,1),i=ni(i,0,1),e===0)this.r=this.g=this.b=i;else{const s=i<=.5?i*(1+e):i+e-i*e,o=2*i-s;this.r=Tu(o,s,t+1/3),this.g=Tu(o,s,t),this.b=Tu(o,s,t-1/3)}return ce.toWorkingColorSpace(this,n),this}setStyle(t,e=Ji){function i(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let n;if(n=/^(\w+)\(([^\)]*)\)/.exec(t)){let s;const o=n[1],a=n[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return i(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,e);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return i(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,e);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return i(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=n[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(o===6)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=Ji){const i=y0[t.toLowerCase()];return i!==void 0?this.setHex(i,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=ps(t.r),this.g=ps(t.g),this.b=ps(t.b),this}copyLinearToSRGB(t){return this.r=qo(t.r),this.g=qo(t.g),this.b=qo(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Ji){return ce.fromWorkingColorSpace(mi.copy(this),t),Math.round(ni(mi.r*255,0,255))*65536+Math.round(ni(mi.g*255,0,255))*256+Math.round(ni(mi.b*255,0,255))}getHexString(t=Ji){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=ce.workingColorSpace){ce.fromWorkingColorSpace(mi.copy(this),e);const i=mi.r,n=mi.g,s=mi.b,o=Math.max(i,n,s),a=Math.min(i,n,s);let l,c;const h=(a+o)/2;if(a===o)l=0,c=0;else{const u=o-a;switch(c=h<=.5?u/(o+a):u/(2-o-a),o){case i:l=(n-s)/u+(n<s?6:0);break;case n:l=(s-i)/u+2;break;case s:l=(i-n)/u+4;break}l/=6}return t.h=l,t.s=c,t.l=h,t}getRGB(t,e=ce.workingColorSpace){return ce.fromWorkingColorSpace(mi.copy(this),e),t.r=mi.r,t.g=mi.g,t.b=mi.b,t}getStyle(t=Ji){ce.fromWorkingColorSpace(mi.copy(this),t);const e=mi.r,i=mi.g,n=mi.b;return t!==Ji?`color(${t} ${e.toFixed(3)} ${i.toFixed(3)} ${n.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(i*255)},${Math.round(n*255)})`}offsetHSL(t,e,i){return this.getHSL(Fs),this.setHSL(Fs.h+t,Fs.s+e,Fs.l+i)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,i){return this.r=t.r+(e.r-t.r)*i,this.g=t.g+(e.g-t.g)*i,this.b=t.b+(e.b-t.b)*i,this}lerpHSL(t,e){this.getHSL(Fs),t.getHSL($l);const i=Ja(Fs.h,$l.h,e),n=Ja(Fs.s,$l.s,e),s=Ja(Fs.l,$l.l,e);return this.setHSL(i,n,s),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,i=this.g,n=this.b,s=t.elements;return this.r=s[0]*e+s[3]*i+s[6]*n,this.g=s[1]*e+s[4]*i+s[7]*n,this.b=s[2]*e+s[5]*i+s[8]*n,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}};const mi=new re;re.NAMES=y0;let XM=0,$r=class extends Wr{static get type(){return"Material"}get type(){return this.constructor.type}set type(t){}constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:XM++}),this.uuid=fs(),this.name="",this.blending=$o,this.side=nr,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Yd,this.blendDst=jd,this.blendEquation=wr,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new re(0,0,0),this.blendAlpha=0,this.depthFunc=ia,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=$m,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Zr,this.stencilZFail=Zr,this.stencilZPass=Zr,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const i=t[e];if(i===void 0){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const n=this[e];if(n===void 0){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}n&&n.isColor?n.set(i):n&&n.isVector3&&i&&i.isVector3?n.copy(i):this[e]=i}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const i={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),this.roughness!==void 0&&(i.roughness=this.roughness),this.metalness!==void 0&&(i.metalness=this.metalness),this.sheen!==void 0&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(i.shininess=this.shininess),this.clearcoat!==void 0&&(i.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(i.dispersion=this.dispersion),this.iridescence!==void 0&&(i.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(i.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(i.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(i.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(i.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(i.combine=this.combine)),this.envMapRotation!==void 0&&(i.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(i.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(i.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(i.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(i.size=this.size),this.shadowSide!==null&&(i.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==$o&&(i.blending=this.blending),this.side!==nr&&(i.side=this.side),this.vertexColors===!0&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),this.transparent===!0&&(i.transparent=!0),this.blendSrc!==Yd&&(i.blendSrc=this.blendSrc),this.blendDst!==jd&&(i.blendDst=this.blendDst),this.blendEquation!==wr&&(i.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(i.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(i.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(i.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(i.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(i.blendAlpha=this.blendAlpha),this.depthFunc!==ia&&(i.depthFunc=this.depthFunc),this.depthTest===!1&&(i.depthTest=this.depthTest),this.depthWrite===!1&&(i.depthWrite=this.depthWrite),this.colorWrite===!1&&(i.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(i.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==$m&&(i.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(i.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(i.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==Zr&&(i.stencilFail=this.stencilFail),this.stencilZFail!==Zr&&(i.stencilZFail=this.stencilZFail),this.stencilZPass!==Zr&&(i.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(i.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(i.rotation=this.rotation),this.polygonOffset===!0&&(i.polygonOffset=!0),this.polygonOffsetFactor!==0&&(i.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(i.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(i.linewidth=this.linewidth),this.dashSize!==void 0&&(i.dashSize=this.dashSize),this.gapSize!==void 0&&(i.gapSize=this.gapSize),this.scale!==void 0&&(i.scale=this.scale),this.dithering===!0&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),this.alphaHash===!0&&(i.alphaHash=!0),this.alphaToCoverage===!0&&(i.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(i.premultipliedAlpha=!0),this.forceSinglePass===!0&&(i.forceSinglePass=!0),this.wireframe===!0&&(i.wireframe=!0),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(i.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(i.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(i.flatShading=!0),this.visible===!1&&(i.visible=!1),this.toneMapped===!1&&(i.toneMapped=!1),this.fog===!1&&(i.fog=!1),Object.keys(this.userData).length>0&&(i.userData=this.userData);function n(s){const o=[];for(const a in s){const l=s[a];delete l.metadata,o.push(l)}return o}if(e){const s=n(t.textures),o=n(t.images);s.length>0&&(i.textures=s),o.length>0&&(i.images=o)}return i}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let i=null;if(e!==null){const n=e.length;i=new Array(n);for(let s=0;s!==n;++s)i[s]=e[s].clone()}return this.clippingPlanes=i,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}},v0=class extends $r{static get type(){return"MeshBasicMaterial"}constructor(t){super(),this.isMeshBasicMaterial=!0,this.color=new re(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new rr,this.combine=Ep,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}};const ke=new P,Xl=new ft;let Mn=class{constructor(t,e,i=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=i,this.usage=Ff,this.updateRanges=[],this.gpuType=hs,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,i){t*=this.itemSize,i*=e.itemSize;for(let n=0,s=this.itemSize;n<s;n++)this.array[t+n]=e.array[i+n];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,i=this.count;e<i;e++)Xl.fromBufferAttribute(this,e),Xl.applyMatrix3(t),this.setXY(e,Xl.x,Xl.y);else if(this.itemSize===3)for(let e=0,i=this.count;e<i;e++)ke.fromBufferAttribute(this,e),ke.applyMatrix3(t),this.setXYZ(e,ke.x,ke.y,ke.z);return this}applyMatrix4(t){for(let e=0,i=this.count;e<i;e++)ke.fromBufferAttribute(this,e),ke.applyMatrix4(t),this.setXYZ(e,ke.x,ke.y,ke.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)ke.fromBufferAttribute(this,e),ke.applyNormalMatrix(t),this.setXYZ(e,ke.x,ke.y,ke.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)ke.fromBufferAttribute(this,e),ke.transformDirection(t),this.setXYZ(e,ke.x,ke.y,ke.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let i=this.array[t*this.itemSize+e];return this.normalized&&(i=_n(i,this.array)),i}setComponent(t,e,i){return this.normalized&&(i=Se(i,this.array)),this.array[t*this.itemSize+e]=i,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=_n(e,this.array)),e}setX(t,e){return this.normalized&&(e=Se(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=_n(e,this.array)),e}setY(t,e){return this.normalized&&(e=Se(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=_n(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Se(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=_n(e,this.array)),e}setW(t,e){return this.normalized&&(e=Se(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,i){return t*=this.itemSize,this.normalized&&(e=Se(e,this.array),i=Se(i,this.array)),this.array[t+0]=e,this.array[t+1]=i,this}setXYZ(t,e,i,n){return t*=this.itemSize,this.normalized&&(e=Se(e,this.array),i=Se(i,this.array),n=Se(n,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this}setXYZW(t,e,i,n,s){return t*=this.itemSize,this.normalized&&(e=Se(e,this.array),i=Se(i,this.array),n=Se(n,this.array),s=Se(s,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==Ff&&(t.usage=this.usage),t}},S0=class extends Mn{constructor(t,e,i){super(new Uint16Array(t),e,i)}},M0=class extends Mn{constructor(t,e,i){super(new Uint32Array(t),e,i)}},Qe=class extends Mn{constructor(t,e,i){super(new Float32Array(t),e,i)}},qM=0;const Zi=new Pe,bu=new Ui,ao=new P,Gi=new bl,Ca=new bl,ei=new P;let An=class T0 extends Wr{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:qM++}),this.uuid=fs(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(f0(t)?M0:S0)(t,1):this.index=t,this}setIndirect(t){return this.indirect=t,this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,i=0){this.groups.push({start:t,count:e,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const i=this.attributes.normal;if(i!==void 0){const s=new Qt().getNormalMatrix(t);i.applyNormalMatrix(s),i.needsUpdate=!0}const n=this.attributes.tangent;return n!==void 0&&(n.transformDirection(t),n.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return Zi.makeRotationFromQuaternion(t),this.applyMatrix4(Zi),this}rotateX(t){return Zi.makeRotationX(t),this.applyMatrix4(Zi),this}rotateY(t){return Zi.makeRotationY(t),this.applyMatrix4(Zi),this}rotateZ(t){return Zi.makeRotationZ(t),this.applyMatrix4(Zi),this}translate(t,e,i){return Zi.makeTranslation(t,e,i),this.applyMatrix4(Zi),this}scale(t,e,i){return Zi.makeScale(t,e,i),this.applyMatrix4(Zi),this}lookAt(t){return bu.lookAt(t),bu.updateMatrix(),this.applyMatrix4(bu.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(ao).negate(),this.translate(ao.x,ao.y,ao.z),this}setFromPoints(t){const e=this.getAttribute("position");if(e===void 0){const i=[];for(let n=0,s=t.length;n<s;n++){const o=t[n];i.push(o.x,o.y,o.z||0)}this.setAttribute("position",new Qe(i,3))}else{for(let i=0,n=e.count;i<n;i++){const s=t[i];e.setXYZ(i,s.x,s.y,s.z||0)}t.length>e.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),e.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new bl);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new P(-1/0,-1/0,-1/0),new P(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let i=0,n=e.length;i<n;i++){const s=e[i];Gi.setFromBufferAttribute(s),this.morphTargetsRelative?(ei.addVectors(this.boundingBox.min,Gi.min),this.boundingBox.expandByPoint(ei),ei.addVectors(this.boundingBox.max,Gi.max),this.boundingBox.expandByPoint(ei)):(this.boundingBox.expandByPoint(Gi.min),this.boundingBox.expandByPoint(Gi.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Bh);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new P,1/0);return}if(t){const i=this.boundingSphere.center;if(Gi.setFromBufferAttribute(t),e)for(let s=0,o=e.length;s<o;s++){const a=e[s];Ca.setFromBufferAttribute(a),this.morphTargetsRelative?(ei.addVectors(Gi.min,Ca.min),Gi.expandByPoint(ei),ei.addVectors(Gi.max,Ca.max),Gi.expandByPoint(ei)):(Gi.expandByPoint(Ca.min),Gi.expandByPoint(Ca.max))}Gi.getCenter(i);let n=0;for(let s=0,o=t.count;s<o;s++)ei.fromBufferAttribute(t,s),n=Math.max(n,i.distanceToSquared(ei));if(e)for(let s=0,o=e.length;s<o;s++){const a=e[s],l=this.morphTargetsRelative;for(let c=0,h=a.count;c<h;c++)ei.fromBufferAttribute(a,c),l&&(ao.fromBufferAttribute(t,c),ei.add(ao)),n=Math.max(n,i.distanceToSquared(ei))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const i=e.position,n=e.normal,s=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Mn(new Float32Array(4*i.count),4));const o=this.getAttribute("tangent"),a=[],l=[];for(let w=0;w<i.count;w++)a[w]=new P,l[w]=new P;const c=new P,h=new P,u=new P,d=new ft,f=new ft,p=new ft,_=new P,g=new P;function m(w,T,S){c.fromBufferAttribute(i,w),h.fromBufferAttribute(i,T),u.fromBufferAttribute(i,S),d.fromBufferAttribute(s,w),f.fromBufferAttribute(s,T),p.fromBufferAttribute(s,S),h.sub(c),u.sub(c),f.sub(d),p.sub(d);const N=1/(f.x*p.y-p.x*f.y);isFinite(N)&&(_.copy(h).multiplyScalar(p.y).addScaledVector(u,-f.y).multiplyScalar(N),g.copy(u).multiplyScalar(f.x).addScaledVector(h,-p.x).multiplyScalar(N),a[w].add(_),a[T].add(_),a[S].add(_),l[w].add(g),l[T].add(g),l[S].add(g))}let y=this.groups;y.length===0&&(y=[{start:0,count:t.count}]);for(let w=0,T=y.length;w<T;++w){const S=y[w],N=S.start,G=S.count;for(let B=N,V=N+G;B<V;B+=3)m(t.getX(B+0),t.getX(B+1),t.getX(B+2))}const v=new P,x=new P,C=new P,A=new P;function E(w){C.fromBufferAttribute(n,w),A.copy(C);const T=a[w];v.copy(T),v.sub(C.multiplyScalar(C.dot(T))).normalize(),x.crossVectors(A,T);const N=x.dot(l[w])<0?-1:1;o.setXYZW(w,v.x,v.y,v.z,N)}for(let w=0,T=y.length;w<T;++w){const S=y[w],N=S.start,G=S.count;for(let B=N,V=N+G;B<V;B+=3)E(t.getX(B+0)),E(t.getX(B+1)),E(t.getX(B+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let i=this.getAttribute("normal");if(i===void 0)i=new Mn(new Float32Array(e.count*3),3),this.setAttribute("normal",i);else for(let d=0,f=i.count;d<f;d++)i.setXYZ(d,0,0,0);const n=new P,s=new P,o=new P,a=new P,l=new P,c=new P,h=new P,u=new P;if(t)for(let d=0,f=t.count;d<f;d+=3){const p=t.getX(d+0),_=t.getX(d+1),g=t.getX(d+2);n.fromBufferAttribute(e,p),s.fromBufferAttribute(e,_),o.fromBufferAttribute(e,g),h.subVectors(o,s),u.subVectors(n,s),h.cross(u),a.fromBufferAttribute(i,p),l.fromBufferAttribute(i,_),c.fromBufferAttribute(i,g),a.add(h),l.add(h),c.add(h),i.setXYZ(p,a.x,a.y,a.z),i.setXYZ(_,l.x,l.y,l.z),i.setXYZ(g,c.x,c.y,c.z)}else for(let d=0,f=e.count;d<f;d+=3)n.fromBufferAttribute(e,d+0),s.fromBufferAttribute(e,d+1),o.fromBufferAttribute(e,d+2),h.subVectors(o,s),u.subVectors(n,s),h.cross(u),i.setXYZ(d+0,h.x,h.y,h.z),i.setXYZ(d+1,h.x,h.y,h.z),i.setXYZ(d+2,h.x,h.y,h.z);this.normalizeNormals(),i.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,i=t.count;e<i;e++)ei.fromBufferAttribute(t,e),ei.normalize(),t.setXYZ(e,ei.x,ei.y,ei.z)}toNonIndexed(){function t(a,l){const c=a.array,h=a.itemSize,u=a.normalized,d=new c.constructor(l.length*h);let f=0,p=0;for(let _=0,g=l.length;_<g;_++){a.isInterleavedBufferAttribute?f=l[_]*a.data.stride+a.offset:f=l[_]*h;for(let m=0;m<h;m++)d[p++]=c[f++]}return new Mn(d,h,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new T0,i=this.index.array,n=this.attributes;for(const a in n){const l=n[a],c=t(l,i);e.setAttribute(a,c)}const s=this.morphAttributes;for(const a in s){const l=[],c=s[a];for(let h=0,u=c.length;h<u;h++){const d=c[h],f=t(d,i);l.push(f)}e.morphAttributes[a]=l}e.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const c=o[a];e.addGroup(c.start,c.count,c.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(t[c]=l[c]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const i=this.attributes;for(const l in i){const c=i[l];t.data.attributes[l]=c.toJSON(t.data)}const n={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],h=[];for(let u=0,d=c.length;u<d;u++){const f=c[u];h.push(f.toJSON(t.data))}h.length>0&&(n[l]=h,s=!0)}s&&(t.data.morphAttributes=n,t.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(t.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const i=t.index;i!==null&&this.setIndex(i.clone(e));const n=t.attributes;for(const c in n){const h=n[c];this.setAttribute(c,h.clone(e))}const s=t.morphAttributes;for(const c in s){const h=[],u=s[c];for(let d=0,f=u.length;d<f;d++)h.push(u[d].clone(e));this.morphAttributes[c]=h}this.morphTargetsRelative=t.morphTargetsRelative;const o=t.groups;for(let c=0,h=o.length;c<h;c++){const u=o[c];this.addGroup(u.start,u.count,u.materialIndex)}const a=t.boundingBox;a!==null&&(this.boundingBox=a.clone());const l=t.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}};const cg=new Pe,pr=new Oh,ql=new Bh,hg=new P,Yl=new P,jl=new P,Kl=new P,Eu=new P,Zl=new P,ug=new P,Ql=new P;let Pn=class extends Ui{constructor(t=new An,e=new v0){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,i=Object.keys(e);if(i.length>0){const n=e[i[0]];if(n!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=n.length;s<o;s++){const a=n[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}getVertexPosition(t,e){const i=this.geometry,n=i.attributes.position,s=i.morphAttributes.position,o=i.morphTargetsRelative;e.fromBufferAttribute(n,t);const a=this.morphTargetInfluences;if(s&&a){Zl.set(0,0,0);for(let l=0,c=s.length;l<c;l++){const h=a[l],u=s[l];h!==0&&(Eu.fromBufferAttribute(u,t),o?Zl.addScaledVector(Eu,h):Zl.addScaledVector(Eu.sub(e),h))}e.add(Zl)}return e}raycast(t,e){const i=this.geometry,n=this.material,s=this.matrixWorld;n!==void 0&&(i.boundingSphere===null&&i.computeBoundingSphere(),ql.copy(i.boundingSphere),ql.applyMatrix4(s),pr.copy(t.ray).recast(t.near),!(ql.containsPoint(pr.origin)===!1&&(pr.intersectSphere(ql,hg)===null||pr.origin.distanceToSquared(hg)>(t.far-t.near)**2))&&(cg.copy(s).invert(),pr.copy(t.ray).applyMatrix4(cg),!(i.boundingBox!==null&&pr.intersectsBox(i.boundingBox)===!1)&&this._computeIntersections(t,e,pr)))}_computeIntersections(t,e,i){let n;const s=this.geometry,o=this.material,a=s.index,l=s.attributes.position,c=s.attributes.uv,h=s.attributes.uv1,u=s.attributes.normal,d=s.groups,f=s.drawRange;if(a!==null)if(Array.isArray(o))for(let p=0,_=d.length;p<_;p++){const g=d[p],m=o[g.materialIndex],y=Math.max(g.start,f.start),v=Math.min(a.count,Math.min(g.start+g.count,f.start+f.count));for(let x=y,C=v;x<C;x+=3){const A=a.getX(x),E=a.getX(x+1),w=a.getX(x+2);n=Jl(this,m,t,i,c,h,u,A,E,w),n&&(n.faceIndex=Math.floor(x/3),n.face.materialIndex=g.materialIndex,e.push(n))}}else{const p=Math.max(0,f.start),_=Math.min(a.count,f.start+f.count);for(let g=p,m=_;g<m;g+=3){const y=a.getX(g),v=a.getX(g+1),x=a.getX(g+2);n=Jl(this,o,t,i,c,h,u,y,v,x),n&&(n.faceIndex=Math.floor(g/3),e.push(n))}}else if(l!==void 0)if(Array.isArray(o))for(let p=0,_=d.length;p<_;p++){const g=d[p],m=o[g.materialIndex],y=Math.max(g.start,f.start),v=Math.min(l.count,Math.min(g.start+g.count,f.start+f.count));for(let x=y,C=v;x<C;x+=3){const A=x,E=x+1,w=x+2;n=Jl(this,m,t,i,c,h,u,A,E,w),n&&(n.faceIndex=Math.floor(x/3),n.face.materialIndex=g.materialIndex,e.push(n))}}else{const p=Math.max(0,f.start),_=Math.min(l.count,f.start+f.count);for(let g=p,m=_;g<m;g+=3){const y=g,v=g+1,x=g+2;n=Jl(this,o,t,i,c,h,u,y,v,x),n&&(n.faceIndex=Math.floor(g/3),e.push(n))}}}};function YM(r,t,e,i,n,s,o,a){let l;if(t.side===Fi?l=i.intersectTriangle(o,s,n,!0,a):l=i.intersectTriangle(n,s,o,t.side===nr,a),l===null)return null;Ql.copy(a),Ql.applyMatrix4(r.matrixWorld);const c=e.ray.origin.distanceTo(Ql);return c<e.near||c>e.far?null:{distance:c,point:Ql.clone(),object:r}}function Jl(r,t,e,i,n,s,o,a,l,c){r.getVertexPosition(a,Yl),r.getVertexPosition(l,jl),r.getVertexPosition(c,Kl);const h=YM(r,t,e,i,Yl,jl,Kl,ug);if(h){const u=new P;Fo.getBarycoord(ug,Yl,jl,Kl,u),n&&(h.uv=Fo.getInterpolatedAttribute(n,a,l,c,u,new ft)),s&&(h.uv1=Fo.getInterpolatedAttribute(s,a,l,c,u,new ft)),o&&(h.normal=Fo.getInterpolatedAttribute(o,a,l,c,u,new P),h.normal.dot(i.direction)>0&&h.normal.multiplyScalar(-1));const d={a,b:l,c,normal:new P,materialIndex:0};Fo.getNormal(Yl,jl,Kl,d.normal),h.face=d,h.barycoord=u}return h}let Fp=class b0 extends An{constructor(t=1,e=1,i=1,n=1,s=1,o=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:n,heightSegments:s,depthSegments:o};const a=this;n=Math.floor(n),s=Math.floor(s),o=Math.floor(o);const l=[],c=[],h=[],u=[];let d=0,f=0;p("z","y","x",-1,-1,i,e,t,o,s,0),p("z","y","x",1,-1,i,e,-t,o,s,1),p("x","z","y",1,1,t,i,e,n,o,2),p("x","z","y",1,-1,t,i,-e,n,o,3),p("x","y","z",1,-1,t,e,i,n,s,4),p("x","y","z",-1,-1,t,e,-i,n,s,5),this.setIndex(l),this.setAttribute("position",new Qe(c,3)),this.setAttribute("normal",new Qe(h,3)),this.setAttribute("uv",new Qe(u,2));function p(_,g,m,y,v,x,C,A,E,w,T){const S=x/E,N=C/w,G=x/2,B=C/2,V=A/2,Q=E+1,q=w+1;let rt=0,$=0;const ot=new P;for(let dt=0;dt<q;dt++){const Tt=dt*N-B;for(let Gt=0;Gt<Q;Gt++){const he=Gt*S-G;ot[_]=he*y,ot[g]=Tt*v,ot[m]=V,c.push(ot.x,ot.y,ot.z),ot[_]=0,ot[g]=0,ot[m]=A>0?1:-1,h.push(ot.x,ot.y,ot.z),u.push(Gt/E),u.push(1-dt/w),rt+=1}}for(let dt=0;dt<w;dt++)for(let Tt=0;Tt<E;Tt++){const Gt=d+Tt+Q*dt,he=d+Tt+Q*(dt+1),J=d+(Tt+1)+Q*(dt+1),lt=d+(Tt+1)+Q*dt;l.push(Gt,he,lt),l.push(he,J,lt),$+=6}a.addGroup(f,$,T),f+=$,d+=rt}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new b0(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}};function aa(r){const t={};for(const e in r){t[e]={};for(const i in r[e]){const n=r[e][i];n&&(n.isColor||n.isMatrix3||n.isMatrix4||n.isVector2||n.isVector3||n.isVector4||n.isTexture||n.isQuaternion)?n.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][i]=null):t[e][i]=n.clone():Array.isArray(n)?t[e][i]=n.slice():t[e][i]=n}}return t}function Mi(r){const t={};for(let e=0;e<r.length;e++){const i=aa(r[e]);for(const n in i)t[n]=i[n]}return t}function jM(r){const t=[];for(let e=0;e<r.length;e++)t.push(r[e].clone());return t}function E0(r){const t=r.getRenderTarget();return t===null?r.outputColorSpace:t.isXRRenderTarget===!0?t.texture.colorSpace:ce.workingColorSpace}const A0={clone:aa,merge:Mi};var KM=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,ZM=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;let Un=class extends $r{static get type(){return"ShaderMaterial"}constructor(t){super(),this.isShaderMaterial=!0,this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=KM,this.fragmentShader=ZM,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=aa(t.uniforms),this.uniformsGroups=jM(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const o=this.uniforms[n].value;o&&o.isTexture?e.uniforms[n]={type:"t",value:o.toJSON(t).uuid}:o&&o.isColor?e.uniforms[n]={type:"c",value:o.getHex()}:o&&o.isVector2?e.uniforms[n]={type:"v2",value:o.toArray()}:o&&o.isVector3?e.uniforms[n]={type:"v3",value:o.toArray()}:o&&o.isVector4?e.uniforms[n]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?e.uniforms[n]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?e.uniforms[n]={type:"m4",value:o.toArray()}:e.uniforms[n]={value:o}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const i={};for(const n in this.extensions)this.extensions[n]===!0&&(i[n]=!0);return Object.keys(i).length>0&&(e.extensions=i),e}},w0=class extends Ui{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Pe,this.projectionMatrix=new Pe,this.projectionMatrixInverse=new Pe,this.coordinateSystem=us}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}};const Us=new P,dg=new ft,fg=new ft;let pn=class extends w0{constructor(t=50,e=1,i=.1,n=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=i,this.far=n,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=hl*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(Qa*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return hl*2*Math.atan(Math.tan(Qa*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,i){Us.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(Us.x,Us.y).multiplyScalar(-t/Us.z),Us.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),i.set(Us.x,Us.y).multiplyScalar(-t/Us.z)}getViewSize(t,e){return this.getViewBounds(t,dg,fg),e.subVectors(fg,dg)}setViewOffset(t,e,i,n,s,o){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(Qa*.5*this.fov)/this.zoom,i=2*e,n=this.aspect*i,s=-.5*n;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,c=o.fullHeight;s+=o.offsetX*n/l,e-=o.offsetY*i/c,n*=o.width/l,i*=o.height/c}const a=this.filmOffset;a!==0&&(s+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+n,e,e-i,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}};const lo=-90,co=1;let QM=class extends Ui{constructor(t,e,i){super(),this.type="CubeCamera",this.renderTarget=i,this.coordinateSystem=null,this.activeMipmapLevel=0;const n=new pn(lo,co,t,e);n.layers=this.layers,this.add(n);const s=new pn(lo,co,t,e);s.layers=this.layers,this.add(s);const o=new pn(lo,co,t,e);o.layers=this.layers,this.add(o);const a=new pn(lo,co,t,e);a.layers=this.layers,this.add(a);const l=new pn(lo,co,t,e);l.layers=this.layers,this.add(l);const c=new pn(lo,co,t,e);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[i,n,s,o,a,l]=e;for(const c of e)this.remove(c);if(t===us)i.up.set(0,1,0),i.lookAt(1,0,0),n.up.set(0,1,0),n.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),o.up.set(0,0,1),o.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(t===dh)i.up.set(0,-1,0),i.lookAt(-1,0,0),n.up.set(0,-1,0),n.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),o.up.set(0,0,-1),o.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const c of e)this.add(c),c.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:i,activeMipmapLevel:n}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[s,o,a,l,c,h]=this.children,u=t.getRenderTarget(),d=t.getActiveCubeFace(),f=t.getActiveMipmapLevel(),p=t.xr.enabled;t.xr.enabled=!1;const _=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,t.setRenderTarget(i,0,n),t.render(e,s),t.setRenderTarget(i,1,n),t.render(e,o),t.setRenderTarget(i,2,n),t.render(e,a),t.setRenderTarget(i,3,n),t.render(e,l),t.setRenderTarget(i,4,n),t.render(e,c),i.texture.generateMipmaps=_,t.setRenderTarget(i,5,n),t.render(e,h),t.setRenderTarget(u,d,f),t.xr.enabled=p,i.texture.needsPMREMUpdate=!0}},R0=class extends sn{constructor(t,e,i,n,s,o,a,l,c,h){t=t!==void 0?t:[],e=e!==void 0?e:na,super(t,e,i,n,s,o,a,l,c,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}},JM=class extends sr{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const i={width:t,height:t,depth:1},n=[i,i,i,i,i,i];this.texture=new R0(n,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:Nn}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const i={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},n=new Fp(5,5,5),s=new Un({name:"CubemapFromEquirect",uniforms:aa(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:Fi,blending:ds});s.uniforms.tEquirect.value=e;const o=new Pn(n,s),a=e.minFilter;return e.minFilter===Fr&&(e.minFilter=Nn),new QM(1,10,this).update(t,o),e.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,i,n){const s=t.getRenderTarget();for(let o=0;o<6;o++)t.setRenderTarget(this,o),t.clear(e,i,n);t.setRenderTarget(s)}};const Au=new P,tT=new P,eT=new Qt;let es=class{constructor(t=new P(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,i,n){return this.normal.set(t,e,i),this.constant=n,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,i){const n=Au.subVectors(i,e).cross(tT.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(n,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const i=t.delta(Au),n=this.normal.dot(i);if(n===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/n;return s<0||s>1?null:e.copy(t.start).addScaledVector(i,s)}intersectsLine(t){const e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const i=e||eT.getNormalMatrix(t),n=this.coplanarPoint(Au).applyMatrix4(t),s=this.normal.applyMatrix3(i).normalize();return this.constant=-n.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}};const mr=new Bh,tc=new P;let Up=class{constructor(t=new es,e=new es,i=new es,n=new es,s=new es,o=new es){this.planes=[t,e,i,n,s,o]}set(t,e,i,n,s,o){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(i),a[3].copy(n),a[4].copy(s),a[5].copy(o),this}copy(t){const e=this.planes;for(let i=0;i<6;i++)e[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t,e=us){const i=this.planes,n=t.elements,s=n[0],o=n[1],a=n[2],l=n[3],c=n[4],h=n[5],u=n[6],d=n[7],f=n[8],p=n[9],_=n[10],g=n[11],m=n[12],y=n[13],v=n[14],x=n[15];if(i[0].setComponents(l-s,d-c,g-f,x-m).normalize(),i[1].setComponents(l+s,d+c,g+f,x+m).normalize(),i[2].setComponents(l+o,d+h,g+p,x+y).normalize(),i[3].setComponents(l-o,d-h,g-p,x-y).normalize(),i[4].setComponents(l-a,d-u,g-_,x-v).normalize(),e===us)i[5].setComponents(l+a,d+u,g+_,x+v).normalize();else if(e===dh)i[5].setComponents(a,u,_,v).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),mr.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),mr.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(mr)}intersectsSprite(t){return mr.center.set(0,0,0),mr.radius=.7071067811865476,mr.applyMatrix4(t.matrixWorld),this.intersectsSphere(mr)}intersectsSphere(t){const e=this.planes,i=t.center,n=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(i)<n)return!1;return!0}intersectsBox(t){const e=this.planes;for(let i=0;i<6;i++){const n=e[i];if(tc.x=n.normal.x>0?t.max.x:t.min.x,tc.y=n.normal.y>0?t.max.y:t.min.y,tc.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(tc)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}};function C0(){let r=null,t=!1,e=null,i=null;function n(s,o){e(s,o),i=r.requestAnimationFrame(n)}return{start:function(){t!==!0&&e!==null&&(i=r.requestAnimationFrame(n),t=!0)},stop:function(){r.cancelAnimationFrame(i),t=!1},setAnimationLoop:function(s){e=s},setContext:function(s){r=s}}}function iT(r){const t=new WeakMap;function e(a,l){const c=a.array,h=a.usage,u=c.byteLength,d=r.createBuffer();r.bindBuffer(l,d),r.bufferData(l,c,h),a.onUploadCallback();let f;if(c instanceof Float32Array)f=r.FLOAT;else if(c instanceof Uint16Array)a.isFloat16BufferAttribute?f=r.HALF_FLOAT:f=r.UNSIGNED_SHORT;else if(c instanceof Int16Array)f=r.SHORT;else if(c instanceof Uint32Array)f=r.UNSIGNED_INT;else if(c instanceof Int32Array)f=r.INT;else if(c instanceof Int8Array)f=r.BYTE;else if(c instanceof Uint8Array)f=r.UNSIGNED_BYTE;else if(c instanceof Uint8ClampedArray)f=r.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+c);return{buffer:d,type:f,bytesPerElement:c.BYTES_PER_ELEMENT,version:a.version,size:u}}function i(a,l,c){const h=l.array,u=l.updateRanges;if(r.bindBuffer(c,a),u.length===0)r.bufferSubData(c,0,h);else{u.sort((f,p)=>f.start-p.start);let d=0;for(let f=1;f<u.length;f++){const p=u[d],_=u[f];_.start<=p.start+p.count+1?p.count=Math.max(p.count,_.start+_.count-p.start):(++d,u[d]=_)}u.length=d+1;for(let f=0,p=u.length;f<p;f++){const _=u[f];r.bufferSubData(c,_.start*h.BYTES_PER_ELEMENT,h,_.start,_.count)}l.clearUpdateRanges()}l.onUploadCallback()}function n(a){return a.isInterleavedBufferAttribute&&(a=a.data),t.get(a)}function s(a){a.isInterleavedBufferAttribute&&(a=a.data);const l=t.get(a);l&&(r.deleteBuffer(l.buffer),t.delete(a))}function o(a,l){if(a.isInterleavedBufferAttribute&&(a=a.data),a.isGLBufferAttribute){const h=t.get(a);(!h||h.version<a.version)&&t.set(a,{buffer:a.buffer,type:a.type,bytesPerElement:a.elementSize,version:a.version});return}const c=t.get(a);if(c===void 0)t.set(a,e(a,l));else if(c.version<a.version){if(c.size!==a.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");i(c.buffer,a,l),c.version=a.version}}return{get:n,remove:s,update:o}}class zh extends An{constructor(t=1,e=1,i=1,n=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:n};const s=t/2,o=e/2,a=Math.floor(i),l=Math.floor(n),c=a+1,h=l+1,u=t/a,d=e/l,f=[],p=[],_=[],g=[];for(let m=0;m<h;m++){const y=m*d-o;for(let v=0;v<c;v++){const x=v*u-s;p.push(x,-y,0),_.push(0,0,1),g.push(v/a),g.push(1-m/l)}}for(let m=0;m<l;m++)for(let y=0;y<a;y++){const v=y+c*m,x=y+c*(m+1),C=y+1+c*(m+1),A=y+1+c*m;f.push(v,x,A),f.push(x,C,A)}this.setIndex(f),this.setAttribute("position",new Qe(p,3)),this.setAttribute("normal",new Qe(_,3)),this.setAttribute("uv",new Qe(g,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new zh(t.width,t.height,t.widthSegments,t.heightSegments)}}var nT=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,sT=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,rT=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,oT=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,aT=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,lT=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,cT=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,hT=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,uT=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,dT=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,fT=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,pT=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,mT=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,gT=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,_T=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,xT=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,yT=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,vT=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,ST=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,MT=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,TT=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,bT=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,ET=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,AT=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,wT=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,RT=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,CT=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,NT=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,PT=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,DT=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,LT="gl_FragColor = linearToOutputTexel( gl_FragColor );",FT=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,UT=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,IT=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,BT=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,OT=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,zT=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,GT=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,kT=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,VT=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,HT=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,WT=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,$T=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,XT=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,qT=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,YT=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,jT=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,KT=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,ZT=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,QT=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,JT=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,tb=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,eb=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,ib=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,nb=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,sb=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,rb=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,ob=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,ab=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,lb=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,cb=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,hb=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,ub=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,db=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,fb=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,pb=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,mb=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,gb=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,_b=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,xb=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,yb=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,vb=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,Sb=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,Mb=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,Tb=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,bb=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,Eb=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,Ab=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,wb=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,Rb=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,Cb=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,Nb=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,Pb=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,Db=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,Lb=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,Fb=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,Ub=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,Ib=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,Bb=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,Ob=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,zb=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Gb=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,kb=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Vb=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,Hb=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,Wb=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,$b=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,Xb=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,qb=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,Yb=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,jb=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,Kb=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,Zb=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
		
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
		
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		
		#else
		
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,Qb=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,Jb=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,tE=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,eE=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const iE=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,nE=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,sE=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,rE=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,oE=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,aE=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,lE=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,cE=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,hE=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,uE=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,dE=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,fE=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,pE=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,mE=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,gE=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,_E=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,xE=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,yE=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,vE=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,SE=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,ME=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,TE=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,bE=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,EE=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,AE=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,wE=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,RE=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,CE=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,NE=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,PE=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,DE=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,LE=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,FE=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,UE=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,Kt={alphahash_fragment:nT,alphahash_pars_fragment:sT,alphamap_fragment:rT,alphamap_pars_fragment:oT,alphatest_fragment:aT,alphatest_pars_fragment:lT,aomap_fragment:cT,aomap_pars_fragment:hT,batching_pars_vertex:uT,batching_vertex:dT,begin_vertex:fT,beginnormal_vertex:pT,bsdfs:mT,iridescence_fragment:gT,bumpmap_pars_fragment:_T,clipping_planes_fragment:xT,clipping_planes_pars_fragment:yT,clipping_planes_pars_vertex:vT,clipping_planes_vertex:ST,color_fragment:MT,color_pars_fragment:TT,color_pars_vertex:bT,color_vertex:ET,common:AT,cube_uv_reflection_fragment:wT,defaultnormal_vertex:RT,displacementmap_pars_vertex:CT,displacementmap_vertex:NT,emissivemap_fragment:PT,emissivemap_pars_fragment:DT,colorspace_fragment:LT,colorspace_pars_fragment:FT,envmap_fragment:UT,envmap_common_pars_fragment:IT,envmap_pars_fragment:BT,envmap_pars_vertex:OT,envmap_physical_pars_fragment:jT,envmap_vertex:zT,fog_vertex:GT,fog_pars_vertex:kT,fog_fragment:VT,fog_pars_fragment:HT,gradientmap_pars_fragment:WT,lightmap_pars_fragment:$T,lights_lambert_fragment:XT,lights_lambert_pars_fragment:qT,lights_pars_begin:YT,lights_toon_fragment:KT,lights_toon_pars_fragment:ZT,lights_phong_fragment:QT,lights_phong_pars_fragment:JT,lights_physical_fragment:tb,lights_physical_pars_fragment:eb,lights_fragment_begin:ib,lights_fragment_maps:nb,lights_fragment_end:sb,logdepthbuf_fragment:rb,logdepthbuf_pars_fragment:ob,logdepthbuf_pars_vertex:ab,logdepthbuf_vertex:lb,map_fragment:cb,map_pars_fragment:hb,map_particle_fragment:ub,map_particle_pars_fragment:db,metalnessmap_fragment:fb,metalnessmap_pars_fragment:pb,morphinstance_vertex:mb,morphcolor_vertex:gb,morphnormal_vertex:_b,morphtarget_pars_vertex:xb,morphtarget_vertex:yb,normal_fragment_begin:vb,normal_fragment_maps:Sb,normal_pars_fragment:Mb,normal_pars_vertex:Tb,normal_vertex:bb,normalmap_pars_fragment:Eb,clearcoat_normal_fragment_begin:Ab,clearcoat_normal_fragment_maps:wb,clearcoat_pars_fragment:Rb,iridescence_pars_fragment:Cb,opaque_fragment:Nb,packing:Pb,premultiplied_alpha_fragment:Db,project_vertex:Lb,dithering_fragment:Fb,dithering_pars_fragment:Ub,roughnessmap_fragment:Ib,roughnessmap_pars_fragment:Bb,shadowmap_pars_fragment:Ob,shadowmap_pars_vertex:zb,shadowmap_vertex:Gb,shadowmask_pars_fragment:kb,skinbase_vertex:Vb,skinning_pars_vertex:Hb,skinning_vertex:Wb,skinnormal_vertex:$b,specularmap_fragment:Xb,specularmap_pars_fragment:qb,tonemapping_fragment:Yb,tonemapping_pars_fragment:jb,transmission_fragment:Kb,transmission_pars_fragment:Zb,uv_pars_fragment:Qb,uv_pars_vertex:Jb,uv_vertex:tE,worldpos_vertex:eE,background_vert:iE,background_frag:nE,backgroundCube_vert:sE,backgroundCube_frag:rE,cube_vert:oE,cube_frag:aE,depth_vert:lE,depth_frag:cE,distanceRGBA_vert:hE,distanceRGBA_frag:uE,equirect_vert:dE,equirect_frag:fE,linedashed_vert:pE,linedashed_frag:mE,meshbasic_vert:gE,meshbasic_frag:_E,meshlambert_vert:xE,meshlambert_frag:yE,meshmatcap_vert:vE,meshmatcap_frag:SE,meshnormal_vert:ME,meshnormal_frag:TE,meshphong_vert:bE,meshphong_frag:EE,meshphysical_vert:AE,meshphysical_frag:wE,meshtoon_vert:RE,meshtoon_frag:CE,points_vert:NE,points_frag:PE,shadow_vert:DE,shadow_frag:LE,sprite_vert:FE,sprite_frag:UE},mt={common:{diffuse:{value:new re(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Qt},alphaMap:{value:null},alphaMapTransform:{value:new Qt},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Qt}},envmap:{envMap:{value:null},envMapRotation:{value:new Qt},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Qt}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Qt}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Qt},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Qt},normalScale:{value:new ft(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Qt},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Qt}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Qt}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Qt}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new re(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new re(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Qt},alphaTest:{value:0},uvTransform:{value:new Qt}},sprite:{diffuse:{value:new re(16777215)},opacity:{value:1},center:{value:new ft(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Qt},alphaMap:{value:null},alphaMapTransform:{value:new Qt},alphaTest:{value:0}}},Cn={basic:{uniforms:Mi([mt.common,mt.specularmap,mt.envmap,mt.aomap,mt.lightmap,mt.fog]),vertexShader:Kt.meshbasic_vert,fragmentShader:Kt.meshbasic_frag},lambert:{uniforms:Mi([mt.common,mt.specularmap,mt.envmap,mt.aomap,mt.lightmap,mt.emissivemap,mt.bumpmap,mt.normalmap,mt.displacementmap,mt.fog,mt.lights,{emissive:{value:new re(0)}}]),vertexShader:Kt.meshlambert_vert,fragmentShader:Kt.meshlambert_frag},phong:{uniforms:Mi([mt.common,mt.specularmap,mt.envmap,mt.aomap,mt.lightmap,mt.emissivemap,mt.bumpmap,mt.normalmap,mt.displacementmap,mt.fog,mt.lights,{emissive:{value:new re(0)},specular:{value:new re(1118481)},shininess:{value:30}}]),vertexShader:Kt.meshphong_vert,fragmentShader:Kt.meshphong_frag},standard:{uniforms:Mi([mt.common,mt.envmap,mt.aomap,mt.lightmap,mt.emissivemap,mt.bumpmap,mt.normalmap,mt.displacementmap,mt.roughnessmap,mt.metalnessmap,mt.fog,mt.lights,{emissive:{value:new re(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Kt.meshphysical_vert,fragmentShader:Kt.meshphysical_frag},toon:{uniforms:Mi([mt.common,mt.aomap,mt.lightmap,mt.emissivemap,mt.bumpmap,mt.normalmap,mt.displacementmap,mt.gradientmap,mt.fog,mt.lights,{emissive:{value:new re(0)}}]),vertexShader:Kt.meshtoon_vert,fragmentShader:Kt.meshtoon_frag},matcap:{uniforms:Mi([mt.common,mt.bumpmap,mt.normalmap,mt.displacementmap,mt.fog,{matcap:{value:null}}]),vertexShader:Kt.meshmatcap_vert,fragmentShader:Kt.meshmatcap_frag},points:{uniforms:Mi([mt.points,mt.fog]),vertexShader:Kt.points_vert,fragmentShader:Kt.points_frag},dashed:{uniforms:Mi([mt.common,mt.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Kt.linedashed_vert,fragmentShader:Kt.linedashed_frag},depth:{uniforms:Mi([mt.common,mt.displacementmap]),vertexShader:Kt.depth_vert,fragmentShader:Kt.depth_frag},normal:{uniforms:Mi([mt.common,mt.bumpmap,mt.normalmap,mt.displacementmap,{opacity:{value:1}}]),vertexShader:Kt.meshnormal_vert,fragmentShader:Kt.meshnormal_frag},sprite:{uniforms:Mi([mt.sprite,mt.fog]),vertexShader:Kt.sprite_vert,fragmentShader:Kt.sprite_frag},background:{uniforms:{uvTransform:{value:new Qt},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Kt.background_vert,fragmentShader:Kt.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Qt}},vertexShader:Kt.backgroundCube_vert,fragmentShader:Kt.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Kt.cube_vert,fragmentShader:Kt.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Kt.equirect_vert,fragmentShader:Kt.equirect_frag},distanceRGBA:{uniforms:Mi([mt.common,mt.displacementmap,{referencePosition:{value:new P},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Kt.distanceRGBA_vert,fragmentShader:Kt.distanceRGBA_frag},shadow:{uniforms:Mi([mt.lights,mt.fog,{color:{value:new re(0)},opacity:{value:1}}]),vertexShader:Kt.shadow_vert,fragmentShader:Kt.shadow_frag}};Cn.physical={uniforms:Mi([Cn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Qt},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Qt},clearcoatNormalScale:{value:new ft(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Qt},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Qt},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Qt},sheen:{value:0},sheenColor:{value:new re(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Qt},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Qt},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Qt},transmissionSamplerSize:{value:new ft},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Qt},attenuationDistance:{value:0},attenuationColor:{value:new re(0)},specularColor:{value:new re(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Qt},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Qt},anisotropyVector:{value:new ft},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Qt}}]),vertexShader:Kt.meshphysical_vert,fragmentShader:Kt.meshphysical_frag};const ec={r:0,b:0,g:0},gr=new rr,IE=new Pe;function BE(r,t,e,i,n,s,o){const a=new re(0);let l=s===!0?0:1,c,h,u=null,d=0,f=null;function p(y){let v=y.isScene===!0?y.background:null;return v&&v.isTexture&&(v=(y.backgroundBlurriness>0?e:t).get(v)),v}function _(y){let v=!1;const x=p(y);x===null?m(a,l):x&&x.isColor&&(m(x,1),v=!0);const C=r.xr.getEnvironmentBlendMode();C==="additive"?i.buffers.color.setClear(0,0,0,1,o):C==="alpha-blend"&&i.buffers.color.setClear(0,0,0,0,o),(r.autoClear||v)&&(i.buffers.depth.setTest(!0),i.buffers.depth.setMask(!0),i.buffers.color.setMask(!0),r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil))}function g(y,v){const x=p(v);x&&(x.isCubeTexture||x.mapping===Uh)?(h===void 0&&(h=new Pn(new Fp(1,1,1),new Un({name:"BackgroundCubeMaterial",uniforms:aa(Cn.backgroundCube.uniforms),vertexShader:Cn.backgroundCube.vertexShader,fragmentShader:Cn.backgroundCube.fragmentShader,side:Fi,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),h.geometry.deleteAttribute("uv"),h.onBeforeRender=function(C,A,E){this.matrixWorld.copyPosition(E.matrixWorld)},Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(h)),gr.copy(v.backgroundRotation),gr.x*=-1,gr.y*=-1,gr.z*=-1,x.isCubeTexture&&x.isRenderTargetTexture===!1&&(gr.y*=-1,gr.z*=-1),h.material.uniforms.envMap.value=x,h.material.uniforms.flipEnvMap.value=x.isCubeTexture&&x.isRenderTargetTexture===!1?-1:1,h.material.uniforms.backgroundBlurriness.value=v.backgroundBlurriness,h.material.uniforms.backgroundIntensity.value=v.backgroundIntensity,h.material.uniforms.backgroundRotation.value.setFromMatrix4(IE.makeRotationFromEuler(gr)),h.material.toneMapped=ce.getTransfer(x.colorSpace)!==Me,(u!==x||d!==x.version||f!==r.toneMapping)&&(h.material.needsUpdate=!0,u=x,d=x.version,f=r.toneMapping),h.layers.enableAll(),y.unshift(h,h.geometry,h.material,0,0,null)):x&&x.isTexture&&(c===void 0&&(c=new Pn(new zh(2,2),new Un({name:"BackgroundMaterial",uniforms:aa(Cn.background.uniforms),vertexShader:Cn.background.vertexShader,fragmentShader:Cn.background.fragmentShader,side:nr,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(c)),c.material.uniforms.t2D.value=x,c.material.uniforms.backgroundIntensity.value=v.backgroundIntensity,c.material.toneMapped=ce.getTransfer(x.colorSpace)!==Me,x.matrixAutoUpdate===!0&&x.updateMatrix(),c.material.uniforms.uvTransform.value.copy(x.matrix),(u!==x||d!==x.version||f!==r.toneMapping)&&(c.material.needsUpdate=!0,u=x,d=x.version,f=r.toneMapping),c.layers.enableAll(),y.unshift(c,c.geometry,c.material,0,0,null))}function m(y,v){y.getRGB(ec,E0(r)),i.buffers.color.setClear(ec.r,ec.g,ec.b,v,o)}return{getClearColor:function(){return a},setClearColor:function(y,v=1){a.set(y),l=v,m(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(y){l=y,m(a,l)},render:_,addToRenderList:g}}function OE(r,t){const e=r.getParameter(r.MAX_VERTEX_ATTRIBS),i={},n=d(null);let s=n,o=!1;function a(S,N,G,B,V){let Q=!1;const q=u(B,G,N);s!==q&&(s=q,c(s.object)),Q=f(S,B,G,V),Q&&p(S,B,G,V),V!==null&&t.update(V,r.ELEMENT_ARRAY_BUFFER),(Q||o)&&(o=!1,x(S,N,G,B),V!==null&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t.get(V).buffer))}function l(){return r.createVertexArray()}function c(S){return r.bindVertexArray(S)}function h(S){return r.deleteVertexArray(S)}function u(S,N,G){const B=G.wireframe===!0;let V=i[S.id];V===void 0&&(V={},i[S.id]=V);let Q=V[N.id];Q===void 0&&(Q={},V[N.id]=Q);let q=Q[B];return q===void 0&&(q=d(l()),Q[B]=q),q}function d(S){const N=[],G=[],B=[];for(let V=0;V<e;V++)N[V]=0,G[V]=0,B[V]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:N,enabledAttributes:G,attributeDivisors:B,object:S,attributes:{},index:null}}function f(S,N,G,B){const V=s.attributes,Q=N.attributes;let q=0;const rt=G.getAttributes();for(const $ in rt)if(rt[$].location>=0){const dt=V[$];let Tt=Q[$];if(Tt===void 0&&($==="instanceMatrix"&&S.instanceMatrix&&(Tt=S.instanceMatrix),$==="instanceColor"&&S.instanceColor&&(Tt=S.instanceColor)),dt===void 0||dt.attribute!==Tt||Tt&&dt.data!==Tt.data)return!0;q++}return s.attributesNum!==q||s.index!==B}function p(S,N,G,B){const V={},Q=N.attributes;let q=0;const rt=G.getAttributes();for(const $ in rt)if(rt[$].location>=0){let dt=Q[$];dt===void 0&&($==="instanceMatrix"&&S.instanceMatrix&&(dt=S.instanceMatrix),$==="instanceColor"&&S.instanceColor&&(dt=S.instanceColor));const Tt={};Tt.attribute=dt,dt&&dt.data&&(Tt.data=dt.data),V[$]=Tt,q++}s.attributes=V,s.attributesNum=q,s.index=B}function _(){const S=s.newAttributes;for(let N=0,G=S.length;N<G;N++)S[N]=0}function g(S){m(S,0)}function m(S,N){const G=s.newAttributes,B=s.enabledAttributes,V=s.attributeDivisors;G[S]=1,B[S]===0&&(r.enableVertexAttribArray(S),B[S]=1),V[S]!==N&&(r.vertexAttribDivisor(S,N),V[S]=N)}function y(){const S=s.newAttributes,N=s.enabledAttributes;for(let G=0,B=N.length;G<B;G++)N[G]!==S[G]&&(r.disableVertexAttribArray(G),N[G]=0)}function v(S,N,G,B,V,Q,q){q===!0?r.vertexAttribIPointer(S,N,G,V,Q):r.vertexAttribPointer(S,N,G,B,V,Q)}function x(S,N,G,B){_();const V=B.attributes,Q=G.getAttributes(),q=N.defaultAttributeValues;for(const rt in Q){const $=Q[rt];if($.location>=0){let ot=V[rt];if(ot===void 0&&(rt==="instanceMatrix"&&S.instanceMatrix&&(ot=S.instanceMatrix),rt==="instanceColor"&&S.instanceColor&&(ot=S.instanceColor)),ot!==void 0){const dt=ot.normalized,Tt=ot.itemSize,Gt=t.get(ot);if(Gt===void 0)continue;const he=Gt.buffer,J=Gt.type,lt=Gt.bytesPerElement,Nt=J===r.INT||J===r.UNSIGNED_INT||ot.gpuType===Ap;if(ot.isInterleavedBufferAttribute){const xt=ot.data,Bt=xt.stride,Wt=ot.offset;if(xt.isInstancedInterleavedBuffer){for(let te=0;te<$.locationSize;te++)m($.location+te,xt.meshPerAttribute);S.isInstancedMesh!==!0&&B._maxInstanceCount===void 0&&(B._maxInstanceCount=xt.meshPerAttribute*xt.count)}else for(let te=0;te<$.locationSize;te++)g($.location+te);r.bindBuffer(r.ARRAY_BUFFER,he);for(let te=0;te<$.locationSize;te++)v($.location+te,Tt/$.locationSize,J,dt,Bt*lt,(Wt+Tt/$.locationSize*te)*lt,Nt)}else{if(ot.isInstancedBufferAttribute){for(let xt=0;xt<$.locationSize;xt++)m($.location+xt,ot.meshPerAttribute);S.isInstancedMesh!==!0&&B._maxInstanceCount===void 0&&(B._maxInstanceCount=ot.meshPerAttribute*ot.count)}else for(let xt=0;xt<$.locationSize;xt++)g($.location+xt);r.bindBuffer(r.ARRAY_BUFFER,he);for(let xt=0;xt<$.locationSize;xt++)v($.location+xt,Tt/$.locationSize,J,dt,Tt*lt,Tt/$.locationSize*xt*lt,Nt)}}else if(q!==void 0){const dt=q[rt];if(dt!==void 0)switch(dt.length){case 2:r.vertexAttrib2fv($.location,dt);break;case 3:r.vertexAttrib3fv($.location,dt);break;case 4:r.vertexAttrib4fv($.location,dt);break;default:r.vertexAttrib1fv($.location,dt)}}}}y()}function C(){w();for(const S in i){const N=i[S];for(const G in N){const B=N[G];for(const V in B)h(B[V].object),delete B[V];delete N[G]}delete i[S]}}function A(S){if(i[S.id]===void 0)return;const N=i[S.id];for(const G in N){const B=N[G];for(const V in B)h(B[V].object),delete B[V];delete N[G]}delete i[S.id]}function E(S){for(const N in i){const G=i[N];if(G[S.id]===void 0)continue;const B=G[S.id];for(const V in B)h(B[V].object),delete B[V];delete G[S.id]}}function w(){T(),o=!0,s!==n&&(s=n,c(s.object))}function T(){n.geometry=null,n.program=null,n.wireframe=!1}return{setup:a,reset:w,resetDefaultState:T,dispose:C,releaseStatesOfGeometry:A,releaseStatesOfProgram:E,initAttributes:_,enableAttribute:g,disableUnusedAttributes:y}}function zE(r,t,e){let i;function n(c){i=c}function s(c,h){r.drawArrays(i,c,h),e.update(h,i,1)}function o(c,h,u){u!==0&&(r.drawArraysInstanced(i,c,h,u),e.update(h,i,u))}function a(c,h,u){if(u===0)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(i,c,0,h,0,u);let f=0;for(let p=0;p<u;p++)f+=h[p];e.update(f,i,1)}function l(c,h,u,d){if(u===0)return;const f=t.get("WEBGL_multi_draw");if(f===null)for(let p=0;p<c.length;p++)o(c[p],h[p],d[p]);else{f.multiDrawArraysInstancedWEBGL(i,c,0,h,0,d,0,u);let p=0;for(let _=0;_<u;_++)p+=h[_]*d[_];e.update(p,i,1)}}this.setMode=n,this.render=s,this.renderInstances=o,this.renderMultiDraw=a,this.renderMultiDrawInstances=l}function GE(r,t,e,i){let n;function s(){if(n!==void 0)return n;if(t.has("EXT_texture_filter_anisotropic")===!0){const E=t.get("EXT_texture_filter_anisotropic");n=r.getParameter(E.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else n=0;return n}function o(E){return!(E!==yn&&i.convert(E)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT))}function a(E){const w=E===ma&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(E!==Ss&&i.convert(E)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE)&&E!==hs&&!w)}function l(E){if(E==="highp"){if(r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.HIGH_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.HIGH_FLOAT).precision>0)return"highp";E="mediump"}return E==="mediump"&&r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.MEDIUM_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let c=e.precision!==void 0?e.precision:"highp";const h=l(c);h!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",h,"instead."),c=h);const u=e.logarithmicDepthBuffer===!0,d=e.reverseDepthBuffer===!0&&t.has("EXT_clip_control"),f=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS),p=r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS),_=r.getParameter(r.MAX_TEXTURE_SIZE),g=r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE),m=r.getParameter(r.MAX_VERTEX_ATTRIBS),y=r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS),v=r.getParameter(r.MAX_VARYING_VECTORS),x=r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS),C=p>0,A=r.getParameter(r.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:s,getMaxPrecision:l,textureFormatReadable:o,textureTypeReadable:a,precision:c,logarithmicDepthBuffer:u,reverseDepthBuffer:d,maxTextures:f,maxVertexTextures:p,maxTextureSize:_,maxCubemapSize:g,maxAttributes:m,maxVertexUniforms:y,maxVaryings:v,maxFragmentUniforms:x,vertexTextures:C,maxSamples:A}}function kE(r){const t=this;let e=null,i=0,n=!1,s=!1;const o=new es,a=new Qt,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(u,d){const f=u.length!==0||d||i!==0||n;return n=d,i=u.length,f},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1},this.setGlobalState=function(u,d){e=h(u,d,0)},this.setState=function(u,d,f){const p=u.clippingPlanes,_=u.clipIntersection,g=u.clipShadows,m=r.get(u);if(!n||p===null||p.length===0||s&&!g)s?h(null):c();else{const y=s?0:i,v=y*4;let x=m.clippingState||null;l.value=x,x=h(p,d,v,f);for(let C=0;C!==v;++C)x[C]=e[C];m.clippingState=x,this.numIntersection=_?this.numPlanes:0,this.numPlanes+=y}};function c(){l.value!==e&&(l.value=e,l.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0}function h(u,d,f,p){const _=u!==null?u.length:0;let g=null;if(_!==0){if(g=l.value,p!==!0||g===null){const m=f+_*4,y=d.matrixWorldInverse;a.getNormalMatrix(y),(g===null||g.length<m)&&(g=new Float32Array(m));for(let v=0,x=f;v!==_;++v,x+=4)o.copy(u[v]).applyMatrix4(y,a),o.normal.toArray(g,x),g[x+3]=o.constant}l.value=g,l.needsUpdate=!0}return t.numPlanes=_,t.numIntersection=0,g}}function VE(r){let t=new WeakMap;function e(o,a){return a===sf?o.mapping=na:a===rf&&(o.mapping=sa),o}function i(o){if(o&&o.isTexture){const a=o.mapping;if(a===sf||a===rf)if(t.has(o)){const l=t.get(o).texture;return e(l,o.mapping)}else{const l=o.image;if(l&&l.height>0){const c=new JM(l.height);return c.fromEquirectangularTexture(r,o),t.set(o,c),o.addEventListener("dispose",n),e(c.texture,o.mapping)}else return null}}return o}function n(o){const a=o.target;a.removeEventListener("dispose",n);const l=t.get(a);l!==void 0&&(t.delete(a),l.dispose())}function s(){t=new WeakMap}return{get:i,dispose:s}}let Ip=class extends w0{constructor(t=-1,e=1,i=1,n=-1,s=.1,o=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=i,this.bottom=n,this.near=s,this.far=o,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,i,n,s,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let s=i-t,o=i+t,a=n+e,l=n-e;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,o=s+c*this.view.width,a-=h*this.view.offsetY,l=a-h*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}};const Bo=4,pg=[.125,.215,.35,.446,.526,.582],Rr=20,wu=new Ip,mg=new re;let Ru=null,Cu=0,Nu=0,Pu=!1;const Tr=(1+Math.sqrt(5))/2,ho=1/Tr,gg=[new P(-Tr,ho,0),new P(Tr,ho,0),new P(-ho,0,Tr),new P(ho,0,Tr),new P(0,Tr,-ho),new P(0,Tr,ho),new P(-1,1,-1),new P(1,1,-1),new P(-1,1,1),new P(1,1,1)];let _g=class{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,i=.1,n=100){Ru=this._renderer.getRenderTarget(),Cu=this._renderer.getActiveCubeFace(),Nu=this._renderer.getActiveMipmapLevel(),Pu=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(t,i,n,s),e>0&&this._blur(s,0,0,e),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=vg(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=yg(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Ru,Cu,Nu),this._renderer.xr.enabled=Pu,t.scissorTest=!1,ic(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===na||t.mapping===sa?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Ru=this._renderer.getRenderTarget(),Cu=this._renderer.getActiveCubeFace(),Nu=this._renderer.getActiveMipmapLevel(),Pu=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const i=e||this._allocateTargets();return this._textureToCubeUV(t,i),this._applyPMREM(i),this._cleanup(i),i}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,i={magFilter:Nn,minFilter:Nn,generateMipmaps:!1,type:ma,format:yn,colorSpace:ga,depthBuffer:!1},n=xg(t,e,i);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=xg(t,e,i);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=HE(s)),this._blurMaterial=WE(s,t,e)}return n}_compileMaterial(t){const e=new Pn(this._lodPlanes[0],t);this._renderer.compile(e,wu)}_sceneToCubeUV(t,e,i,n){const a=new pn(90,1,e,i),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],h=this._renderer,u=h.autoClear,d=h.toneMapping;h.getClearColor(mg),h.toneMapping=Zs,h.autoClear=!1;const f=new v0({name:"PMREM.Background",side:Fi,depthWrite:!1,depthTest:!1}),p=new Pn(new Fp,f);let _=!1;const g=t.background;g?g.isColor&&(f.color.copy(g),t.background=null,_=!0):(f.color.copy(mg),_=!0);for(let m=0;m<6;m++){const y=m%3;y===0?(a.up.set(0,l[m],0),a.lookAt(c[m],0,0)):y===1?(a.up.set(0,0,l[m]),a.lookAt(0,c[m],0)):(a.up.set(0,l[m],0),a.lookAt(0,0,c[m]));const v=this._cubeSize;ic(n,y*v,m>2?v:0,v,v),h.setRenderTarget(n),_&&h.render(p,a),h.render(t,a)}p.geometry.dispose(),p.material.dispose(),h.toneMapping=d,h.autoClear=u,t.background=g}_textureToCubeUV(t,e){const i=this._renderer,n=t.mapping===na||t.mapping===sa;n?(this._cubemapMaterial===null&&(this._cubemapMaterial=vg()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=yg());const s=n?this._cubemapMaterial:this._equirectMaterial,o=new Pn(this._lodPlanes[0],s),a=s.uniforms;a.envMap.value=t;const l=this._cubeSize;ic(e,0,0,3*l,2*l),i.setRenderTarget(e),i.render(o,wu)}_applyPMREM(t){const e=this._renderer,i=e.autoClear;e.autoClear=!1;const n=this._lodPlanes.length;for(let s=1;s<n;s++){const o=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),a=gg[(n-s-1)%gg.length];this._blur(t,s-1,s,o,a)}e.autoClear=i}_blur(t,e,i,n,s){const o=this._pingPongRenderTarget;this._halfBlur(t,o,e,i,n,"latitudinal",s),this._halfBlur(o,t,i,i,n,"longitudinal",s)}_halfBlur(t,e,i,n,s,o,a){const l=this._renderer,c=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,u=new Pn(this._lodPlanes[n],c),d=c.uniforms,f=this._sizeLods[i]-1,p=isFinite(s)?Math.PI/(2*f):2*Math.PI/(2*Rr-1),_=s/p,g=isFinite(s)?1+Math.floor(h*_):Rr;g>Rr&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${g} samples when the maximum is set to ${Rr}`);const m=[];let y=0;for(let E=0;E<Rr;++E){const w=E/_,T=Math.exp(-w*w/2);m.push(T),E===0?y+=T:E<g&&(y+=2*T)}for(let E=0;E<m.length;E++)m[E]=m[E]/y;d.envMap.value=t.texture,d.samples.value=g,d.weights.value=m,d.latitudinal.value=o==="latitudinal",a&&(d.poleAxis.value=a);const{_lodMax:v}=this;d.dTheta.value=p,d.mipInt.value=v-i;const x=this._sizeLods[n],C=3*x*(n>v-Bo?n-v+Bo:0),A=4*(this._cubeSize-x);ic(e,C,A,3*x,2*x),l.setRenderTarget(e),l.render(u,wu)}};function HE(r){const t=[],e=[],i=[];let n=r;const s=r-Bo+1+pg.length;for(let o=0;o<s;o++){const a=Math.pow(2,n);e.push(a);let l=1/a;o>r-Bo?l=pg[o-r+Bo-1]:o===0&&(l=0),i.push(l);const c=1/(a-2),h=-c,u=1+c,d=[h,h,u,h,u,u,h,h,u,u,h,u],f=6,p=6,_=3,g=2,m=1,y=new Float32Array(_*p*f),v=new Float32Array(g*p*f),x=new Float32Array(m*p*f);for(let A=0;A<f;A++){const E=A%3*2/3-1,w=A>2?0:-1,T=[E,w,0,E+2/3,w,0,E+2/3,w+1,0,E,w,0,E+2/3,w+1,0,E,w+1,0];y.set(T,_*p*A),v.set(d,g*p*A);const S=[A,A,A,A,A,A];x.set(S,m*p*A)}const C=new An;C.setAttribute("position",new Mn(y,_)),C.setAttribute("uv",new Mn(v,g)),C.setAttribute("faceIndex",new Mn(x,m)),t.push(C),n>Bo&&n--}return{lodPlanes:t,sizeLods:e,sigmas:i}}function xg(r,t,e){const i=new sr(r,t,e);return i.texture.mapping=Uh,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function ic(r,t,e,i,n){r.viewport.set(t,e,i,n),r.scissor.set(t,e,i,n)}function WE(r,t,e){const i=new Float32Array(Rr),n=new P(0,1,0);return new Un({name:"SphericalGaussianBlur",defines:{n:Rr,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/e,CUBEUV_MAX_MIP:`${r}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:n}},vertexShader:Bp(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:ds,depthTest:!1,depthWrite:!1})}function yg(){return new Un({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Bp(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:ds,depthTest:!1,depthWrite:!1})}function vg(){return new Un({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Bp(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:ds,depthTest:!1,depthWrite:!1})}function Bp(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function $E(r){let t=new WeakMap,e=null;function i(a){if(a&&a.isTexture){const l=a.mapping,c=l===sf||l===rf,h=l===na||l===sa;if(c||h){let u=t.get(a);const d=u!==void 0?u.texture.pmremVersion:0;if(a.isRenderTargetTexture&&a.pmremVersion!==d)return e===null&&(e=new _g(r)),u=c?e.fromEquirectangular(a,u):e.fromCubemap(a,u),u.texture.pmremVersion=a.pmremVersion,t.set(a,u),u.texture;if(u!==void 0)return u.texture;{const f=a.image;return c&&f&&f.height>0||h&&f&&n(f)?(e===null&&(e=new _g(r)),u=c?e.fromEquirectangular(a):e.fromCubemap(a),u.texture.pmremVersion=a.pmremVersion,t.set(a,u),a.addEventListener("dispose",s),u.texture):null}}}return a}function n(a){let l=0;const c=6;for(let h=0;h<c;h++)a[h]!==void 0&&l++;return l===c}function s(a){const l=a.target;l.removeEventListener("dispose",s);const c=t.get(l);c!==void 0&&(t.delete(l),c.dispose())}function o(){t=new WeakMap,e!==null&&(e.dispose(),e=null)}return{get:i,dispose:o}}function XE(r){const t={};function e(i){if(t[i]!==void 0)return t[i];let n;switch(i){case"WEBGL_depth_texture":n=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=r.getExtension(i)}return t[i]=n,n}return{has:function(i){return e(i)!==null},init:function(){e("EXT_color_buffer_float"),e("WEBGL_clip_cull_distance"),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float"),e("WEBGL_multisampled_render_to_texture"),e("WEBGL_render_shared_exponent")},get:function(i){const n=e(i);return n===null&&qa("THREE.WebGLRenderer: "+i+" extension not supported."),n}}}function qE(r,t,e,i){const n={},s=new WeakMap;function o(u){const d=u.target;d.index!==null&&t.remove(d.index);for(const p in d.attributes)t.remove(d.attributes[p]);for(const p in d.morphAttributes){const _=d.morphAttributes[p];for(let g=0,m=_.length;g<m;g++)t.remove(_[g])}d.removeEventListener("dispose",o),delete n[d.id];const f=s.get(d);f&&(t.remove(f),s.delete(d)),i.releaseStatesOfGeometry(d),d.isInstancedBufferGeometry===!0&&delete d._maxInstanceCount,e.memory.geometries--}function a(u,d){return n[d.id]===!0||(d.addEventListener("dispose",o),n[d.id]=!0,e.memory.geometries++),d}function l(u){const d=u.attributes;for(const p in d)t.update(d[p],r.ARRAY_BUFFER);const f=u.morphAttributes;for(const p in f){const _=f[p];for(let g=0,m=_.length;g<m;g++)t.update(_[g],r.ARRAY_BUFFER)}}function c(u){const d=[],f=u.index,p=u.attributes.position;let _=0;if(f!==null){const y=f.array;_=f.version;for(let v=0,x=y.length;v<x;v+=3){const C=y[v+0],A=y[v+1],E=y[v+2];d.push(C,A,A,E,E,C)}}else if(p!==void 0){const y=p.array;_=p.version;for(let v=0,x=y.length/3-1;v<x;v+=3){const C=v+0,A=v+1,E=v+2;d.push(C,A,A,E,E,C)}}else return;const g=new(f0(d)?M0:S0)(d,1);g.version=_;const m=s.get(u);m&&t.remove(m),s.set(u,g)}function h(u){const d=s.get(u);if(d){const f=u.index;f!==null&&d.version<f.version&&c(u)}else c(u);return s.get(u)}return{get:a,update:l,getWireframeAttribute:h}}function YE(r,t,e){let i;function n(d){i=d}let s,o;function a(d){s=d.type,o=d.bytesPerElement}function l(d,f){r.drawElements(i,f,s,d*o),e.update(f,i,1)}function c(d,f,p){p!==0&&(r.drawElementsInstanced(i,f,s,d*o,p),e.update(f,i,p))}function h(d,f,p){if(p===0)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(i,f,0,s,d,0,p);let g=0;for(let m=0;m<p;m++)g+=f[m];e.update(g,i,1)}function u(d,f,p,_){if(p===0)return;const g=t.get("WEBGL_multi_draw");if(g===null)for(let m=0;m<d.length;m++)c(d[m]/o,f[m],_[m]);else{g.multiDrawElementsInstancedWEBGL(i,f,0,s,d,0,_,0,p);let m=0;for(let y=0;y<p;y++)m+=f[y]*_[y];e.update(m,i,1)}}this.setMode=n,this.setIndex=a,this.render=l,this.renderInstances=c,this.renderMultiDraw=h,this.renderMultiDrawInstances=u}function jE(r){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function i(s,o,a){switch(e.calls++,o){case r.TRIANGLES:e.triangles+=a*(s/3);break;case r.LINES:e.lines+=a*(s/2);break;case r.LINE_STRIP:e.lines+=a*(s-1);break;case r.LINE_LOOP:e.lines+=a*s;break;case r.POINTS:e.points+=a*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function n(){e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:n,update:i}}function KE(r,t,e){const i=new WeakMap,n=new qe;function s(o,a,l){const c=o.morphTargetInfluences,h=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color,u=h!==void 0?h.length:0;let d=i.get(a);if(d===void 0||d.count!==u){let T=function(){E.dispose(),i.delete(a),a.removeEventListener("dispose",T)};d!==void 0&&d.texture.dispose();const f=a.morphAttributes.position!==void 0,p=a.morphAttributes.normal!==void 0,_=a.morphAttributes.color!==void 0,g=a.morphAttributes.position||[],m=a.morphAttributes.normal||[],y=a.morphAttributes.color||[];let v=0;f===!0&&(v=1),p===!0&&(v=2),_===!0&&(v=3);let x=a.attributes.position.count*v,C=1;x>t.maxTextureSize&&(C=Math.ceil(x/t.maxTextureSize),x=t.maxTextureSize);const A=new Float32Array(x*C*4*u),E=new g0(A,x,C,u);E.type=hs,E.needsUpdate=!0;const w=v*4;for(let S=0;S<u;S++){const N=g[S],G=m[S],B=y[S],V=x*C*4*S;for(let Q=0;Q<N.count;Q++){const q=Q*w;f===!0&&(n.fromBufferAttribute(N,Q),A[V+q+0]=n.x,A[V+q+1]=n.y,A[V+q+2]=n.z,A[V+q+3]=0),p===!0&&(n.fromBufferAttribute(G,Q),A[V+q+4]=n.x,A[V+q+5]=n.y,A[V+q+6]=n.z,A[V+q+7]=0),_===!0&&(n.fromBufferAttribute(B,Q),A[V+q+8]=n.x,A[V+q+9]=n.y,A[V+q+10]=n.z,A[V+q+11]=B.itemSize===4?n.w:1)}}d={count:u,texture:E,size:new ft(x,C)},i.set(a,d),a.addEventListener("dispose",T)}if(o.isInstancedMesh===!0&&o.morphTexture!==null)l.getUniforms().setValue(r,"morphTexture",o.morphTexture,e);else{let f=0;for(let _=0;_<c.length;_++)f+=c[_];const p=a.morphTargetsRelative?1:1-f;l.getUniforms().setValue(r,"morphTargetBaseInfluence",p),l.getUniforms().setValue(r,"morphTargetInfluences",c)}l.getUniforms().setValue(r,"morphTargetsTexture",d.texture,e),l.getUniforms().setValue(r,"morphTargetsTextureSize",d.size)}return{update:s}}function ZE(r,t,e,i){let n=new WeakMap;function s(l){const c=i.render.frame,h=l.geometry,u=t.get(l,h);if(n.get(u)!==c&&(t.update(u),n.set(u,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",a)===!1&&l.addEventListener("dispose",a),n.get(l)!==c&&(e.update(l.instanceMatrix,r.ARRAY_BUFFER),l.instanceColor!==null&&e.update(l.instanceColor,r.ARRAY_BUFFER),n.set(l,c))),l.isSkinnedMesh){const d=l.skeleton;n.get(d)!==c&&(d.update(),n.set(d,c))}return u}function o(){n=new WeakMap}function a(l){const c=l.target;c.removeEventListener("dispose",a),e.remove(c.instanceMatrix),c.instanceColor!==null&&e.remove(c.instanceColor)}return{update:s,dispose:o}}let N0=class extends sn{constructor(t,e,i,n,s,o,a,l,c,h=Xo){if(h!==Xo&&h!==oa)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");i===void 0&&h===Xo&&(i=Br),i===void 0&&h===oa&&(i=ra),super(null,n,s,o,a,l,h,i,c),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=a!==void 0?a:Sn,this.minFilter=l!==void 0?l:Sn,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}};const P0=new sn,Sg=new N0(1,1),D0=new g0,L0=new OM,F0=new R0,Mg=[],Tg=[],bg=new Float32Array(16),Eg=new Float32Array(9),Ag=new Float32Array(4);function _a(r,t,e){const i=r[0];if(i<=0||i>0)return r;const n=t*e;let s=Mg[n];if(s===void 0&&(s=new Float32Array(n),Mg[n]=s),t!==0){i.toArray(s,0);for(let o=1,a=0;o!==t;++o)a+=e,r[o].toArray(s,a)}return s}function Je(r,t){if(r.length!==t.length)return!1;for(let e=0,i=r.length;e<i;e++)if(r[e]!==t[e])return!1;return!0}function ti(r,t){for(let e=0,i=t.length;e<i;e++)r[e]=t[e]}function Gh(r,t){let e=Tg[t];e===void 0&&(e=new Int32Array(t),Tg[t]=e);for(let i=0;i!==t;++i)e[i]=r.allocateTextureUnit();return e}function QE(r,t){const e=this.cache;e[0]!==t&&(r.uniform1f(this.addr,t),e[0]=t)}function JE(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(Je(e,t))return;r.uniform2fv(this.addr,t),ti(e,t)}}function tA(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(r.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(Je(e,t))return;r.uniform3fv(this.addr,t),ti(e,t)}}function eA(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(Je(e,t))return;r.uniform4fv(this.addr,t),ti(e,t)}}function iA(r,t){const e=this.cache,i=t.elements;if(i===void 0){if(Je(e,t))return;r.uniformMatrix2fv(this.addr,!1,t),ti(e,t)}else{if(Je(e,i))return;Ag.set(i),r.uniformMatrix2fv(this.addr,!1,Ag),ti(e,i)}}function nA(r,t){const e=this.cache,i=t.elements;if(i===void 0){if(Je(e,t))return;r.uniformMatrix3fv(this.addr,!1,t),ti(e,t)}else{if(Je(e,i))return;Eg.set(i),r.uniformMatrix3fv(this.addr,!1,Eg),ti(e,i)}}function sA(r,t){const e=this.cache,i=t.elements;if(i===void 0){if(Je(e,t))return;r.uniformMatrix4fv(this.addr,!1,t),ti(e,t)}else{if(Je(e,i))return;bg.set(i),r.uniformMatrix4fv(this.addr,!1,bg),ti(e,i)}}function rA(r,t){const e=this.cache;e[0]!==t&&(r.uniform1i(this.addr,t),e[0]=t)}function oA(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2i(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(Je(e,t))return;r.uniform2iv(this.addr,t),ti(e,t)}}function aA(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3i(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(Je(e,t))return;r.uniform3iv(this.addr,t),ti(e,t)}}function lA(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4i(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(Je(e,t))return;r.uniform4iv(this.addr,t),ti(e,t)}}function cA(r,t){const e=this.cache;e[0]!==t&&(r.uniform1ui(this.addr,t),e[0]=t)}function hA(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(r.uniform2ui(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(Je(e,t))return;r.uniform2uiv(this.addr,t),ti(e,t)}}function uA(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(r.uniform3ui(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(Je(e,t))return;r.uniform3uiv(this.addr,t),ti(e,t)}}function dA(r,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(r.uniform4ui(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(Je(e,t))return;r.uniform4uiv(this.addr,t),ti(e,t)}}function fA(r,t,e){const i=this.cache,n=e.allocateTextureUnit();i[0]!==n&&(r.uniform1i(this.addr,n),i[0]=n);let s;this.type===r.SAMPLER_2D_SHADOW?(Sg.compareFunction=h0,s=Sg):s=P0,e.setTexture2D(t||s,n)}function pA(r,t,e){const i=this.cache,n=e.allocateTextureUnit();i[0]!==n&&(r.uniform1i(this.addr,n),i[0]=n),e.setTexture3D(t||L0,n)}function mA(r,t,e){const i=this.cache,n=e.allocateTextureUnit();i[0]!==n&&(r.uniform1i(this.addr,n),i[0]=n),e.setTextureCube(t||F0,n)}function gA(r,t,e){const i=this.cache,n=e.allocateTextureUnit();i[0]!==n&&(r.uniform1i(this.addr,n),i[0]=n),e.setTexture2DArray(t||D0,n)}function _A(r){switch(r){case 5126:return QE;case 35664:return JE;case 35665:return tA;case 35666:return eA;case 35674:return iA;case 35675:return nA;case 35676:return sA;case 5124:case 35670:return rA;case 35667:case 35671:return oA;case 35668:case 35672:return aA;case 35669:case 35673:return lA;case 5125:return cA;case 36294:return hA;case 36295:return uA;case 36296:return dA;case 35678:case 36198:case 36298:case 36306:case 35682:return fA;case 35679:case 36299:case 36307:return pA;case 35680:case 36300:case 36308:case 36293:return mA;case 36289:case 36303:case 36311:case 36292:return gA}}function xA(r,t){r.uniform1fv(this.addr,t)}function yA(r,t){const e=_a(t,this.size,2);r.uniform2fv(this.addr,e)}function vA(r,t){const e=_a(t,this.size,3);r.uniform3fv(this.addr,e)}function SA(r,t){const e=_a(t,this.size,4);r.uniform4fv(this.addr,e)}function MA(r,t){const e=_a(t,this.size,4);r.uniformMatrix2fv(this.addr,!1,e)}function TA(r,t){const e=_a(t,this.size,9);r.uniformMatrix3fv(this.addr,!1,e)}function bA(r,t){const e=_a(t,this.size,16);r.uniformMatrix4fv(this.addr,!1,e)}function EA(r,t){r.uniform1iv(this.addr,t)}function AA(r,t){r.uniform2iv(this.addr,t)}function wA(r,t){r.uniform3iv(this.addr,t)}function RA(r,t){r.uniform4iv(this.addr,t)}function CA(r,t){r.uniform1uiv(this.addr,t)}function NA(r,t){r.uniform2uiv(this.addr,t)}function PA(r,t){r.uniform3uiv(this.addr,t)}function DA(r,t){r.uniform4uiv(this.addr,t)}function LA(r,t,e){const i=this.cache,n=t.length,s=Gh(e,n);Je(i,s)||(r.uniform1iv(this.addr,s),ti(i,s));for(let o=0;o!==n;++o)e.setTexture2D(t[o]||P0,s[o])}function FA(r,t,e){const i=this.cache,n=t.length,s=Gh(e,n);Je(i,s)||(r.uniform1iv(this.addr,s),ti(i,s));for(let o=0;o!==n;++o)e.setTexture3D(t[o]||L0,s[o])}function UA(r,t,e){const i=this.cache,n=t.length,s=Gh(e,n);Je(i,s)||(r.uniform1iv(this.addr,s),ti(i,s));for(let o=0;o!==n;++o)e.setTextureCube(t[o]||F0,s[o])}function IA(r,t,e){const i=this.cache,n=t.length,s=Gh(e,n);Je(i,s)||(r.uniform1iv(this.addr,s),ti(i,s));for(let o=0;o!==n;++o)e.setTexture2DArray(t[o]||D0,s[o])}function BA(r){switch(r){case 5126:return xA;case 35664:return yA;case 35665:return vA;case 35666:return SA;case 35674:return MA;case 35675:return TA;case 35676:return bA;case 5124:case 35670:return EA;case 35667:case 35671:return AA;case 35668:case 35672:return wA;case 35669:case 35673:return RA;case 5125:return CA;case 36294:return NA;case 36295:return PA;case 36296:return DA;case 35678:case 36198:case 36298:case 36306:case 35682:return LA;case 35679:case 36299:case 36307:return FA;case 35680:case 36300:case 36308:case 36293:return UA;case 36289:case 36303:case 36311:case 36292:return IA}}class OA{constructor(t,e,i){this.id=t,this.addr=i,this.cache=[],this.type=e.type,this.setValue=_A(e.type)}}class zA{constructor(t,e,i){this.id=t,this.addr=i,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=BA(e.type)}}class GA{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,i){const n=this.seq;for(let s=0,o=n.length;s!==o;++s){const a=n[s];a.setValue(t,e[a.id],i)}}}const Du=/(\w+)(\])?(\[|\.)?/g;function wg(r,t){r.seq.push(t),r.map[t.id]=t}function kA(r,t,e){const i=r.name,n=i.length;for(Du.lastIndex=0;;){const s=Du.exec(i),o=Du.lastIndex;let a=s[1];const l=s[2]==="]",c=s[3];if(l&&(a=a|0),c===void 0||c==="["&&o+2===n){wg(e,c===void 0?new OA(a,r,t):new zA(a,r,t));break}else{let u=e.map[a];u===void 0&&(u=new GA(a),wg(e,u)),e=u}}}class ih{constructor(t,e){this.seq=[],this.map={};const i=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let n=0;n<i;++n){const s=t.getActiveUniform(e,n),o=t.getUniformLocation(e,s.name);kA(s,o,this)}}setValue(t,e,i,n){const s=this.map[e];s!==void 0&&s.setValue(t,i,n)}setOptional(t,e,i){const n=e[i];n!==void 0&&this.setValue(t,i,n)}static upload(t,e,i,n){for(let s=0,o=e.length;s!==o;++s){const a=e[s],l=i[a.id];l.needsUpdate!==!1&&a.setValue(t,l.value,n)}}static seqWithValue(t,e){const i=[];for(let n=0,s=t.length;n!==s;++n){const o=t[n];o.id in e&&i.push(o)}return i}}function Rg(r,t,e){const i=r.createShader(t);return r.shaderSource(i,e),r.compileShader(i),i}const VA=37297;let HA=0;function WA(r,t){const e=r.split(`
`),i=[],n=Math.max(t-6,0),s=Math.min(t+6,e.length);for(let o=n;o<s;o++){const a=o+1;i.push(`${a===t?">":" "} ${a}: ${e[o]}`)}return i.join(`
`)}const Cg=new Qt;function $A(r){ce._getMatrix(Cg,ce.workingColorSpace,r);const t=`mat3( ${Cg.elements.map(e=>e.toFixed(4))} )`;switch(ce.getTransfer(r)){case Ih:return[t,"LinearTransferOETF"];case Me:return[t,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",r),[t,"LinearTransferOETF"]}}function Ng(r,t,e){const i=r.getShaderParameter(t,r.COMPILE_STATUS),n=r.getShaderInfoLog(t).trim();if(i&&n==="")return"";const s=/ERROR: 0:(\d+)/.exec(n);if(s){const o=parseInt(s[1]);return e.toUpperCase()+`

`+n+`

`+WA(r.getShaderSource(t),o)}else return n}function XA(r,t){const e=$A(t);return[`vec4 ${r}( vec4 value ) {`,`	return ${e[1]}( vec4( value.rgb * ${e[0]}, value.a ) );`,"}"].join(`
`)}function qA(r,t){let e;switch(t){case KS:e="Linear";break;case ZS:e="Reinhard";break;case QS:e="Cineon";break;case JS:e="ACESFilmic";break;case eM:e="AgX";break;case iM:e="Neutral";break;case tM:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+r+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}const nc=new P;function YA(){ce.getLuminanceCoefficients(nc);const r=nc.x.toFixed(4),t=nc.y.toFixed(4),e=nc.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${r}, ${t}, ${e} );`,"	return dot( weights, rgb );","}"].join(`
`)}function jA(r){return[r.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",r.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(Ya).join(`
`)}function KA(r){const t=[];for(const e in r){const i=r[e];i!==!1&&t.push("#define "+e+" "+i)}return t.join(`
`)}function ZA(r,t){const e={},i=r.getProgramParameter(t,r.ACTIVE_ATTRIBUTES);for(let n=0;n<i;n++){const s=r.getActiveAttrib(t,n),o=s.name;let a=1;s.type===r.FLOAT_MAT2&&(a=2),s.type===r.FLOAT_MAT3&&(a=3),s.type===r.FLOAT_MAT4&&(a=4),e[o]={type:s.type,location:r.getAttribLocation(t,o),locationSize:a}}return e}function Ya(r){return r!==""}function Pg(r,t){const e=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return r.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,e).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function Dg(r,t){return r.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const QA=/^[ \t]*#include +<([\w\d./]+)>/gm;function Bf(r){return r.replace(QA,tw)}const JA=new Map;function tw(r,t){let e=Kt[t];if(e===void 0){const i=JA.get(t);if(i!==void 0)e=Kt[i],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,i);else throw new Error("Can not resolve #include <"+t+">")}return Bf(e)}const ew=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Lg(r){return r.replace(ew,iw)}function iw(r,t,e,i){let n="";for(let s=parseInt(t);s<parseInt(e);s++)n+=i.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return n}function Fg(r){let t=`precision ${r.precision} float;
	precision ${r.precision} int;
	precision ${r.precision} sampler2D;
	precision ${r.precision} samplerCube;
	precision ${r.precision} sampler3D;
	precision ${r.precision} sampler2DArray;
	precision ${r.precision} sampler2DShadow;
	precision ${r.precision} samplerCubeShadow;
	precision ${r.precision} sampler2DArrayShadow;
	precision ${r.precision} isampler2D;
	precision ${r.precision} isampler3D;
	precision ${r.precision} isamplerCube;
	precision ${r.precision} isampler2DArray;
	precision ${r.precision} usampler2D;
	precision ${r.precision} usampler3D;
	precision ${r.precision} usamplerCube;
	precision ${r.precision} usampler2DArray;
	`;return r.precision==="highp"?t+=`
#define HIGH_PRECISION`:r.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:r.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function nw(r){let t="SHADOWMAP_TYPE_BASIC";return r.shadowMapType===Zx?t="SHADOWMAP_TYPE_PCF":r.shadowMapType===CS?t="SHADOWMAP_TYPE_PCF_SOFT":r.shadowMapType===Jn&&(t="SHADOWMAP_TYPE_VSM"),t}function sw(r){let t="ENVMAP_TYPE_CUBE";if(r.envMap)switch(r.envMapMode){case na:case sa:t="ENVMAP_TYPE_CUBE";break;case Uh:t="ENVMAP_TYPE_CUBE_UV";break}return t}function rw(r){let t="ENVMAP_MODE_REFLECTION";if(r.envMap)switch(r.envMapMode){case sa:t="ENVMAP_MODE_REFRACTION";break}return t}function ow(r){let t="ENVMAP_BLENDING_NONE";if(r.envMap)switch(r.combine){case Ep:t="ENVMAP_BLENDING_MULTIPLY";break;case YS:t="ENVMAP_BLENDING_MIX";break;case jS:t="ENVMAP_BLENDING_ADD";break}return t}function aw(r){const t=r.envMapCubeUVHeight;if(t===null)return null;const e=Math.log2(t)-2,i=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,e),7*16)),texelHeight:i,maxMip:e}}function lw(r,t,e,i){const n=r.getContext(),s=e.defines;let o=e.vertexShader,a=e.fragmentShader;const l=nw(e),c=sw(e),h=rw(e),u=ow(e),d=aw(e),f=jA(e),p=KA(s),_=n.createProgram();let g,m,y=e.glslVersion?"#version "+e.glslVersion+`
`:"";e.isRawShaderMaterial?(g=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,p].filter(Ya).join(`
`),g.length>0&&(g+=`
`),m=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,p].filter(Ya).join(`
`),m.length>0&&(m+=`
`)):(g=[Fg(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,p,e.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",e.batching?"#define USE_BATCHING":"",e.batchingColor?"#define USE_BATCHING_COLOR":"",e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.instancingMorph?"#define USE_INSTANCING_MORPH":"",e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+h:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.displacementMap?"#define USE_DISPLACEMENTMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.mapUv?"#define MAP_UV "+e.mapUv:"",e.alphaMapUv?"#define ALPHAMAP_UV "+e.alphaMapUv:"",e.lightMapUv?"#define LIGHTMAP_UV "+e.lightMapUv:"",e.aoMapUv?"#define AOMAP_UV "+e.aoMapUv:"",e.emissiveMapUv?"#define EMISSIVEMAP_UV "+e.emissiveMapUv:"",e.bumpMapUv?"#define BUMPMAP_UV "+e.bumpMapUv:"",e.normalMapUv?"#define NORMALMAP_UV "+e.normalMapUv:"",e.displacementMapUv?"#define DISPLACEMENTMAP_UV "+e.displacementMapUv:"",e.metalnessMapUv?"#define METALNESSMAP_UV "+e.metalnessMapUv:"",e.roughnessMapUv?"#define ROUGHNESSMAP_UV "+e.roughnessMapUv:"",e.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+e.anisotropyMapUv:"",e.clearcoatMapUv?"#define CLEARCOATMAP_UV "+e.clearcoatMapUv:"",e.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+e.clearcoatNormalMapUv:"",e.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+e.clearcoatRoughnessMapUv:"",e.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+e.iridescenceMapUv:"",e.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+e.iridescenceThicknessMapUv:"",e.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+e.sheenColorMapUv:"",e.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+e.sheenRoughnessMapUv:"",e.specularMapUv?"#define SPECULARMAP_UV "+e.specularMapUv:"",e.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+e.specularColorMapUv:"",e.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+e.specularIntensityMapUv:"",e.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+e.transmissionMapUv:"",e.thicknessMapUv?"#define THICKNESSMAP_UV "+e.thicknessMapUv:"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.morphColors?"#define USE_MORPHCOLORS":"",e.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+e.morphTextureStride:"",e.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+e.morphTargetsCount:"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Ya).join(`
`),m=[Fg(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,p,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+c:"",e.envMap?"#define "+h:"",e.envMap?"#define "+u:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoat?"#define USE_CLEARCOAT":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.dispersion?"#define USE_DISPERSION":"",e.iridescence?"#define USE_IRIDESCENCE":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaTest?"#define USE_ALPHATEST":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.sheen?"#define USE_SHEEN":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor||e.batchingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",e.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==Zs?"#define TONE_MAPPING":"",e.toneMapping!==Zs?Kt.tonemapping_pars_fragment:"",e.toneMapping!==Zs?qA("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",e.opaque?"#define OPAQUE":"",Kt.colorspace_pars_fragment,XA("linearToOutputTexel",e.outputColorSpace),YA(),e.useDepthPacking?"#define DEPTH_PACKING "+e.depthPacking:"",`
`].filter(Ya).join(`
`)),o=Bf(o),o=Pg(o,e),o=Dg(o,e),a=Bf(a),a=Pg(a,e),a=Dg(a,e),o=Lg(o),a=Lg(a),e.isRawShaderMaterial!==!0&&(y=`#version 300 es
`,g=[f,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+g,m=["#define varying in",e.glslVersion===Xm?"":"layout(location = 0) out highp vec4 pc_fragColor;",e.glslVersion===Xm?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+m);const v=y+g+o,x=y+m+a,C=Rg(n,n.VERTEX_SHADER,v),A=Rg(n,n.FRAGMENT_SHADER,x);n.attachShader(_,C),n.attachShader(_,A),e.index0AttributeName!==void 0?n.bindAttribLocation(_,0,e.index0AttributeName):e.morphTargets===!0&&n.bindAttribLocation(_,0,"position"),n.linkProgram(_);function E(N){if(r.debug.checkShaderErrors){const G=n.getProgramInfoLog(_).trim(),B=n.getShaderInfoLog(C).trim(),V=n.getShaderInfoLog(A).trim();let Q=!0,q=!0;if(n.getProgramParameter(_,n.LINK_STATUS)===!1)if(Q=!1,typeof r.debug.onShaderError=="function")r.debug.onShaderError(n,_,C,A);else{const rt=Ng(n,C,"vertex"),$=Ng(n,A,"fragment");console.error("THREE.WebGLProgram: Shader Error "+n.getError()+" - VALIDATE_STATUS "+n.getProgramParameter(_,n.VALIDATE_STATUS)+`

Material Name: `+N.name+`
Material Type: `+N.type+`

Program Info Log: `+G+`
`+rt+`
`+$)}else G!==""?console.warn("THREE.WebGLProgram: Program Info Log:",G):(B===""||V==="")&&(q=!1);q&&(N.diagnostics={runnable:Q,programLog:G,vertexShader:{log:B,prefix:g},fragmentShader:{log:V,prefix:m}})}n.deleteShader(C),n.deleteShader(A),w=new ih(n,_),T=ZA(n,_)}let w;this.getUniforms=function(){return w===void 0&&E(this),w};let T;this.getAttributes=function(){return T===void 0&&E(this),T};let S=e.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return S===!1&&(S=n.getProgramParameter(_,VA)),S},this.destroy=function(){i.releaseStatesOfProgram(this),n.deleteProgram(_),this.program=void 0},this.type=e.shaderType,this.name=e.shaderName,this.id=HA++,this.cacheKey=t,this.usedTimes=1,this.program=_,this.vertexShader=C,this.fragmentShader=A,this}let cw=0;class hw{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,i=t.fragmentShader,n=this._getShaderStage(e),s=this._getShaderStage(i),o=this._getShaderCacheForMaterial(t);return o.has(n)===!1&&(o.add(n),n.usedTimes++),o.has(s)===!1&&(o.add(s),s.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const i of e)i.usedTimes--,i.usedTimes===0&&this.shaderCache.delete(i.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let i=e.get(t);return i===void 0&&(i=new Set,e.set(t,i)),i}_getShaderStage(t){const e=this.shaderCache;let i=e.get(t);return i===void 0&&(i=new uw(t),e.set(t,i)),i}}class uw{constructor(t){this.id=cw++,this.code=t,this.usedTimes=0}}function dw(r,t,e,i,n,s,o){const a=new Lp,l=new hw,c=new Set,h=[],u=n.logarithmicDepthBuffer,d=n.vertexTextures;let f=n.precision;const p={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function _(T){return c.add(T),T===0?"uv":`uv${T}`}function g(T,S,N,G,B){const V=G.fog,Q=B.geometry,q=T.isMeshStandardMaterial?G.environment:null,rt=(T.isMeshStandardMaterial?e:t).get(T.envMap||q),$=rt&&rt.mapping===Uh?rt.image.height:null,ot=p[T.type];T.precision!==null&&(f=n.getMaxPrecision(T.precision),f!==T.precision&&console.warn("THREE.WebGLProgram.getParameters:",T.precision,"not supported, using",f,"instead."));const dt=Q.morphAttributes.position||Q.morphAttributes.normal||Q.morphAttributes.color,Tt=dt!==void 0?dt.length:0;let Gt=0;Q.morphAttributes.position!==void 0&&(Gt=1),Q.morphAttributes.normal!==void 0&&(Gt=2),Q.morphAttributes.color!==void 0&&(Gt=3);let he,J,lt,Nt;if(ot){const ve=Cn[ot];he=ve.vertexShader,J=ve.fragmentShader}else he=T.vertexShader,J=T.fragmentShader,l.update(T),lt=l.getVertexShaderID(T),Nt=l.getFragmentShaderID(T);const xt=r.getRenderTarget(),Bt=r.state.buffers.depth.getReversed(),Wt=B.isInstancedMesh===!0,te=B.isBatchedMesh===!0,Fe=!!T.map,ae=!!T.matcap,Ge=!!rt,O=!!T.aoMap,ji=!!T.lightMap,ie=!!T.bumpMap,ne=!!T.normalMap,Ut=!!T.displacementMap,Ae=!!T.emissiveMap,Ft=!!T.metalnessMap,R=!!T.roughnessMap,M=T.anisotropy>0,k=T.clearcoat>0,it=T.dispersion>0,st=T.iridescence>0,et=T.sheen>0,Pt=T.transmission>0,yt=M&&!!T.anisotropyMap,bt=k&&!!T.clearcoatMap,le=k&&!!T.clearcoatNormalMap,ct=k&&!!T.clearcoatRoughnessMap,Et=st&&!!T.iridescenceMap,It=st&&!!T.iridescenceThicknessMap,Ot=et&&!!T.sheenColorMap,At=et&&!!T.sheenRoughnessMap,se=!!T.specularMap,jt=!!T.specularColorMap,be=!!T.specularIntensityMap,L=Pt&&!!T.transmissionMap,_t=Pt&&!!T.thicknessMap,Y=!!T.gradientMap,nt=!!T.alphaMap,Mt=T.alphaTest>0,vt=!!T.alphaHash,qt=!!T.extensions;let Be=Zs;T.toneMapped&&(xt===null||xt.isXRRenderTarget===!0)&&(Be=r.toneMapping);const fi={shaderID:ot,shaderType:T.type,shaderName:T.name,vertexShader:he,fragmentShader:J,defines:T.defines,customVertexShaderID:lt,customFragmentShaderID:Nt,isRawShaderMaterial:T.isRawShaderMaterial===!0,glslVersion:T.glslVersion,precision:f,batching:te,batchingColor:te&&B._colorsTexture!==null,instancing:Wt,instancingColor:Wt&&B.instanceColor!==null,instancingMorph:Wt&&B.morphTexture!==null,supportsVertexTextures:d,outputColorSpace:xt===null?r.outputColorSpace:xt.isXRRenderTarget===!0?xt.texture.colorSpace:ga,alphaToCoverage:!!T.alphaToCoverage,map:Fe,matcap:ae,envMap:Ge,envMapMode:Ge&&rt.mapping,envMapCubeUVHeight:$,aoMap:O,lightMap:ji,bumpMap:ie,normalMap:ne,displacementMap:d&&Ut,emissiveMap:Ae,normalMapObjectSpace:ne&&T.normalMapType===oM,normalMapTangentSpace:ne&&T.normalMapType===c0,metalnessMap:Ft,roughnessMap:R,anisotropy:M,anisotropyMap:yt,clearcoat:k,clearcoatMap:bt,clearcoatNormalMap:le,clearcoatRoughnessMap:ct,dispersion:it,iridescence:st,iridescenceMap:Et,iridescenceThicknessMap:It,sheen:et,sheenColorMap:Ot,sheenRoughnessMap:At,specularMap:se,specularColorMap:jt,specularIntensityMap:be,transmission:Pt,transmissionMap:L,thicknessMap:_t,gradientMap:Y,opaque:T.transparent===!1&&T.blending===$o&&T.alphaToCoverage===!1,alphaMap:nt,alphaTest:Mt,alphaHash:vt,combine:T.combine,mapUv:Fe&&_(T.map.channel),aoMapUv:O&&_(T.aoMap.channel),lightMapUv:ji&&_(T.lightMap.channel),bumpMapUv:ie&&_(T.bumpMap.channel),normalMapUv:ne&&_(T.normalMap.channel),displacementMapUv:Ut&&_(T.displacementMap.channel),emissiveMapUv:Ae&&_(T.emissiveMap.channel),metalnessMapUv:Ft&&_(T.metalnessMap.channel),roughnessMapUv:R&&_(T.roughnessMap.channel),anisotropyMapUv:yt&&_(T.anisotropyMap.channel),clearcoatMapUv:bt&&_(T.clearcoatMap.channel),clearcoatNormalMapUv:le&&_(T.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:ct&&_(T.clearcoatRoughnessMap.channel),iridescenceMapUv:Et&&_(T.iridescenceMap.channel),iridescenceThicknessMapUv:It&&_(T.iridescenceThicknessMap.channel),sheenColorMapUv:Ot&&_(T.sheenColorMap.channel),sheenRoughnessMapUv:At&&_(T.sheenRoughnessMap.channel),specularMapUv:se&&_(T.specularMap.channel),specularColorMapUv:jt&&_(T.specularColorMap.channel),specularIntensityMapUv:be&&_(T.specularIntensityMap.channel),transmissionMapUv:L&&_(T.transmissionMap.channel),thicknessMapUv:_t&&_(T.thicknessMap.channel),alphaMapUv:nt&&_(T.alphaMap.channel),vertexTangents:!!Q.attributes.tangent&&(ne||M),vertexColors:T.vertexColors,vertexAlphas:T.vertexColors===!0&&!!Q.attributes.color&&Q.attributes.color.itemSize===4,pointsUvs:B.isPoints===!0&&!!Q.attributes.uv&&(Fe||nt),fog:!!V,useFog:T.fog===!0,fogExp2:!!V&&V.isFogExp2,flatShading:T.flatShading===!0,sizeAttenuation:T.sizeAttenuation===!0,logarithmicDepthBuffer:u,reverseDepthBuffer:Bt,skinning:B.isSkinnedMesh===!0,morphTargets:Q.morphAttributes.position!==void 0,morphNormals:Q.morphAttributes.normal!==void 0,morphColors:Q.morphAttributes.color!==void 0,morphTargetsCount:Tt,morphTextureStride:Gt,numDirLights:S.directional.length,numPointLights:S.point.length,numSpotLights:S.spot.length,numSpotLightMaps:S.spotLightMap.length,numRectAreaLights:S.rectArea.length,numHemiLights:S.hemi.length,numDirLightShadows:S.directionalShadowMap.length,numPointLightShadows:S.pointShadowMap.length,numSpotLightShadows:S.spotShadowMap.length,numSpotLightShadowsWithMaps:S.numSpotLightShadowsWithMaps,numLightProbes:S.numLightProbes,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:T.dithering,shadowMapEnabled:r.shadowMap.enabled&&N.length>0,shadowMapType:r.shadowMap.type,toneMapping:Be,decodeVideoTexture:Fe&&T.map.isVideoTexture===!0&&ce.getTransfer(T.map.colorSpace)===Me,decodeVideoTextureEmissive:Ae&&T.emissiveMap.isVideoTexture===!0&&ce.getTransfer(T.emissiveMap.colorSpace)===Me,premultipliedAlpha:T.premultipliedAlpha,doubleSided:T.side===ss,flipSided:T.side===Fi,useDepthPacking:T.depthPacking>=0,depthPacking:T.depthPacking||0,index0AttributeName:T.index0AttributeName,extensionClipCullDistance:qt&&T.extensions.clipCullDistance===!0&&i.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(qt&&T.extensions.multiDraw===!0||te)&&i.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:T.customProgramCacheKey()};return fi.vertexUv1s=c.has(1),fi.vertexUv2s=c.has(2),fi.vertexUv3s=c.has(3),c.clear(),fi}function m(T){const S=[];if(T.shaderID?S.push(T.shaderID):(S.push(T.customVertexShaderID),S.push(T.customFragmentShaderID)),T.defines!==void 0)for(const N in T.defines)S.push(N),S.push(T.defines[N]);return T.isRawShaderMaterial===!1&&(y(S,T),v(S,T),S.push(r.outputColorSpace)),S.push(T.customProgramCacheKey),S.join()}function y(T,S){T.push(S.precision),T.push(S.outputColorSpace),T.push(S.envMapMode),T.push(S.envMapCubeUVHeight),T.push(S.mapUv),T.push(S.alphaMapUv),T.push(S.lightMapUv),T.push(S.aoMapUv),T.push(S.bumpMapUv),T.push(S.normalMapUv),T.push(S.displacementMapUv),T.push(S.emissiveMapUv),T.push(S.metalnessMapUv),T.push(S.roughnessMapUv),T.push(S.anisotropyMapUv),T.push(S.clearcoatMapUv),T.push(S.clearcoatNormalMapUv),T.push(S.clearcoatRoughnessMapUv),T.push(S.iridescenceMapUv),T.push(S.iridescenceThicknessMapUv),T.push(S.sheenColorMapUv),T.push(S.sheenRoughnessMapUv),T.push(S.specularMapUv),T.push(S.specularColorMapUv),T.push(S.specularIntensityMapUv),T.push(S.transmissionMapUv),T.push(S.thicknessMapUv),T.push(S.combine),T.push(S.fogExp2),T.push(S.sizeAttenuation),T.push(S.morphTargetsCount),T.push(S.morphAttributeCount),T.push(S.numDirLights),T.push(S.numPointLights),T.push(S.numSpotLights),T.push(S.numSpotLightMaps),T.push(S.numHemiLights),T.push(S.numRectAreaLights),T.push(S.numDirLightShadows),T.push(S.numPointLightShadows),T.push(S.numSpotLightShadows),T.push(S.numSpotLightShadowsWithMaps),T.push(S.numLightProbes),T.push(S.shadowMapType),T.push(S.toneMapping),T.push(S.numClippingPlanes),T.push(S.numClipIntersection),T.push(S.depthPacking)}function v(T,S){a.disableAll(),S.supportsVertexTextures&&a.enable(0),S.instancing&&a.enable(1),S.instancingColor&&a.enable(2),S.instancingMorph&&a.enable(3),S.matcap&&a.enable(4),S.envMap&&a.enable(5),S.normalMapObjectSpace&&a.enable(6),S.normalMapTangentSpace&&a.enable(7),S.clearcoat&&a.enable(8),S.iridescence&&a.enable(9),S.alphaTest&&a.enable(10),S.vertexColors&&a.enable(11),S.vertexAlphas&&a.enable(12),S.vertexUv1s&&a.enable(13),S.vertexUv2s&&a.enable(14),S.vertexUv3s&&a.enable(15),S.vertexTangents&&a.enable(16),S.anisotropy&&a.enable(17),S.alphaHash&&a.enable(18),S.batching&&a.enable(19),S.dispersion&&a.enable(20),S.batchingColor&&a.enable(21),T.push(a.mask),a.disableAll(),S.fog&&a.enable(0),S.useFog&&a.enable(1),S.flatShading&&a.enable(2),S.logarithmicDepthBuffer&&a.enable(3),S.reverseDepthBuffer&&a.enable(4),S.skinning&&a.enable(5),S.morphTargets&&a.enable(6),S.morphNormals&&a.enable(7),S.morphColors&&a.enable(8),S.premultipliedAlpha&&a.enable(9),S.shadowMapEnabled&&a.enable(10),S.doubleSided&&a.enable(11),S.flipSided&&a.enable(12),S.useDepthPacking&&a.enable(13),S.dithering&&a.enable(14),S.transmission&&a.enable(15),S.sheen&&a.enable(16),S.opaque&&a.enable(17),S.pointsUvs&&a.enable(18),S.decodeVideoTexture&&a.enable(19),S.decodeVideoTextureEmissive&&a.enable(20),S.alphaToCoverage&&a.enable(21),T.push(a.mask)}function x(T){const S=p[T.type];let N;if(S){const G=Cn[S];N=A0.clone(G.uniforms)}else N=T.uniforms;return N}function C(T,S){let N;for(let G=0,B=h.length;G<B;G++){const V=h[G];if(V.cacheKey===S){N=V,++N.usedTimes;break}}return N===void 0&&(N=new lw(r,S,T,s),h.push(N)),N}function A(T){if(--T.usedTimes===0){const S=h.indexOf(T);h[S]=h[h.length-1],h.pop(),T.destroy()}}function E(T){l.remove(T)}function w(){l.dispose()}return{getParameters:g,getProgramCacheKey:m,getUniforms:x,acquireProgram:C,releaseProgram:A,releaseShaderCache:E,programs:h,dispose:w}}function fw(){let r=new WeakMap;function t(o){return r.has(o)}function e(o){let a=r.get(o);return a===void 0&&(a={},r.set(o,a)),a}function i(o){r.delete(o)}function n(o,a,l){r.get(o)[a]=l}function s(){r=new WeakMap}return{has:t,get:e,remove:i,update:n,dispose:s}}function pw(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.material.id!==t.material.id?r.material.id-t.material.id:r.z!==t.z?r.z-t.z:r.id-t.id}function Ug(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.z!==t.z?t.z-r.z:r.id-t.id}function Ig(){const r=[];let t=0;const e=[],i=[],n=[];function s(){t=0,e.length=0,i.length=0,n.length=0}function o(u,d,f,p,_,g){let m=r[t];return m===void 0?(m={id:u.id,object:u,geometry:d,material:f,groupOrder:p,renderOrder:u.renderOrder,z:_,group:g},r[t]=m):(m.id=u.id,m.object=u,m.geometry=d,m.material=f,m.groupOrder=p,m.renderOrder=u.renderOrder,m.z=_,m.group=g),t++,m}function a(u,d,f,p,_,g){const m=o(u,d,f,p,_,g);f.transmission>0?i.push(m):f.transparent===!0?n.push(m):e.push(m)}function l(u,d,f,p,_,g){const m=o(u,d,f,p,_,g);f.transmission>0?i.unshift(m):f.transparent===!0?n.unshift(m):e.unshift(m)}function c(u,d){e.length>1&&e.sort(u||pw),i.length>1&&i.sort(d||Ug),n.length>1&&n.sort(d||Ug)}function h(){for(let u=t,d=r.length;u<d;u++){const f=r[u];if(f.id===null)break;f.id=null,f.object=null,f.geometry=null,f.material=null,f.group=null}}return{opaque:e,transmissive:i,transparent:n,init:s,push:a,unshift:l,finish:h,sort:c}}function mw(){let r=new WeakMap;function t(i,n){const s=r.get(i);let o;return s===void 0?(o=new Ig,r.set(i,[o])):n>=s.length?(o=new Ig,s.push(o)):o=s[n],o}function e(){r=new WeakMap}return{get:t,dispose:e}}function gw(){const r={};return{get:function(t){if(r[t.id]!==void 0)return r[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new P,color:new re};break;case"SpotLight":e={position:new P,direction:new P,color:new re,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new P,color:new re,distance:0,decay:0};break;case"HemisphereLight":e={direction:new P,skyColor:new re,groundColor:new re};break;case"RectAreaLight":e={color:new re,position:new P,halfWidth:new P,halfHeight:new P};break}return r[t.id]=e,e}}}function _w(){const r={};return{get:function(t){if(r[t.id]!==void 0)return r[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ft};break;case"SpotLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ft};break;case"PointLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ft,shadowCameraNear:1,shadowCameraFar:1e3};break}return r[t.id]=e,e}}}let xw=0;function yw(r,t){return(t.castShadow?2:0)-(r.castShadow?2:0)+(t.map?1:0)-(r.map?1:0)}function vw(r){const t=new gw,e=_w(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let c=0;c<9;c++)i.probe.push(new P);const n=new P,s=new Pe,o=new Pe;function a(c){let h=0,u=0,d=0;for(let T=0;T<9;T++)i.probe[T].set(0,0,0);let f=0,p=0,_=0,g=0,m=0,y=0,v=0,x=0,C=0,A=0,E=0;c.sort(yw);for(let T=0,S=c.length;T<S;T++){const N=c[T],G=N.color,B=N.intensity,V=N.distance,Q=N.shadow&&N.shadow.map?N.shadow.map.texture:null;if(N.isAmbientLight)h+=G.r*B,u+=G.g*B,d+=G.b*B;else if(N.isLightProbe){for(let q=0;q<9;q++)i.probe[q].addScaledVector(N.sh.coefficients[q],B);E++}else if(N.isDirectionalLight){const q=t.get(N);if(q.color.copy(N.color).multiplyScalar(N.intensity),N.castShadow){const rt=N.shadow,$=e.get(N);$.shadowIntensity=rt.intensity,$.shadowBias=rt.bias,$.shadowNormalBias=rt.normalBias,$.shadowRadius=rt.radius,$.shadowMapSize=rt.mapSize,i.directionalShadow[f]=$,i.directionalShadowMap[f]=Q,i.directionalShadowMatrix[f]=N.shadow.matrix,y++}i.directional[f]=q,f++}else if(N.isSpotLight){const q=t.get(N);q.position.setFromMatrixPosition(N.matrixWorld),q.color.copy(G).multiplyScalar(B),q.distance=V,q.coneCos=Math.cos(N.angle),q.penumbraCos=Math.cos(N.angle*(1-N.penumbra)),q.decay=N.decay,i.spot[_]=q;const rt=N.shadow;if(N.map&&(i.spotLightMap[C]=N.map,C++,rt.updateMatrices(N),N.castShadow&&A++),i.spotLightMatrix[_]=rt.matrix,N.castShadow){const $=e.get(N);$.shadowIntensity=rt.intensity,$.shadowBias=rt.bias,$.shadowNormalBias=rt.normalBias,$.shadowRadius=rt.radius,$.shadowMapSize=rt.mapSize,i.spotShadow[_]=$,i.spotShadowMap[_]=Q,x++}_++}else if(N.isRectAreaLight){const q=t.get(N);q.color.copy(G).multiplyScalar(B),q.halfWidth.set(N.width*.5,0,0),q.halfHeight.set(0,N.height*.5,0),i.rectArea[g]=q,g++}else if(N.isPointLight){const q=t.get(N);if(q.color.copy(N.color).multiplyScalar(N.intensity),q.distance=N.distance,q.decay=N.decay,N.castShadow){const rt=N.shadow,$=e.get(N);$.shadowIntensity=rt.intensity,$.shadowBias=rt.bias,$.shadowNormalBias=rt.normalBias,$.shadowRadius=rt.radius,$.shadowMapSize=rt.mapSize,$.shadowCameraNear=rt.camera.near,$.shadowCameraFar=rt.camera.far,i.pointShadow[p]=$,i.pointShadowMap[p]=Q,i.pointShadowMatrix[p]=N.shadow.matrix,v++}i.point[p]=q,p++}else if(N.isHemisphereLight){const q=t.get(N);q.skyColor.copy(N.color).multiplyScalar(B),q.groundColor.copy(N.groundColor).multiplyScalar(B),i.hemi[m]=q,m++}}g>0&&(r.has("OES_texture_float_linear")===!0?(i.rectAreaLTC1=mt.LTC_FLOAT_1,i.rectAreaLTC2=mt.LTC_FLOAT_2):(i.rectAreaLTC1=mt.LTC_HALF_1,i.rectAreaLTC2=mt.LTC_HALF_2)),i.ambient[0]=h,i.ambient[1]=u,i.ambient[2]=d;const w=i.hash;(w.directionalLength!==f||w.pointLength!==p||w.spotLength!==_||w.rectAreaLength!==g||w.hemiLength!==m||w.numDirectionalShadows!==y||w.numPointShadows!==v||w.numSpotShadows!==x||w.numSpotMaps!==C||w.numLightProbes!==E)&&(i.directional.length=f,i.spot.length=_,i.rectArea.length=g,i.point.length=p,i.hemi.length=m,i.directionalShadow.length=y,i.directionalShadowMap.length=y,i.pointShadow.length=v,i.pointShadowMap.length=v,i.spotShadow.length=x,i.spotShadowMap.length=x,i.directionalShadowMatrix.length=y,i.pointShadowMatrix.length=v,i.spotLightMatrix.length=x+C-A,i.spotLightMap.length=C,i.numSpotLightShadowsWithMaps=A,i.numLightProbes=E,w.directionalLength=f,w.pointLength=p,w.spotLength=_,w.rectAreaLength=g,w.hemiLength=m,w.numDirectionalShadows=y,w.numPointShadows=v,w.numSpotShadows=x,w.numSpotMaps=C,w.numLightProbes=E,i.version=xw++)}function l(c,h){let u=0,d=0,f=0,p=0,_=0;const g=h.matrixWorldInverse;for(let m=0,y=c.length;m<y;m++){const v=c[m];if(v.isDirectionalLight){const x=i.directional[u];x.direction.setFromMatrixPosition(v.matrixWorld),n.setFromMatrixPosition(v.target.matrixWorld),x.direction.sub(n),x.direction.transformDirection(g),u++}else if(v.isSpotLight){const x=i.spot[f];x.position.setFromMatrixPosition(v.matrixWorld),x.position.applyMatrix4(g),x.direction.setFromMatrixPosition(v.matrixWorld),n.setFromMatrixPosition(v.target.matrixWorld),x.direction.sub(n),x.direction.transformDirection(g),f++}else if(v.isRectAreaLight){const x=i.rectArea[p];x.position.setFromMatrixPosition(v.matrixWorld),x.position.applyMatrix4(g),o.identity(),s.copy(v.matrixWorld),s.premultiply(g),o.extractRotation(s),x.halfWidth.set(v.width*.5,0,0),x.halfHeight.set(0,v.height*.5,0),x.halfWidth.applyMatrix4(o),x.halfHeight.applyMatrix4(o),p++}else if(v.isPointLight){const x=i.point[d];x.position.setFromMatrixPosition(v.matrixWorld),x.position.applyMatrix4(g),d++}else if(v.isHemisphereLight){const x=i.hemi[_];x.direction.setFromMatrixPosition(v.matrixWorld),x.direction.transformDirection(g),_++}}}return{setup:a,setupView:l,state:i}}function Bg(r){const t=new vw(r),e=[],i=[];function n(h){c.camera=h,e.length=0,i.length=0}function s(h){e.push(h)}function o(h){i.push(h)}function a(){t.setup(e)}function l(h){t.setupView(e,h)}const c={lightsArray:e,shadowsArray:i,camera:null,lights:t,transmissionRenderTarget:{}};return{init:n,state:c,setupLights:a,setupLightsView:l,pushLight:s,pushShadow:o}}function Sw(r){let t=new WeakMap;function e(n,s=0){const o=t.get(n);let a;return o===void 0?(a=new Bg(r),t.set(n,[a])):s>=o.length?(a=new Bg(r),o.push(a)):a=o[s],a}function i(){t=new WeakMap}return{get:e,dispose:i}}class Mw extends $r{static get type(){return"MeshDepthMaterial"}constructor(t){super(),this.isMeshDepthMaterial=!0,this.depthPacking=sM,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class Tw extends $r{static get type(){return"MeshDistanceMaterial"}constructor(t){super(),this.isMeshDistanceMaterial=!0,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}const bw=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,Ew=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function Aw(r,t,e){let i=new Up;const n=new ft,s=new ft,o=new qe,a=new Mw({depthPacking:rM}),l=new Tw,c={},h=e.maxTextureSize,u={[nr]:Fi,[Fi]:nr,[ss]:ss},d=new Un({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new ft},radius:{value:4}},vertexShader:bw,fragmentShader:Ew}),f=d.clone();f.defines.HORIZONTAL_PASS=1;const p=new An;p.setAttribute("position",new Mn(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const _=new Pn(p,d),g=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Zx;let m=this.type;this.render=function(A,E,w){if(g.enabled===!1||g.autoUpdate===!1&&g.needsUpdate===!1||A.length===0)return;const T=r.getRenderTarget(),S=r.getActiveCubeFace(),N=r.getActiveMipmapLevel(),G=r.state;G.setBlending(ds),G.buffers.color.setClear(1,1,1,1),G.buffers.depth.setTest(!0),G.setScissorTest(!1);const B=m!==Jn&&this.type===Jn,V=m===Jn&&this.type!==Jn;for(let Q=0,q=A.length;Q<q;Q++){const rt=A[Q],$=rt.shadow;if($===void 0){console.warn("THREE.WebGLShadowMap:",rt,"has no shadow.");continue}if($.autoUpdate===!1&&$.needsUpdate===!1)continue;n.copy($.mapSize);const ot=$.getFrameExtents();if(n.multiply(ot),s.copy($.mapSize),(n.x>h||n.y>h)&&(n.x>h&&(s.x=Math.floor(h/ot.x),n.x=s.x*ot.x,$.mapSize.x=s.x),n.y>h&&(s.y=Math.floor(h/ot.y),n.y=s.y*ot.y,$.mapSize.y=s.y)),$.map===null||B===!0||V===!0){const Tt=this.type!==Jn?{minFilter:Sn,magFilter:Sn}:{};$.map!==null&&$.map.dispose(),$.map=new sr(n.x,n.y,Tt),$.map.texture.name=rt.name+".shadowMap",$.camera.updateProjectionMatrix()}r.setRenderTarget($.map),r.clear();const dt=$.getViewportCount();for(let Tt=0;Tt<dt;Tt++){const Gt=$.getViewport(Tt);o.set(s.x*Gt.x,s.y*Gt.y,s.x*Gt.z,s.y*Gt.w),G.viewport(o),$.updateMatrices(rt,Tt),i=$.getFrustum(),x(E,w,$.camera,rt,this.type)}$.isPointLightShadow!==!0&&this.type===Jn&&y($,w),$.needsUpdate=!1}m=this.type,g.needsUpdate=!1,r.setRenderTarget(T,S,N)};function y(A,E){const w=t.update(_);d.defines.VSM_SAMPLES!==A.blurSamples&&(d.defines.VSM_SAMPLES=A.blurSamples,f.defines.VSM_SAMPLES=A.blurSamples,d.needsUpdate=!0,f.needsUpdate=!0),A.mapPass===null&&(A.mapPass=new sr(n.x,n.y)),d.uniforms.shadow_pass.value=A.map.texture,d.uniforms.resolution.value=A.mapSize,d.uniforms.radius.value=A.radius,r.setRenderTarget(A.mapPass),r.clear(),r.renderBufferDirect(E,null,w,d,_,null),f.uniforms.shadow_pass.value=A.mapPass.texture,f.uniforms.resolution.value=A.mapSize,f.uniforms.radius.value=A.radius,r.setRenderTarget(A.map),r.clear(),r.renderBufferDirect(E,null,w,f,_,null)}function v(A,E,w,T){let S=null;const N=w.isPointLight===!0?A.customDistanceMaterial:A.customDepthMaterial;if(N!==void 0)S=N;else if(S=w.isPointLight===!0?l:a,r.localClippingEnabled&&E.clipShadows===!0&&Array.isArray(E.clippingPlanes)&&E.clippingPlanes.length!==0||E.displacementMap&&E.displacementScale!==0||E.alphaMap&&E.alphaTest>0||E.map&&E.alphaTest>0){const G=S.uuid,B=E.uuid;let V=c[G];V===void 0&&(V={},c[G]=V);let Q=V[B];Q===void 0&&(Q=S.clone(),V[B]=Q,E.addEventListener("dispose",C)),S=Q}if(S.visible=E.visible,S.wireframe=E.wireframe,T===Jn?S.side=E.shadowSide!==null?E.shadowSide:E.side:S.side=E.shadowSide!==null?E.shadowSide:u[E.side],S.alphaMap=E.alphaMap,S.alphaTest=E.alphaTest,S.map=E.map,S.clipShadows=E.clipShadows,S.clippingPlanes=E.clippingPlanes,S.clipIntersection=E.clipIntersection,S.displacementMap=E.displacementMap,S.displacementScale=E.displacementScale,S.displacementBias=E.displacementBias,S.wireframeLinewidth=E.wireframeLinewidth,S.linewidth=E.linewidth,w.isPointLight===!0&&S.isMeshDistanceMaterial===!0){const G=r.properties.get(S);G.light=w}return S}function x(A,E,w,T,S){if(A.visible===!1)return;if(A.layers.test(E.layers)&&(A.isMesh||A.isLine||A.isPoints)&&(A.castShadow||A.receiveShadow&&S===Jn)&&(!A.frustumCulled||i.intersectsObject(A))){A.modelViewMatrix.multiplyMatrices(w.matrixWorldInverse,A.matrixWorld);const B=t.update(A),V=A.material;if(Array.isArray(V)){const Q=B.groups;for(let q=0,rt=Q.length;q<rt;q++){const $=Q[q],ot=V[$.materialIndex];if(ot&&ot.visible){const dt=v(A,ot,T,S);A.onBeforeShadow(r,A,E,w,B,dt,$),r.renderBufferDirect(w,null,B,dt,A,$),A.onAfterShadow(r,A,E,w,B,dt,$)}}}else if(V.visible){const Q=v(A,V,T,S);A.onBeforeShadow(r,A,E,w,B,Q,null),r.renderBufferDirect(w,null,B,Q,A,null),A.onAfterShadow(r,A,E,w,B,Q,null)}}const G=A.children;for(let B=0,V=G.length;B<V;B++)x(G[B],E,w,T,S)}function C(A){A.target.removeEventListener("dispose",C);for(const w in c){const T=c[w],S=A.target.uuid;S in T&&(T[S].dispose(),delete T[S])}}}const ww={[Kd]:Zd,[Qd]:ef,[Jd]:nf,[ia]:tf,[Zd]:Kd,[ef]:Qd,[nf]:Jd,[tf]:ia};function Rw(r,t){function e(){let L=!1;const _t=new qe;let Y=null;const nt=new qe(0,0,0,0);return{setMask:function(Mt){Y!==Mt&&!L&&(r.colorMask(Mt,Mt,Mt,Mt),Y=Mt)},setLocked:function(Mt){L=Mt},setClear:function(Mt,vt,qt,Be,fi){fi===!0&&(Mt*=Be,vt*=Be,qt*=Be),_t.set(Mt,vt,qt,Be),nt.equals(_t)===!1&&(r.clearColor(Mt,vt,qt,Be),nt.copy(_t))},reset:function(){L=!1,Y=null,nt.set(-1,0,0,0)}}}function i(){let L=!1,_t=!1,Y=null,nt=null,Mt=null;return{setReversed:function(vt){if(_t!==vt){const qt=t.get("EXT_clip_control");_t?qt.clipControlEXT(qt.LOWER_LEFT_EXT,qt.ZERO_TO_ONE_EXT):qt.clipControlEXT(qt.LOWER_LEFT_EXT,qt.NEGATIVE_ONE_TO_ONE_EXT);const Be=Mt;Mt=null,this.setClear(Be)}_t=vt},getReversed:function(){return _t},setTest:function(vt){vt?xt(r.DEPTH_TEST):Bt(r.DEPTH_TEST)},setMask:function(vt){Y!==vt&&!L&&(r.depthMask(vt),Y=vt)},setFunc:function(vt){if(_t&&(vt=ww[vt]),nt!==vt){switch(vt){case Kd:r.depthFunc(r.NEVER);break;case Zd:r.depthFunc(r.ALWAYS);break;case Qd:r.depthFunc(r.LESS);break;case ia:r.depthFunc(r.LEQUAL);break;case Jd:r.depthFunc(r.EQUAL);break;case tf:r.depthFunc(r.GEQUAL);break;case ef:r.depthFunc(r.GREATER);break;case nf:r.depthFunc(r.NOTEQUAL);break;default:r.depthFunc(r.LEQUAL)}nt=vt}},setLocked:function(vt){L=vt},setClear:function(vt){Mt!==vt&&(_t&&(vt=1-vt),r.clearDepth(vt),Mt=vt)},reset:function(){L=!1,Y=null,nt=null,Mt=null,_t=!1}}}function n(){let L=!1,_t=null,Y=null,nt=null,Mt=null,vt=null,qt=null,Be=null,fi=null;return{setTest:function(ve){L||(ve?xt(r.STENCIL_TEST):Bt(r.STENCIL_TEST))},setMask:function(ve){_t!==ve&&!L&&(r.stencilMask(ve),_t=ve)},setFunc:function(ve,rn,Gn){(Y!==ve||nt!==rn||Mt!==Gn)&&(r.stencilFunc(ve,rn,Gn),Y=ve,nt=rn,Mt=Gn)},setOp:function(ve,rn,Gn){(vt!==ve||qt!==rn||Be!==Gn)&&(r.stencilOp(ve,rn,Gn),vt=ve,qt=rn,Be=Gn)},setLocked:function(ve){L=ve},setClear:function(ve){fi!==ve&&(r.clearStencil(ve),fi=ve)},reset:function(){L=!1,_t=null,Y=null,nt=null,Mt=null,vt=null,qt=null,Be=null,fi=null}}}const s=new e,o=new i,a=new n,l=new WeakMap,c=new WeakMap;let h={},u={},d=new WeakMap,f=[],p=null,_=!1,g=null,m=null,y=null,v=null,x=null,C=null,A=null,E=new re(0,0,0),w=0,T=!1,S=null,N=null,G=null,B=null,V=null;const Q=r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let q=!1,rt=0;const $=r.getParameter(r.VERSION);$.indexOf("WebGL")!==-1?(rt=parseFloat(/^WebGL (\d)/.exec($)[1]),q=rt>=1):$.indexOf("OpenGL ES")!==-1&&(rt=parseFloat(/^OpenGL ES (\d)/.exec($)[1]),q=rt>=2);let ot=null,dt={};const Tt=r.getParameter(r.SCISSOR_BOX),Gt=r.getParameter(r.VIEWPORT),he=new qe().fromArray(Tt),J=new qe().fromArray(Gt);function lt(L,_t,Y,nt){const Mt=new Uint8Array(4),vt=r.createTexture();r.bindTexture(L,vt),r.texParameteri(L,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(L,r.TEXTURE_MAG_FILTER,r.NEAREST);for(let qt=0;qt<Y;qt++)L===r.TEXTURE_3D||L===r.TEXTURE_2D_ARRAY?r.texImage3D(_t,0,r.RGBA,1,1,nt,0,r.RGBA,r.UNSIGNED_BYTE,Mt):r.texImage2D(_t+qt,0,r.RGBA,1,1,0,r.RGBA,r.UNSIGNED_BYTE,Mt);return vt}const Nt={};Nt[r.TEXTURE_2D]=lt(r.TEXTURE_2D,r.TEXTURE_2D,1),Nt[r.TEXTURE_CUBE_MAP]=lt(r.TEXTURE_CUBE_MAP,r.TEXTURE_CUBE_MAP_POSITIVE_X,6),Nt[r.TEXTURE_2D_ARRAY]=lt(r.TEXTURE_2D_ARRAY,r.TEXTURE_2D_ARRAY,1,1),Nt[r.TEXTURE_3D]=lt(r.TEXTURE_3D,r.TEXTURE_3D,1,1),s.setClear(0,0,0,1),o.setClear(1),a.setClear(0),xt(r.DEPTH_TEST),o.setFunc(ia),ie(!1),ne(km),xt(r.CULL_FACE),O(ds);function xt(L){h[L]!==!0&&(r.enable(L),h[L]=!0)}function Bt(L){h[L]!==!1&&(r.disable(L),h[L]=!1)}function Wt(L,_t){return u[L]!==_t?(r.bindFramebuffer(L,_t),u[L]=_t,L===r.DRAW_FRAMEBUFFER&&(u[r.FRAMEBUFFER]=_t),L===r.FRAMEBUFFER&&(u[r.DRAW_FRAMEBUFFER]=_t),!0):!1}function te(L,_t){let Y=f,nt=!1;if(L){Y=d.get(_t),Y===void 0&&(Y=[],d.set(_t,Y));const Mt=L.textures;if(Y.length!==Mt.length||Y[0]!==r.COLOR_ATTACHMENT0){for(let vt=0,qt=Mt.length;vt<qt;vt++)Y[vt]=r.COLOR_ATTACHMENT0+vt;Y.length=Mt.length,nt=!0}}else Y[0]!==r.BACK&&(Y[0]=r.BACK,nt=!0);nt&&r.drawBuffers(Y)}function Fe(L){return p!==L?(r.useProgram(L),p=L,!0):!1}const ae={[wr]:r.FUNC_ADD,[PS]:r.FUNC_SUBTRACT,[DS]:r.FUNC_REVERSE_SUBTRACT};ae[LS]=r.MIN,ae[FS]=r.MAX;const Ge={[US]:r.ZERO,[IS]:r.ONE,[BS]:r.SRC_COLOR,[Yd]:r.SRC_ALPHA,[HS]:r.SRC_ALPHA_SATURATE,[kS]:r.DST_COLOR,[zS]:r.DST_ALPHA,[OS]:r.ONE_MINUS_SRC_COLOR,[jd]:r.ONE_MINUS_SRC_ALPHA,[VS]:r.ONE_MINUS_DST_COLOR,[GS]:r.ONE_MINUS_DST_ALPHA,[WS]:r.CONSTANT_COLOR,[$S]:r.ONE_MINUS_CONSTANT_COLOR,[XS]:r.CONSTANT_ALPHA,[qS]:r.ONE_MINUS_CONSTANT_ALPHA};function O(L,_t,Y,nt,Mt,vt,qt,Be,fi,ve){if(L===ds){_===!0&&(Bt(r.BLEND),_=!1);return}if(_===!1&&(xt(r.BLEND),_=!0),L!==NS){if(L!==g||ve!==T){if((m!==wr||x!==wr)&&(r.blendEquation(r.FUNC_ADD),m=wr,x=wr),ve)switch(L){case $o:r.blendFuncSeparate(r.ONE,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case Vm:r.blendFunc(r.ONE,r.ONE);break;case Hm:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case Wm:r.blendFuncSeparate(r.ZERO,r.SRC_COLOR,r.ZERO,r.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",L);break}else switch(L){case $o:r.blendFuncSeparate(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case Vm:r.blendFunc(r.SRC_ALPHA,r.ONE);break;case Hm:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case Wm:r.blendFunc(r.ZERO,r.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",L);break}y=null,v=null,C=null,A=null,E.set(0,0,0),w=0,g=L,T=ve}return}Mt=Mt||_t,vt=vt||Y,qt=qt||nt,(_t!==m||Mt!==x)&&(r.blendEquationSeparate(ae[_t],ae[Mt]),m=_t,x=Mt),(Y!==y||nt!==v||vt!==C||qt!==A)&&(r.blendFuncSeparate(Ge[Y],Ge[nt],Ge[vt],Ge[qt]),y=Y,v=nt,C=vt,A=qt),(Be.equals(E)===!1||fi!==w)&&(r.blendColor(Be.r,Be.g,Be.b,fi),E.copy(Be),w=fi),g=L,T=!1}function ji(L,_t){L.side===ss?Bt(r.CULL_FACE):xt(r.CULL_FACE);let Y=L.side===Fi;_t&&(Y=!Y),ie(Y),L.blending===$o&&L.transparent===!1?O(ds):O(L.blending,L.blendEquation,L.blendSrc,L.blendDst,L.blendEquationAlpha,L.blendSrcAlpha,L.blendDstAlpha,L.blendColor,L.blendAlpha,L.premultipliedAlpha),o.setFunc(L.depthFunc),o.setTest(L.depthTest),o.setMask(L.depthWrite),s.setMask(L.colorWrite);const nt=L.stencilWrite;a.setTest(nt),nt&&(a.setMask(L.stencilWriteMask),a.setFunc(L.stencilFunc,L.stencilRef,L.stencilFuncMask),a.setOp(L.stencilFail,L.stencilZFail,L.stencilZPass)),Ae(L.polygonOffset,L.polygonOffsetFactor,L.polygonOffsetUnits),L.alphaToCoverage===!0?xt(r.SAMPLE_ALPHA_TO_COVERAGE):Bt(r.SAMPLE_ALPHA_TO_COVERAGE)}function ie(L){S!==L&&(L?r.frontFace(r.CW):r.frontFace(r.CCW),S=L)}function ne(L){L!==wS?(xt(r.CULL_FACE),L!==N&&(L===km?r.cullFace(r.BACK):L===RS?r.cullFace(r.FRONT):r.cullFace(r.FRONT_AND_BACK))):Bt(r.CULL_FACE),N=L}function Ut(L){L!==G&&(q&&r.lineWidth(L),G=L)}function Ae(L,_t,Y){L?(xt(r.POLYGON_OFFSET_FILL),(B!==_t||V!==Y)&&(r.polygonOffset(_t,Y),B=_t,V=Y)):Bt(r.POLYGON_OFFSET_FILL)}function Ft(L){L?xt(r.SCISSOR_TEST):Bt(r.SCISSOR_TEST)}function R(L){L===void 0&&(L=r.TEXTURE0+Q-1),ot!==L&&(r.activeTexture(L),ot=L)}function M(L,_t,Y){Y===void 0&&(ot===null?Y=r.TEXTURE0+Q-1:Y=ot);let nt=dt[Y];nt===void 0&&(nt={type:void 0,texture:void 0},dt[Y]=nt),(nt.type!==L||nt.texture!==_t)&&(ot!==Y&&(r.activeTexture(Y),ot=Y),r.bindTexture(L,_t||Nt[L]),nt.type=L,nt.texture=_t)}function k(){const L=dt[ot];L!==void 0&&L.type!==void 0&&(r.bindTexture(L.type,null),L.type=void 0,L.texture=void 0)}function it(){try{r.compressedTexImage2D.apply(r,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function st(){try{r.compressedTexImage3D.apply(r,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function et(){try{r.texSubImage2D.apply(r,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function Pt(){try{r.texSubImage3D.apply(r,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function yt(){try{r.compressedTexSubImage2D.apply(r,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function bt(){try{r.compressedTexSubImage3D.apply(r,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function le(){try{r.texStorage2D.apply(r,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function ct(){try{r.texStorage3D.apply(r,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function Et(){try{r.texImage2D.apply(r,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function It(){try{r.texImage3D.apply(r,arguments)}catch(L){console.error("THREE.WebGLState:",L)}}function Ot(L){he.equals(L)===!1&&(r.scissor(L.x,L.y,L.z,L.w),he.copy(L))}function At(L){J.equals(L)===!1&&(r.viewport(L.x,L.y,L.z,L.w),J.copy(L))}function se(L,_t){let Y=c.get(_t);Y===void 0&&(Y=new WeakMap,c.set(_t,Y));let nt=Y.get(L);nt===void 0&&(nt=r.getUniformBlockIndex(_t,L.name),Y.set(L,nt))}function jt(L,_t){const nt=c.get(_t).get(L);l.get(_t)!==nt&&(r.uniformBlockBinding(_t,nt,L.__bindingPointIndex),l.set(_t,nt))}function be(){r.disable(r.BLEND),r.disable(r.CULL_FACE),r.disable(r.DEPTH_TEST),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SCISSOR_TEST),r.disable(r.STENCIL_TEST),r.disable(r.SAMPLE_ALPHA_TO_COVERAGE),r.blendEquation(r.FUNC_ADD),r.blendFunc(r.ONE,r.ZERO),r.blendFuncSeparate(r.ONE,r.ZERO,r.ONE,r.ZERO),r.blendColor(0,0,0,0),r.colorMask(!0,!0,!0,!0),r.clearColor(0,0,0,0),r.depthMask(!0),r.depthFunc(r.LESS),o.setReversed(!1),r.clearDepth(1),r.stencilMask(4294967295),r.stencilFunc(r.ALWAYS,0,4294967295),r.stencilOp(r.KEEP,r.KEEP,r.KEEP),r.clearStencil(0),r.cullFace(r.BACK),r.frontFace(r.CCW),r.polygonOffset(0,0),r.activeTexture(r.TEXTURE0),r.bindFramebuffer(r.FRAMEBUFFER,null),r.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),r.bindFramebuffer(r.READ_FRAMEBUFFER,null),r.useProgram(null),r.lineWidth(1),r.scissor(0,0,r.canvas.width,r.canvas.height),r.viewport(0,0,r.canvas.width,r.canvas.height),h={},ot=null,dt={},u={},d=new WeakMap,f=[],p=null,_=!1,g=null,m=null,y=null,v=null,x=null,C=null,A=null,E=new re(0,0,0),w=0,T=!1,S=null,N=null,G=null,B=null,V=null,he.set(0,0,r.canvas.width,r.canvas.height),J.set(0,0,r.canvas.width,r.canvas.height),s.reset(),o.reset(),a.reset()}return{buffers:{color:s,depth:o,stencil:a},enable:xt,disable:Bt,bindFramebuffer:Wt,drawBuffers:te,useProgram:Fe,setBlending:O,setMaterial:ji,setFlipSided:ie,setCullFace:ne,setLineWidth:Ut,setPolygonOffset:Ae,setScissorTest:Ft,activeTexture:R,bindTexture:M,unbindTexture:k,compressedTexImage2D:it,compressedTexImage3D:st,texImage2D:Et,texImage3D:It,updateUBOMapping:se,uniformBlockBinding:jt,texStorage2D:le,texStorage3D:ct,texSubImage2D:et,texSubImage3D:Pt,compressedTexSubImage2D:yt,compressedTexSubImage3D:bt,scissor:Ot,viewport:At,reset:be}}function Og(r,t,e,i){const n=Cw(i);switch(e){case i0:return r*t;case s0:return r*t;case r0:return r*t*2;case o0:return r*t/n.components*n.byteLength;case Cp:return r*t/n.components*n.byteLength;case a0:return r*t*2/n.components*n.byteLength;case Np:return r*t*2/n.components*n.byteLength;case n0:return r*t*3/n.components*n.byteLength;case yn:return r*t*4/n.components*n.byteLength;case Pp:return r*t*4/n.components*n.byteLength;case jc:case Kc:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*8;case Zc:case Qc:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*16;case cf:case uf:return Math.max(r,16)*Math.max(t,8)/4;case lf:case hf:return Math.max(r,8)*Math.max(t,8)/2;case df:case ff:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*8;case pf:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*16;case mf:return Math.floor((r+3)/4)*Math.floor((t+3)/4)*16;case gf:return Math.floor((r+4)/5)*Math.floor((t+3)/4)*16;case _f:return Math.floor((r+4)/5)*Math.floor((t+4)/5)*16;case xf:return Math.floor((r+5)/6)*Math.floor((t+4)/5)*16;case yf:return Math.floor((r+5)/6)*Math.floor((t+5)/6)*16;case vf:return Math.floor((r+7)/8)*Math.floor((t+4)/5)*16;case Sf:return Math.floor((r+7)/8)*Math.floor((t+5)/6)*16;case Mf:return Math.floor((r+7)/8)*Math.floor((t+7)/8)*16;case Tf:return Math.floor((r+9)/10)*Math.floor((t+4)/5)*16;case bf:return Math.floor((r+9)/10)*Math.floor((t+5)/6)*16;case Ef:return Math.floor((r+9)/10)*Math.floor((t+7)/8)*16;case Af:return Math.floor((r+9)/10)*Math.floor((t+9)/10)*16;case wf:return Math.floor((r+11)/12)*Math.floor((t+9)/10)*16;case Rf:return Math.floor((r+11)/12)*Math.floor((t+11)/12)*16;case Jc:case Cf:case Nf:return Math.ceil(r/4)*Math.ceil(t/4)*16;case l0:case Pf:return Math.ceil(r/4)*Math.ceil(t/4)*8;case Df:case Lf:return Math.ceil(r/4)*Math.ceil(t/4)*16}throw new Error(`Unable to determine texture byte length for ${e} format.`)}function Cw(r){switch(r){case Ss:case Jx:return{byteLength:1,components:1};case cl:case t0:case ma:return{byteLength:2,components:1};case wp:case Rp:return{byteLength:2,components:4};case Br:case Ap:case hs:return{byteLength:4,components:1};case e0:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${r}.`)}function Nw(r,t,e,i,n,s,o){const a=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,l=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),c=new ft,h=new WeakMap;let u;const d=new WeakMap;let f=!1;try{f=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function p(R,M){return f?new OffscreenCanvas(R,M):ul("canvas")}function _(R,M,k){let it=1;const st=Ft(R);if((st.width>k||st.height>k)&&(it=k/Math.max(st.width,st.height)),it<1)if(typeof HTMLImageElement<"u"&&R instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&R instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&R instanceof ImageBitmap||typeof VideoFrame<"u"&&R instanceof VideoFrame){const et=Math.floor(it*st.width),Pt=Math.floor(it*st.height);u===void 0&&(u=p(et,Pt));const yt=M?p(et,Pt):u;return yt.width=et,yt.height=Pt,yt.getContext("2d").drawImage(R,0,0,et,Pt),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+st.width+"x"+st.height+") to ("+et+"x"+Pt+")."),yt}else return"data"in R&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+st.width+"x"+st.height+")."),R;return R}function g(R){return R.generateMipmaps}function m(R){r.generateMipmap(R)}function y(R){return R.isWebGLCubeRenderTarget?r.TEXTURE_CUBE_MAP:R.isWebGL3DRenderTarget?r.TEXTURE_3D:R.isWebGLArrayRenderTarget||R.isCompressedArrayTexture?r.TEXTURE_2D_ARRAY:r.TEXTURE_2D}function v(R,M,k,it,st=!1){if(R!==null){if(r[R]!==void 0)return r[R];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+R+"'")}let et=M;if(M===r.RED&&(k===r.FLOAT&&(et=r.R32F),k===r.HALF_FLOAT&&(et=r.R16F),k===r.UNSIGNED_BYTE&&(et=r.R8)),M===r.RED_INTEGER&&(k===r.UNSIGNED_BYTE&&(et=r.R8UI),k===r.UNSIGNED_SHORT&&(et=r.R16UI),k===r.UNSIGNED_INT&&(et=r.R32UI),k===r.BYTE&&(et=r.R8I),k===r.SHORT&&(et=r.R16I),k===r.INT&&(et=r.R32I)),M===r.RG&&(k===r.FLOAT&&(et=r.RG32F),k===r.HALF_FLOAT&&(et=r.RG16F),k===r.UNSIGNED_BYTE&&(et=r.RG8)),M===r.RG_INTEGER&&(k===r.UNSIGNED_BYTE&&(et=r.RG8UI),k===r.UNSIGNED_SHORT&&(et=r.RG16UI),k===r.UNSIGNED_INT&&(et=r.RG32UI),k===r.BYTE&&(et=r.RG8I),k===r.SHORT&&(et=r.RG16I),k===r.INT&&(et=r.RG32I)),M===r.RGB_INTEGER&&(k===r.UNSIGNED_BYTE&&(et=r.RGB8UI),k===r.UNSIGNED_SHORT&&(et=r.RGB16UI),k===r.UNSIGNED_INT&&(et=r.RGB32UI),k===r.BYTE&&(et=r.RGB8I),k===r.SHORT&&(et=r.RGB16I),k===r.INT&&(et=r.RGB32I)),M===r.RGBA_INTEGER&&(k===r.UNSIGNED_BYTE&&(et=r.RGBA8UI),k===r.UNSIGNED_SHORT&&(et=r.RGBA16UI),k===r.UNSIGNED_INT&&(et=r.RGBA32UI),k===r.BYTE&&(et=r.RGBA8I),k===r.SHORT&&(et=r.RGBA16I),k===r.INT&&(et=r.RGBA32I)),M===r.RGB&&k===r.UNSIGNED_INT_5_9_9_9_REV&&(et=r.RGB9_E5),M===r.RGBA){const Pt=st?Ih:ce.getTransfer(it);k===r.FLOAT&&(et=r.RGBA32F),k===r.HALF_FLOAT&&(et=r.RGBA16F),k===r.UNSIGNED_BYTE&&(et=Pt===Me?r.SRGB8_ALPHA8:r.RGBA8),k===r.UNSIGNED_SHORT_4_4_4_4&&(et=r.RGBA4),k===r.UNSIGNED_SHORT_5_5_5_1&&(et=r.RGB5_A1)}return(et===r.R16F||et===r.R32F||et===r.RG16F||et===r.RG32F||et===r.RGBA16F||et===r.RGBA32F)&&t.get("EXT_color_buffer_float"),et}function x(R,M){let k;return R?M===null||M===Br||M===ra?k=r.DEPTH24_STENCIL8:M===hs?k=r.DEPTH32F_STENCIL8:M===cl&&(k=r.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):M===null||M===Br||M===ra?k=r.DEPTH_COMPONENT24:M===hs?k=r.DEPTH_COMPONENT32F:M===cl&&(k=r.DEPTH_COMPONENT16),k}function C(R,M){return g(R)===!0||R.isFramebufferTexture&&R.minFilter!==Sn&&R.minFilter!==Nn?Math.log2(Math.max(M.width,M.height))+1:R.mipmaps!==void 0&&R.mipmaps.length>0?R.mipmaps.length:R.isCompressedTexture&&Array.isArray(R.image)?M.mipmaps.length:1}function A(R){const M=R.target;M.removeEventListener("dispose",A),w(M),M.isVideoTexture&&h.delete(M)}function E(R){const M=R.target;M.removeEventListener("dispose",E),S(M)}function w(R){const M=i.get(R);if(M.__webglInit===void 0)return;const k=R.source,it=d.get(k);if(it){const st=it[M.__cacheKey];st.usedTimes--,st.usedTimes===0&&T(R),Object.keys(it).length===0&&d.delete(k)}i.remove(R)}function T(R){const M=i.get(R);r.deleteTexture(M.__webglTexture);const k=R.source,it=d.get(k);delete it[M.__cacheKey],o.memory.textures--}function S(R){const M=i.get(R);if(R.depthTexture&&(R.depthTexture.dispose(),i.remove(R.depthTexture)),R.isWebGLCubeRenderTarget)for(let it=0;it<6;it++){if(Array.isArray(M.__webglFramebuffer[it]))for(let st=0;st<M.__webglFramebuffer[it].length;st++)r.deleteFramebuffer(M.__webglFramebuffer[it][st]);else r.deleteFramebuffer(M.__webglFramebuffer[it]);M.__webglDepthbuffer&&r.deleteRenderbuffer(M.__webglDepthbuffer[it])}else{if(Array.isArray(M.__webglFramebuffer))for(let it=0;it<M.__webglFramebuffer.length;it++)r.deleteFramebuffer(M.__webglFramebuffer[it]);else r.deleteFramebuffer(M.__webglFramebuffer);if(M.__webglDepthbuffer&&r.deleteRenderbuffer(M.__webglDepthbuffer),M.__webglMultisampledFramebuffer&&r.deleteFramebuffer(M.__webglMultisampledFramebuffer),M.__webglColorRenderbuffer)for(let it=0;it<M.__webglColorRenderbuffer.length;it++)M.__webglColorRenderbuffer[it]&&r.deleteRenderbuffer(M.__webglColorRenderbuffer[it]);M.__webglDepthRenderbuffer&&r.deleteRenderbuffer(M.__webglDepthRenderbuffer)}const k=R.textures;for(let it=0,st=k.length;it<st;it++){const et=i.get(k[it]);et.__webglTexture&&(r.deleteTexture(et.__webglTexture),o.memory.textures--),i.remove(k[it])}i.remove(R)}let N=0;function G(){N=0}function B(){const R=N;return R>=n.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+R+" texture units while this GPU supports only "+n.maxTextures),N+=1,R}function V(R){const M=[];return M.push(R.wrapS),M.push(R.wrapT),M.push(R.wrapR||0),M.push(R.magFilter),M.push(R.minFilter),M.push(R.anisotropy),M.push(R.internalFormat),M.push(R.format),M.push(R.type),M.push(R.generateMipmaps),M.push(R.premultiplyAlpha),M.push(R.flipY),M.push(R.unpackAlignment),M.push(R.colorSpace),M.join()}function Q(R,M){const k=i.get(R);if(R.isVideoTexture&&Ut(R),R.isRenderTargetTexture===!1&&R.version>0&&k.__version!==R.version){const it=R.image;if(it===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(it.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{J(k,R,M);return}}e.bindTexture(r.TEXTURE_2D,k.__webglTexture,r.TEXTURE0+M)}function q(R,M){const k=i.get(R);if(R.version>0&&k.__version!==R.version){J(k,R,M);return}e.bindTexture(r.TEXTURE_2D_ARRAY,k.__webglTexture,r.TEXTURE0+M)}function rt(R,M){const k=i.get(R);if(R.version>0&&k.__version!==R.version){J(k,R,M);return}e.bindTexture(r.TEXTURE_3D,k.__webglTexture,r.TEXTURE0+M)}function $(R,M){const k=i.get(R);if(R.version>0&&k.__version!==R.version){lt(k,R,M);return}e.bindTexture(r.TEXTURE_CUBE_MAP,k.__webglTexture,r.TEXTURE0+M)}const ot={[of]:r.REPEAT,[Lr]:r.CLAMP_TO_EDGE,[af]:r.MIRRORED_REPEAT},dt={[Sn]:r.NEAREST,[nM]:r.NEAREST_MIPMAP_NEAREST,[Bl]:r.NEAREST_MIPMAP_LINEAR,[Nn]:r.LINEAR,[ou]:r.LINEAR_MIPMAP_NEAREST,[Fr]:r.LINEAR_MIPMAP_LINEAR},Tt={[aM]:r.NEVER,[fM]:r.ALWAYS,[lM]:r.LESS,[h0]:r.LEQUAL,[cM]:r.EQUAL,[dM]:r.GEQUAL,[hM]:r.GREATER,[uM]:r.NOTEQUAL};function Gt(R,M){if(M.type===hs&&t.has("OES_texture_float_linear")===!1&&(M.magFilter===Nn||M.magFilter===ou||M.magFilter===Bl||M.magFilter===Fr||M.minFilter===Nn||M.minFilter===ou||M.minFilter===Bl||M.minFilter===Fr)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),r.texParameteri(R,r.TEXTURE_WRAP_S,ot[M.wrapS]),r.texParameteri(R,r.TEXTURE_WRAP_T,ot[M.wrapT]),(R===r.TEXTURE_3D||R===r.TEXTURE_2D_ARRAY)&&r.texParameteri(R,r.TEXTURE_WRAP_R,ot[M.wrapR]),r.texParameteri(R,r.TEXTURE_MAG_FILTER,dt[M.magFilter]),r.texParameteri(R,r.TEXTURE_MIN_FILTER,dt[M.minFilter]),M.compareFunction&&(r.texParameteri(R,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(R,r.TEXTURE_COMPARE_FUNC,Tt[M.compareFunction])),t.has("EXT_texture_filter_anisotropic")===!0){if(M.magFilter===Sn||M.minFilter!==Bl&&M.minFilter!==Fr||M.type===hs&&t.has("OES_texture_float_linear")===!1)return;if(M.anisotropy>1||i.get(M).__currentAnisotropy){const k=t.get("EXT_texture_filter_anisotropic");r.texParameterf(R,k.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(M.anisotropy,n.getMaxAnisotropy())),i.get(M).__currentAnisotropy=M.anisotropy}}}function he(R,M){let k=!1;R.__webglInit===void 0&&(R.__webglInit=!0,M.addEventListener("dispose",A));const it=M.source;let st=d.get(it);st===void 0&&(st={},d.set(it,st));const et=V(M);if(et!==R.__cacheKey){st[et]===void 0&&(st[et]={texture:r.createTexture(),usedTimes:0},o.memory.textures++,k=!0),st[et].usedTimes++;const Pt=st[R.__cacheKey];Pt!==void 0&&(st[R.__cacheKey].usedTimes--,Pt.usedTimes===0&&T(M)),R.__cacheKey=et,R.__webglTexture=st[et].texture}return k}function J(R,M,k){let it=r.TEXTURE_2D;(M.isDataArrayTexture||M.isCompressedArrayTexture)&&(it=r.TEXTURE_2D_ARRAY),M.isData3DTexture&&(it=r.TEXTURE_3D);const st=he(R,M),et=M.source;e.bindTexture(it,R.__webglTexture,r.TEXTURE0+k);const Pt=i.get(et);if(et.version!==Pt.__version||st===!0){e.activeTexture(r.TEXTURE0+k);const yt=ce.getPrimaries(ce.workingColorSpace),bt=M.colorSpace===qs?null:ce.getPrimaries(M.colorSpace),le=M.colorSpace===qs||yt===bt?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,M.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,M.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,M.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,le);let ct=_(M.image,!1,n.maxTextureSize);ct=Ae(M,ct);const Et=s.convert(M.format,M.colorSpace),It=s.convert(M.type);let Ot=v(M.internalFormat,Et,It,M.colorSpace,M.isVideoTexture);Gt(it,M);let At;const se=M.mipmaps,jt=M.isVideoTexture!==!0,be=Pt.__version===void 0||st===!0,L=et.dataReady,_t=C(M,ct);if(M.isDepthTexture)Ot=x(M.format===oa,M.type),be&&(jt?e.texStorage2D(r.TEXTURE_2D,1,Ot,ct.width,ct.height):e.texImage2D(r.TEXTURE_2D,0,Ot,ct.width,ct.height,0,Et,It,null));else if(M.isDataTexture)if(se.length>0){jt&&be&&e.texStorage2D(r.TEXTURE_2D,_t,Ot,se[0].width,se[0].height);for(let Y=0,nt=se.length;Y<nt;Y++)At=se[Y],jt?L&&e.texSubImage2D(r.TEXTURE_2D,Y,0,0,At.width,At.height,Et,It,At.data):e.texImage2D(r.TEXTURE_2D,Y,Ot,At.width,At.height,0,Et,It,At.data);M.generateMipmaps=!1}else jt?(be&&e.texStorage2D(r.TEXTURE_2D,_t,Ot,ct.width,ct.height),L&&e.texSubImage2D(r.TEXTURE_2D,0,0,0,ct.width,ct.height,Et,It,ct.data)):e.texImage2D(r.TEXTURE_2D,0,Ot,ct.width,ct.height,0,Et,It,ct.data);else if(M.isCompressedTexture)if(M.isCompressedArrayTexture){jt&&be&&e.texStorage3D(r.TEXTURE_2D_ARRAY,_t,Ot,se[0].width,se[0].height,ct.depth);for(let Y=0,nt=se.length;Y<nt;Y++)if(At=se[Y],M.format!==yn)if(Et!==null)if(jt){if(L)if(M.layerUpdates.size>0){const Mt=Og(At.width,At.height,M.format,M.type);for(const vt of M.layerUpdates){const qt=At.data.subarray(vt*Mt/At.data.BYTES_PER_ELEMENT,(vt+1)*Mt/At.data.BYTES_PER_ELEMENT);e.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,Y,0,0,vt,At.width,At.height,1,Et,qt)}M.clearLayerUpdates()}else e.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,Y,0,0,0,At.width,At.height,ct.depth,Et,At.data)}else e.compressedTexImage3D(r.TEXTURE_2D_ARRAY,Y,Ot,At.width,At.height,ct.depth,0,At.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else jt?L&&e.texSubImage3D(r.TEXTURE_2D_ARRAY,Y,0,0,0,At.width,At.height,ct.depth,Et,It,At.data):e.texImage3D(r.TEXTURE_2D_ARRAY,Y,Ot,At.width,At.height,ct.depth,0,Et,It,At.data)}else{jt&&be&&e.texStorage2D(r.TEXTURE_2D,_t,Ot,se[0].width,se[0].height);for(let Y=0,nt=se.length;Y<nt;Y++)At=se[Y],M.format!==yn?Et!==null?jt?L&&e.compressedTexSubImage2D(r.TEXTURE_2D,Y,0,0,At.width,At.height,Et,At.data):e.compressedTexImage2D(r.TEXTURE_2D,Y,Ot,At.width,At.height,0,At.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):jt?L&&e.texSubImage2D(r.TEXTURE_2D,Y,0,0,At.width,At.height,Et,It,At.data):e.texImage2D(r.TEXTURE_2D,Y,Ot,At.width,At.height,0,Et,It,At.data)}else if(M.isDataArrayTexture)if(jt){if(be&&e.texStorage3D(r.TEXTURE_2D_ARRAY,_t,Ot,ct.width,ct.height,ct.depth),L)if(M.layerUpdates.size>0){const Y=Og(ct.width,ct.height,M.format,M.type);for(const nt of M.layerUpdates){const Mt=ct.data.subarray(nt*Y/ct.data.BYTES_PER_ELEMENT,(nt+1)*Y/ct.data.BYTES_PER_ELEMENT);e.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,nt,ct.width,ct.height,1,Et,It,Mt)}M.clearLayerUpdates()}else e.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,ct.width,ct.height,ct.depth,Et,It,ct.data)}else e.texImage3D(r.TEXTURE_2D_ARRAY,0,Ot,ct.width,ct.height,ct.depth,0,Et,It,ct.data);else if(M.isData3DTexture)jt?(be&&e.texStorage3D(r.TEXTURE_3D,_t,Ot,ct.width,ct.height,ct.depth),L&&e.texSubImage3D(r.TEXTURE_3D,0,0,0,0,ct.width,ct.height,ct.depth,Et,It,ct.data)):e.texImage3D(r.TEXTURE_3D,0,Ot,ct.width,ct.height,ct.depth,0,Et,It,ct.data);else if(M.isFramebufferTexture){if(be)if(jt)e.texStorage2D(r.TEXTURE_2D,_t,Ot,ct.width,ct.height);else{let Y=ct.width,nt=ct.height;for(let Mt=0;Mt<_t;Mt++)e.texImage2D(r.TEXTURE_2D,Mt,Ot,Y,nt,0,Et,It,null),Y>>=1,nt>>=1}}else if(se.length>0){if(jt&&be){const Y=Ft(se[0]);e.texStorage2D(r.TEXTURE_2D,_t,Ot,Y.width,Y.height)}for(let Y=0,nt=se.length;Y<nt;Y++)At=se[Y],jt?L&&e.texSubImage2D(r.TEXTURE_2D,Y,0,0,Et,It,At):e.texImage2D(r.TEXTURE_2D,Y,Ot,Et,It,At);M.generateMipmaps=!1}else if(jt){if(be){const Y=Ft(ct);e.texStorage2D(r.TEXTURE_2D,_t,Ot,Y.width,Y.height)}L&&e.texSubImage2D(r.TEXTURE_2D,0,0,0,Et,It,ct)}else e.texImage2D(r.TEXTURE_2D,0,Ot,Et,It,ct);g(M)&&m(it),Pt.__version=et.version,M.onUpdate&&M.onUpdate(M)}R.__version=M.version}function lt(R,M,k){if(M.image.length!==6)return;const it=he(R,M),st=M.source;e.bindTexture(r.TEXTURE_CUBE_MAP,R.__webglTexture,r.TEXTURE0+k);const et=i.get(st);if(st.version!==et.__version||it===!0){e.activeTexture(r.TEXTURE0+k);const Pt=ce.getPrimaries(ce.workingColorSpace),yt=M.colorSpace===qs?null:ce.getPrimaries(M.colorSpace),bt=M.colorSpace===qs||Pt===yt?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,M.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,M.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,M.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,bt);const le=M.isCompressedTexture||M.image[0].isCompressedTexture,ct=M.image[0]&&M.image[0].isDataTexture,Et=[];for(let nt=0;nt<6;nt++)!le&&!ct?Et[nt]=_(M.image[nt],!0,n.maxCubemapSize):Et[nt]=ct?M.image[nt].image:M.image[nt],Et[nt]=Ae(M,Et[nt]);const It=Et[0],Ot=s.convert(M.format,M.colorSpace),At=s.convert(M.type),se=v(M.internalFormat,Ot,At,M.colorSpace),jt=M.isVideoTexture!==!0,be=et.__version===void 0||it===!0,L=st.dataReady;let _t=C(M,It);Gt(r.TEXTURE_CUBE_MAP,M);let Y;if(le){jt&&be&&e.texStorage2D(r.TEXTURE_CUBE_MAP,_t,se,It.width,It.height);for(let nt=0;nt<6;nt++){Y=Et[nt].mipmaps;for(let Mt=0;Mt<Y.length;Mt++){const vt=Y[Mt];M.format!==yn?Ot!==null?jt?L&&e.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+nt,Mt,0,0,vt.width,vt.height,Ot,vt.data):e.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+nt,Mt,se,vt.width,vt.height,0,vt.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):jt?L&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+nt,Mt,0,0,vt.width,vt.height,Ot,At,vt.data):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+nt,Mt,se,vt.width,vt.height,0,Ot,At,vt.data)}}}else{if(Y=M.mipmaps,jt&&be){Y.length>0&&_t++;const nt=Ft(Et[0]);e.texStorage2D(r.TEXTURE_CUBE_MAP,_t,se,nt.width,nt.height)}for(let nt=0;nt<6;nt++)if(ct){jt?L&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+nt,0,0,0,Et[nt].width,Et[nt].height,Ot,At,Et[nt].data):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+nt,0,se,Et[nt].width,Et[nt].height,0,Ot,At,Et[nt].data);for(let Mt=0;Mt<Y.length;Mt++){const qt=Y[Mt].image[nt].image;jt?L&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+nt,Mt+1,0,0,qt.width,qt.height,Ot,At,qt.data):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+nt,Mt+1,se,qt.width,qt.height,0,Ot,At,qt.data)}}else{jt?L&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+nt,0,0,0,Ot,At,Et[nt]):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+nt,0,se,Ot,At,Et[nt]);for(let Mt=0;Mt<Y.length;Mt++){const vt=Y[Mt];jt?L&&e.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+nt,Mt+1,0,0,Ot,At,vt.image[nt]):e.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+nt,Mt+1,se,Ot,At,vt.image[nt])}}}g(M)&&m(r.TEXTURE_CUBE_MAP),et.__version=st.version,M.onUpdate&&M.onUpdate(M)}R.__version=M.version}function Nt(R,M,k,it,st,et){const Pt=s.convert(k.format,k.colorSpace),yt=s.convert(k.type),bt=v(k.internalFormat,Pt,yt,k.colorSpace),le=i.get(M),ct=i.get(k);if(ct.__renderTarget=M,!le.__hasExternalTextures){const Et=Math.max(1,M.width>>et),It=Math.max(1,M.height>>et);st===r.TEXTURE_3D||st===r.TEXTURE_2D_ARRAY?e.texImage3D(st,et,bt,Et,It,M.depth,0,Pt,yt,null):e.texImage2D(st,et,bt,Et,It,0,Pt,yt,null)}e.bindFramebuffer(r.FRAMEBUFFER,R),ne(M)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,it,st,ct.__webglTexture,0,ie(M)):(st===r.TEXTURE_2D||st>=r.TEXTURE_CUBE_MAP_POSITIVE_X&&st<=r.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&r.framebufferTexture2D(r.FRAMEBUFFER,it,st,ct.__webglTexture,et),e.bindFramebuffer(r.FRAMEBUFFER,null)}function xt(R,M,k){if(r.bindRenderbuffer(r.RENDERBUFFER,R),M.depthBuffer){const it=M.depthTexture,st=it&&it.isDepthTexture?it.type:null,et=x(M.stencilBuffer,st),Pt=M.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,yt=ie(M);ne(M)?a.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,yt,et,M.width,M.height):k?r.renderbufferStorageMultisample(r.RENDERBUFFER,yt,et,M.width,M.height):r.renderbufferStorage(r.RENDERBUFFER,et,M.width,M.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,Pt,r.RENDERBUFFER,R)}else{const it=M.textures;for(let st=0;st<it.length;st++){const et=it[st],Pt=s.convert(et.format,et.colorSpace),yt=s.convert(et.type),bt=v(et.internalFormat,Pt,yt,et.colorSpace),le=ie(M);k&&ne(M)===!1?r.renderbufferStorageMultisample(r.RENDERBUFFER,le,bt,M.width,M.height):ne(M)?a.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,le,bt,M.width,M.height):r.renderbufferStorage(r.RENDERBUFFER,bt,M.width,M.height)}}r.bindRenderbuffer(r.RENDERBUFFER,null)}function Bt(R,M){if(M&&M.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(r.FRAMEBUFFER,R),!(M.depthTexture&&M.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const it=i.get(M.depthTexture);it.__renderTarget=M,(!it.__webglTexture||M.depthTexture.image.width!==M.width||M.depthTexture.image.height!==M.height)&&(M.depthTexture.image.width=M.width,M.depthTexture.image.height=M.height,M.depthTexture.needsUpdate=!0),Q(M.depthTexture,0);const st=it.__webglTexture,et=ie(M);if(M.depthTexture.format===Xo)ne(M)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,st,0,et):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,st,0);else if(M.depthTexture.format===oa)ne(M)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,st,0,et):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,st,0);else throw new Error("Unknown depthTexture format")}function Wt(R){const M=i.get(R),k=R.isWebGLCubeRenderTarget===!0;if(M.__boundDepthTexture!==R.depthTexture){const it=R.depthTexture;if(M.__depthDisposeCallback&&M.__depthDisposeCallback(),it){const st=()=>{delete M.__boundDepthTexture,delete M.__depthDisposeCallback,it.removeEventListener("dispose",st)};it.addEventListener("dispose",st),M.__depthDisposeCallback=st}M.__boundDepthTexture=it}if(R.depthTexture&&!M.__autoAllocateDepthBuffer){if(k)throw new Error("target.depthTexture not supported in Cube render targets");Bt(M.__webglFramebuffer,R)}else if(k){M.__webglDepthbuffer=[];for(let it=0;it<6;it++)if(e.bindFramebuffer(r.FRAMEBUFFER,M.__webglFramebuffer[it]),M.__webglDepthbuffer[it]===void 0)M.__webglDepthbuffer[it]=r.createRenderbuffer(),xt(M.__webglDepthbuffer[it],R,!1);else{const st=R.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,et=M.__webglDepthbuffer[it];r.bindRenderbuffer(r.RENDERBUFFER,et),r.framebufferRenderbuffer(r.FRAMEBUFFER,st,r.RENDERBUFFER,et)}}else if(e.bindFramebuffer(r.FRAMEBUFFER,M.__webglFramebuffer),M.__webglDepthbuffer===void 0)M.__webglDepthbuffer=r.createRenderbuffer(),xt(M.__webglDepthbuffer,R,!1);else{const it=R.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,st=M.__webglDepthbuffer;r.bindRenderbuffer(r.RENDERBUFFER,st),r.framebufferRenderbuffer(r.FRAMEBUFFER,it,r.RENDERBUFFER,st)}e.bindFramebuffer(r.FRAMEBUFFER,null)}function te(R,M,k){const it=i.get(R);M!==void 0&&Nt(it.__webglFramebuffer,R,R.texture,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,0),k!==void 0&&Wt(R)}function Fe(R){const M=R.texture,k=i.get(R),it=i.get(M);R.addEventListener("dispose",E);const st=R.textures,et=R.isWebGLCubeRenderTarget===!0,Pt=st.length>1;if(Pt||(it.__webglTexture===void 0&&(it.__webglTexture=r.createTexture()),it.__version=M.version,o.memory.textures++),et){k.__webglFramebuffer=[];for(let yt=0;yt<6;yt++)if(M.mipmaps&&M.mipmaps.length>0){k.__webglFramebuffer[yt]=[];for(let bt=0;bt<M.mipmaps.length;bt++)k.__webglFramebuffer[yt][bt]=r.createFramebuffer()}else k.__webglFramebuffer[yt]=r.createFramebuffer()}else{if(M.mipmaps&&M.mipmaps.length>0){k.__webglFramebuffer=[];for(let yt=0;yt<M.mipmaps.length;yt++)k.__webglFramebuffer[yt]=r.createFramebuffer()}else k.__webglFramebuffer=r.createFramebuffer();if(Pt)for(let yt=0,bt=st.length;yt<bt;yt++){const le=i.get(st[yt]);le.__webglTexture===void 0&&(le.__webglTexture=r.createTexture(),o.memory.textures++)}if(R.samples>0&&ne(R)===!1){k.__webglMultisampledFramebuffer=r.createFramebuffer(),k.__webglColorRenderbuffer=[],e.bindFramebuffer(r.FRAMEBUFFER,k.__webglMultisampledFramebuffer);for(let yt=0;yt<st.length;yt++){const bt=st[yt];k.__webglColorRenderbuffer[yt]=r.createRenderbuffer(),r.bindRenderbuffer(r.RENDERBUFFER,k.__webglColorRenderbuffer[yt]);const le=s.convert(bt.format,bt.colorSpace),ct=s.convert(bt.type),Et=v(bt.internalFormat,le,ct,bt.colorSpace,R.isXRRenderTarget===!0),It=ie(R);r.renderbufferStorageMultisample(r.RENDERBUFFER,It,Et,R.width,R.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+yt,r.RENDERBUFFER,k.__webglColorRenderbuffer[yt])}r.bindRenderbuffer(r.RENDERBUFFER,null),R.depthBuffer&&(k.__webglDepthRenderbuffer=r.createRenderbuffer(),xt(k.__webglDepthRenderbuffer,R,!0)),e.bindFramebuffer(r.FRAMEBUFFER,null)}}if(et){e.bindTexture(r.TEXTURE_CUBE_MAP,it.__webglTexture),Gt(r.TEXTURE_CUBE_MAP,M);for(let yt=0;yt<6;yt++)if(M.mipmaps&&M.mipmaps.length>0)for(let bt=0;bt<M.mipmaps.length;bt++)Nt(k.__webglFramebuffer[yt][bt],R,M,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+yt,bt);else Nt(k.__webglFramebuffer[yt],R,M,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+yt,0);g(M)&&m(r.TEXTURE_CUBE_MAP),e.unbindTexture()}else if(Pt){for(let yt=0,bt=st.length;yt<bt;yt++){const le=st[yt],ct=i.get(le);e.bindTexture(r.TEXTURE_2D,ct.__webglTexture),Gt(r.TEXTURE_2D,le),Nt(k.__webglFramebuffer,R,le,r.COLOR_ATTACHMENT0+yt,r.TEXTURE_2D,0),g(le)&&m(r.TEXTURE_2D)}e.unbindTexture()}else{let yt=r.TEXTURE_2D;if((R.isWebGL3DRenderTarget||R.isWebGLArrayRenderTarget)&&(yt=R.isWebGL3DRenderTarget?r.TEXTURE_3D:r.TEXTURE_2D_ARRAY),e.bindTexture(yt,it.__webglTexture),Gt(yt,M),M.mipmaps&&M.mipmaps.length>0)for(let bt=0;bt<M.mipmaps.length;bt++)Nt(k.__webglFramebuffer[bt],R,M,r.COLOR_ATTACHMENT0,yt,bt);else Nt(k.__webglFramebuffer,R,M,r.COLOR_ATTACHMENT0,yt,0);g(M)&&m(yt),e.unbindTexture()}R.depthBuffer&&Wt(R)}function ae(R){const M=R.textures;for(let k=0,it=M.length;k<it;k++){const st=M[k];if(g(st)){const et=y(R),Pt=i.get(st).__webglTexture;e.bindTexture(et,Pt),m(et),e.unbindTexture()}}}const Ge=[],O=[];function ji(R){if(R.samples>0){if(ne(R)===!1){const M=R.textures,k=R.width,it=R.height;let st=r.COLOR_BUFFER_BIT;const et=R.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,Pt=i.get(R),yt=M.length>1;if(yt)for(let bt=0;bt<M.length;bt++)e.bindFramebuffer(r.FRAMEBUFFER,Pt.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+bt,r.RENDERBUFFER,null),e.bindFramebuffer(r.FRAMEBUFFER,Pt.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+bt,r.TEXTURE_2D,null,0);e.bindFramebuffer(r.READ_FRAMEBUFFER,Pt.__webglMultisampledFramebuffer),e.bindFramebuffer(r.DRAW_FRAMEBUFFER,Pt.__webglFramebuffer);for(let bt=0;bt<M.length;bt++){if(R.resolveDepthBuffer&&(R.depthBuffer&&(st|=r.DEPTH_BUFFER_BIT),R.stencilBuffer&&R.resolveStencilBuffer&&(st|=r.STENCIL_BUFFER_BIT)),yt){r.framebufferRenderbuffer(r.READ_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.RENDERBUFFER,Pt.__webglColorRenderbuffer[bt]);const le=i.get(M[bt]).__webglTexture;r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,le,0)}r.blitFramebuffer(0,0,k,it,0,0,k,it,st,r.NEAREST),l===!0&&(Ge.length=0,O.length=0,Ge.push(r.COLOR_ATTACHMENT0+bt),R.depthBuffer&&R.resolveDepthBuffer===!1&&(Ge.push(et),O.push(et),r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,O)),r.invalidateFramebuffer(r.READ_FRAMEBUFFER,Ge))}if(e.bindFramebuffer(r.READ_FRAMEBUFFER,null),e.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),yt)for(let bt=0;bt<M.length;bt++){e.bindFramebuffer(r.FRAMEBUFFER,Pt.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+bt,r.RENDERBUFFER,Pt.__webglColorRenderbuffer[bt]);const le=i.get(M[bt]).__webglTexture;e.bindFramebuffer(r.FRAMEBUFFER,Pt.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+bt,r.TEXTURE_2D,le,0)}e.bindFramebuffer(r.DRAW_FRAMEBUFFER,Pt.__webglMultisampledFramebuffer)}else if(R.depthBuffer&&R.resolveDepthBuffer===!1&&l){const M=R.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT;r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,[M])}}}function ie(R){return Math.min(n.maxSamples,R.samples)}function ne(R){const M=i.get(R);return R.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&M.__useRenderToTexture!==!1}function Ut(R){const M=o.render.frame;h.get(R)!==M&&(h.set(R,M),R.update())}function Ae(R,M){const k=R.colorSpace,it=R.format,st=R.type;return R.isCompressedTexture===!0||R.isVideoTexture===!0||k!==ga&&k!==qs&&(ce.getTransfer(k)===Me?(it!==yn||st!==Ss)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",k)),M}function Ft(R){return typeof HTMLImageElement<"u"&&R instanceof HTMLImageElement?(c.width=R.naturalWidth||R.width,c.height=R.naturalHeight||R.height):typeof VideoFrame<"u"&&R instanceof VideoFrame?(c.width=R.displayWidth,c.height=R.displayHeight):(c.width=R.width,c.height=R.height),c}this.allocateTextureUnit=B,this.resetTextureUnits=G,this.setTexture2D=Q,this.setTexture2DArray=q,this.setTexture3D=rt,this.setTextureCube=$,this.rebindTextures=te,this.setupRenderTarget=Fe,this.updateRenderTargetMipmap=ae,this.updateMultisampleRenderTarget=ji,this.setupDepthRenderbuffer=Wt,this.setupFrameBufferTexture=Nt,this.useMultisampledRTT=ne}function Pw(r,t){function e(i,n=qs){let s;const o=ce.getTransfer(n);if(i===Ss)return r.UNSIGNED_BYTE;if(i===wp)return r.UNSIGNED_SHORT_4_4_4_4;if(i===Rp)return r.UNSIGNED_SHORT_5_5_5_1;if(i===e0)return r.UNSIGNED_INT_5_9_9_9_REV;if(i===Jx)return r.BYTE;if(i===t0)return r.SHORT;if(i===cl)return r.UNSIGNED_SHORT;if(i===Ap)return r.INT;if(i===Br)return r.UNSIGNED_INT;if(i===hs)return r.FLOAT;if(i===ma)return r.HALF_FLOAT;if(i===i0)return r.ALPHA;if(i===n0)return r.RGB;if(i===yn)return r.RGBA;if(i===s0)return r.LUMINANCE;if(i===r0)return r.LUMINANCE_ALPHA;if(i===Xo)return r.DEPTH_COMPONENT;if(i===oa)return r.DEPTH_STENCIL;if(i===o0)return r.RED;if(i===Cp)return r.RED_INTEGER;if(i===a0)return r.RG;if(i===Np)return r.RG_INTEGER;if(i===Pp)return r.RGBA_INTEGER;if(i===jc||i===Kc||i===Zc||i===Qc)if(o===Me)if(s=t.get("WEBGL_compressed_texture_s3tc_srgb"),s!==null){if(i===jc)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(i===Kc)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(i===Zc)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(i===Qc)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(s=t.get("WEBGL_compressed_texture_s3tc"),s!==null){if(i===jc)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(i===Kc)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(i===Zc)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(i===Qc)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(i===lf||i===cf||i===hf||i===uf)if(s=t.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(i===lf)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(i===cf)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(i===hf)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(i===uf)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(i===df||i===ff||i===pf)if(s=t.get("WEBGL_compressed_texture_etc"),s!==null){if(i===df||i===ff)return o===Me?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(i===pf)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(i===mf||i===gf||i===_f||i===xf||i===yf||i===vf||i===Sf||i===Mf||i===Tf||i===bf||i===Ef||i===Af||i===wf||i===Rf)if(s=t.get("WEBGL_compressed_texture_astc"),s!==null){if(i===mf)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(i===gf)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(i===_f)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(i===xf)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(i===yf)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(i===vf)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(i===Sf)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(i===Mf)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(i===Tf)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(i===bf)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(i===Ef)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(i===Af)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(i===wf)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(i===Rf)return o===Me?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(i===Jc||i===Cf||i===Nf)if(s=t.get("EXT_texture_compression_bptc"),s!==null){if(i===Jc)return o===Me?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(i===Cf)return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(i===Nf)return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(i===l0||i===Pf||i===Df||i===Lf)if(s=t.get("EXT_texture_compression_rgtc"),s!==null){if(i===Jc)return s.COMPRESSED_RED_RGTC1_EXT;if(i===Pf)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(i===Df)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(i===Lf)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return i===ra?r.UNSIGNED_INT_24_8:r[i]!==void 0?r[i]:null}return{convert:e}}class Dw extends pn{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}class sc extends Ui{constructor(){super(),this.isGroup=!0,this.type="Group"}}const Lw={type:"move"};class Lu{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new sc,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new sc,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new P,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new P),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new sc,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new P,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new P),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const i of t.hand.values())this._getHandJoint(e,i)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,e,i){let n=null,s=null,o=null;const a=this._targetRay,l=this._grip,c=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(c&&t.hand){o=!0;for(const _ of t.hand.values()){const g=e.getJointPose(_,i),m=this._getHandJoint(c,_);g!==null&&(m.matrix.fromArray(g.transform.matrix),m.matrix.decompose(m.position,m.rotation,m.scale),m.matrixWorldNeedsUpdate=!0,m.jointRadius=g.radius),m.visible=g!==null}const h=c.joints["index-finger-tip"],u=c.joints["thumb-tip"],d=h.position.distanceTo(u.position),f=.02,p=.005;c.inputState.pinching&&d>f+p?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!c.inputState.pinching&&d<=f-p&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else l!==null&&t.gripSpace&&(s=e.getPose(t.gripSpace,i),s!==null&&(l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,s.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(s.linearVelocity)):l.hasLinearVelocity=!1,s.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(s.angularVelocity)):l.hasAngularVelocity=!1));a!==null&&(n=e.getPose(t.targetRaySpace,i),n===null&&s!==null&&(n=s),n!==null&&(a.matrix.fromArray(n.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,n.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(n.linearVelocity)):a.hasLinearVelocity=!1,n.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(n.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(Lw)))}return a!==null&&(a.visible=n!==null),l!==null&&(l.visible=s!==null),c!==null&&(c.visible=o!==null),this}_getHandJoint(t,e){if(t.joints[e.jointName]===void 0){const i=new sc;i.matrixAutoUpdate=!1,i.visible=!1,t.joints[e.jointName]=i,t.add(i)}return t.joints[e.jointName]}}const Fw=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,Uw=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class Iw{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,e,i){if(this.texture===null){const n=new sn,s=t.properties.get(n);s.__webglTexture=e.texture,(e.depthNear!=i.depthNear||e.depthFar!=i.depthFar)&&(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=n}}getMesh(t){if(this.texture!==null&&this.mesh===null){const e=t.cameras[0].viewport,i=new Un({vertexShader:Fw,fragmentShader:Uw,uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new Pn(new zh(20,20),i)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class Bw extends Wr{constructor(t,e){super();const i=this;let n=null,s=1,o=null,a="local-floor",l=1,c=null,h=null,u=null,d=null,f=null,p=null;const _=new Iw,g=e.getContextAttributes();let m=null,y=null;const v=[],x=[],C=new ft;let A=null;const E=new pn;E.viewport=new qe;const w=new pn;w.viewport=new qe;const T=[E,w],S=new Dw;let N=null,G=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(J){let lt=v[J];return lt===void 0&&(lt=new Lu,v[J]=lt),lt.getTargetRaySpace()},this.getControllerGrip=function(J){let lt=v[J];return lt===void 0&&(lt=new Lu,v[J]=lt),lt.getGripSpace()},this.getHand=function(J){let lt=v[J];return lt===void 0&&(lt=new Lu,v[J]=lt),lt.getHandSpace()};function B(J){const lt=x.indexOf(J.inputSource);if(lt===-1)return;const Nt=v[lt];Nt!==void 0&&(Nt.update(J.inputSource,J.frame,c||o),Nt.dispatchEvent({type:J.type,data:J.inputSource}))}function V(){n.removeEventListener("select",B),n.removeEventListener("selectstart",B),n.removeEventListener("selectend",B),n.removeEventListener("squeeze",B),n.removeEventListener("squeezestart",B),n.removeEventListener("squeezeend",B),n.removeEventListener("end",V),n.removeEventListener("inputsourceschange",Q);for(let J=0;J<v.length;J++){const lt=x[J];lt!==null&&(x[J]=null,v[J].disconnect(lt))}N=null,G=null,_.reset(),t.setRenderTarget(m),f=null,d=null,u=null,n=null,y=null,he.stop(),i.isPresenting=!1,t.setPixelRatio(A),t.setSize(C.width,C.height,!1),i.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(J){s=J,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(J){a=J,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return c||o},this.setReferenceSpace=function(J){c=J},this.getBaseLayer=function(){return d!==null?d:f},this.getBinding=function(){return u},this.getFrame=function(){return p},this.getSession=function(){return n},this.setSession=async function(J){if(n=J,n!==null){if(m=t.getRenderTarget(),n.addEventListener("select",B),n.addEventListener("selectstart",B),n.addEventListener("selectend",B),n.addEventListener("squeeze",B),n.addEventListener("squeezestart",B),n.addEventListener("squeezeend",B),n.addEventListener("end",V),n.addEventListener("inputsourceschange",Q),g.xrCompatible!==!0&&await e.makeXRCompatible(),A=t.getPixelRatio(),t.getSize(C),n.renderState.layers===void 0){const lt={antialias:g.antialias,alpha:!0,depth:g.depth,stencil:g.stencil,framebufferScaleFactor:s};f=new XRWebGLLayer(n,e,lt),n.updateRenderState({baseLayer:f}),t.setPixelRatio(1),t.setSize(f.framebufferWidth,f.framebufferHeight,!1),y=new sr(f.framebufferWidth,f.framebufferHeight,{format:yn,type:Ss,colorSpace:t.outputColorSpace,stencilBuffer:g.stencil})}else{let lt=null,Nt=null,xt=null;g.depth&&(xt=g.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,lt=g.stencil?oa:Xo,Nt=g.stencil?ra:Br);const Bt={colorFormat:e.RGBA8,depthFormat:xt,scaleFactor:s};u=new XRWebGLBinding(n,e),d=u.createProjectionLayer(Bt),n.updateRenderState({layers:[d]}),t.setPixelRatio(1),t.setSize(d.textureWidth,d.textureHeight,!1),y=new sr(d.textureWidth,d.textureHeight,{format:yn,type:Ss,depthTexture:new N0(d.textureWidth,d.textureHeight,Nt,void 0,void 0,void 0,void 0,void 0,void 0,lt),stencilBuffer:g.stencil,colorSpace:t.outputColorSpace,samples:g.antialias?4:0,resolveDepthBuffer:d.ignoreDepthValues===!1})}y.isXRRenderTarget=!0,this.setFoveation(l),c=null,o=await n.requestReferenceSpace(a),he.setContext(n),he.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(n!==null)return n.environmentBlendMode},this.getDepthTexture=function(){return _.getDepthTexture()};function Q(J){for(let lt=0;lt<J.removed.length;lt++){const Nt=J.removed[lt],xt=x.indexOf(Nt);xt>=0&&(x[xt]=null,v[xt].disconnect(Nt))}for(let lt=0;lt<J.added.length;lt++){const Nt=J.added[lt];let xt=x.indexOf(Nt);if(xt===-1){for(let Wt=0;Wt<v.length;Wt++)if(Wt>=x.length){x.push(Nt),xt=Wt;break}else if(x[Wt]===null){x[Wt]=Nt,xt=Wt;break}if(xt===-1)break}const Bt=v[xt];Bt&&Bt.connect(Nt)}}const q=new P,rt=new P;function $(J,lt,Nt){q.setFromMatrixPosition(lt.matrixWorld),rt.setFromMatrixPosition(Nt.matrixWorld);const xt=q.distanceTo(rt),Bt=lt.projectionMatrix.elements,Wt=Nt.projectionMatrix.elements,te=Bt[14]/(Bt[10]-1),Fe=Bt[14]/(Bt[10]+1),ae=(Bt[9]+1)/Bt[5],Ge=(Bt[9]-1)/Bt[5],O=(Bt[8]-1)/Bt[0],ji=(Wt[8]+1)/Wt[0],ie=te*O,ne=te*ji,Ut=xt/(-O+ji),Ae=Ut*-O;if(lt.matrixWorld.decompose(J.position,J.quaternion,J.scale),J.translateX(Ae),J.translateZ(Ut),J.matrixWorld.compose(J.position,J.quaternion,J.scale),J.matrixWorldInverse.copy(J.matrixWorld).invert(),Bt[10]===-1)J.projectionMatrix.copy(lt.projectionMatrix),J.projectionMatrixInverse.copy(lt.projectionMatrixInverse);else{const Ft=te+Ut,R=Fe+Ut,M=ie-Ae,k=ne+(xt-Ae),it=ae*Fe/R*Ft,st=Ge*Fe/R*Ft;J.projectionMatrix.makePerspective(M,k,it,st,Ft,R),J.projectionMatrixInverse.copy(J.projectionMatrix).invert()}}function ot(J,lt){lt===null?J.matrixWorld.copy(J.matrix):J.matrixWorld.multiplyMatrices(lt.matrixWorld,J.matrix),J.matrixWorldInverse.copy(J.matrixWorld).invert()}this.updateCamera=function(J){if(n===null)return;let lt=J.near,Nt=J.far;_.texture!==null&&(_.depthNear>0&&(lt=_.depthNear),_.depthFar>0&&(Nt=_.depthFar)),S.near=w.near=E.near=lt,S.far=w.far=E.far=Nt,(N!==S.near||G!==S.far)&&(n.updateRenderState({depthNear:S.near,depthFar:S.far}),N=S.near,G=S.far),E.layers.mask=J.layers.mask|2,w.layers.mask=J.layers.mask|4,S.layers.mask=E.layers.mask|w.layers.mask;const xt=J.parent,Bt=S.cameras;ot(S,xt);for(let Wt=0;Wt<Bt.length;Wt++)ot(Bt[Wt],xt);Bt.length===2?$(S,E,w):S.projectionMatrix.copy(E.projectionMatrix),dt(J,S,xt)};function dt(J,lt,Nt){Nt===null?J.matrix.copy(lt.matrixWorld):(J.matrix.copy(Nt.matrixWorld),J.matrix.invert(),J.matrix.multiply(lt.matrixWorld)),J.matrix.decompose(J.position,J.quaternion,J.scale),J.updateMatrixWorld(!0),J.projectionMatrix.copy(lt.projectionMatrix),J.projectionMatrixInverse.copy(lt.projectionMatrixInverse),J.isPerspectiveCamera&&(J.fov=hl*2*Math.atan(1/J.projectionMatrix.elements[5]),J.zoom=1)}this.getCamera=function(){return S},this.getFoveation=function(){if(!(d===null&&f===null))return l},this.setFoveation=function(J){l=J,d!==null&&(d.fixedFoveation=J),f!==null&&f.fixedFoveation!==void 0&&(f.fixedFoveation=J)},this.hasDepthSensing=function(){return _.texture!==null},this.getDepthSensingMesh=function(){return _.getMesh(S)};let Tt=null;function Gt(J,lt){if(h=lt.getViewerPose(c||o),p=lt,h!==null){const Nt=h.views;f!==null&&(t.setRenderTargetFramebuffer(y,f.framebuffer),t.setRenderTarget(y));let xt=!1;Nt.length!==S.cameras.length&&(S.cameras.length=0,xt=!0);for(let Wt=0;Wt<Nt.length;Wt++){const te=Nt[Wt];let Fe=null;if(f!==null)Fe=f.getViewport(te);else{const Ge=u.getViewSubImage(d,te);Fe=Ge.viewport,Wt===0&&(t.setRenderTargetTextures(y,Ge.colorTexture,d.ignoreDepthValues?void 0:Ge.depthStencilTexture),t.setRenderTarget(y))}let ae=T[Wt];ae===void 0&&(ae=new pn,ae.layers.enable(Wt),ae.viewport=new qe,T[Wt]=ae),ae.matrix.fromArray(te.transform.matrix),ae.matrix.decompose(ae.position,ae.quaternion,ae.scale),ae.projectionMatrix.fromArray(te.projectionMatrix),ae.projectionMatrixInverse.copy(ae.projectionMatrix).invert(),ae.viewport.set(Fe.x,Fe.y,Fe.width,Fe.height),Wt===0&&(S.matrix.copy(ae.matrix),S.matrix.decompose(S.position,S.quaternion,S.scale)),xt===!0&&S.cameras.push(ae)}const Bt=n.enabledFeatures;if(Bt&&Bt.includes("depth-sensing")){const Wt=u.getDepthInformation(Nt[0]);Wt&&Wt.isValid&&Wt.texture&&_.init(t,Wt,n.renderState)}}for(let Nt=0;Nt<v.length;Nt++){const xt=x[Nt],Bt=v[Nt];xt!==null&&Bt!==void 0&&Bt.update(xt,lt,c||o)}Tt&&Tt(J,lt),lt.detectedPlanes&&i.dispatchEvent({type:"planesdetected",data:lt}),p=null}const he=new C0;he.setAnimationLoop(Gt),this.setAnimationLoop=function(J){Tt=J},this.dispose=function(){}}}const _r=new rr,Ow=new Pe;function zw(r,t){function e(g,m){g.matrixAutoUpdate===!0&&g.updateMatrix(),m.value.copy(g.matrix)}function i(g,m){m.color.getRGB(g.fogColor.value,E0(r)),m.isFog?(g.fogNear.value=m.near,g.fogFar.value=m.far):m.isFogExp2&&(g.fogDensity.value=m.density)}function n(g,m,y,v,x){m.isMeshBasicMaterial||m.isMeshLambertMaterial?s(g,m):m.isMeshToonMaterial?(s(g,m),u(g,m)):m.isMeshPhongMaterial?(s(g,m),h(g,m)):m.isMeshStandardMaterial?(s(g,m),d(g,m),m.isMeshPhysicalMaterial&&f(g,m,x)):m.isMeshMatcapMaterial?(s(g,m),p(g,m)):m.isMeshDepthMaterial?s(g,m):m.isMeshDistanceMaterial?(s(g,m),_(g,m)):m.isMeshNormalMaterial?s(g,m):m.isLineBasicMaterial?(o(g,m),m.isLineDashedMaterial&&a(g,m)):m.isPointsMaterial?l(g,m,y,v):m.isSpriteMaterial?c(g,m):m.isShadowMaterial?(g.color.value.copy(m.color),g.opacity.value=m.opacity):m.isShaderMaterial&&(m.uniformsNeedUpdate=!1)}function s(g,m){g.opacity.value=m.opacity,m.color&&g.diffuse.value.copy(m.color),m.emissive&&g.emissive.value.copy(m.emissive).multiplyScalar(m.emissiveIntensity),m.map&&(g.map.value=m.map,e(m.map,g.mapTransform)),m.alphaMap&&(g.alphaMap.value=m.alphaMap,e(m.alphaMap,g.alphaMapTransform)),m.bumpMap&&(g.bumpMap.value=m.bumpMap,e(m.bumpMap,g.bumpMapTransform),g.bumpScale.value=m.bumpScale,m.side===Fi&&(g.bumpScale.value*=-1)),m.normalMap&&(g.normalMap.value=m.normalMap,e(m.normalMap,g.normalMapTransform),g.normalScale.value.copy(m.normalScale),m.side===Fi&&g.normalScale.value.negate()),m.displacementMap&&(g.displacementMap.value=m.displacementMap,e(m.displacementMap,g.displacementMapTransform),g.displacementScale.value=m.displacementScale,g.displacementBias.value=m.displacementBias),m.emissiveMap&&(g.emissiveMap.value=m.emissiveMap,e(m.emissiveMap,g.emissiveMapTransform)),m.specularMap&&(g.specularMap.value=m.specularMap,e(m.specularMap,g.specularMapTransform)),m.alphaTest>0&&(g.alphaTest.value=m.alphaTest);const y=t.get(m),v=y.envMap,x=y.envMapRotation;v&&(g.envMap.value=v,_r.copy(x),_r.x*=-1,_r.y*=-1,_r.z*=-1,v.isCubeTexture&&v.isRenderTargetTexture===!1&&(_r.y*=-1,_r.z*=-1),g.envMapRotation.value.setFromMatrix4(Ow.makeRotationFromEuler(_r)),g.flipEnvMap.value=v.isCubeTexture&&v.isRenderTargetTexture===!1?-1:1,g.reflectivity.value=m.reflectivity,g.ior.value=m.ior,g.refractionRatio.value=m.refractionRatio),m.lightMap&&(g.lightMap.value=m.lightMap,g.lightMapIntensity.value=m.lightMapIntensity,e(m.lightMap,g.lightMapTransform)),m.aoMap&&(g.aoMap.value=m.aoMap,g.aoMapIntensity.value=m.aoMapIntensity,e(m.aoMap,g.aoMapTransform))}function o(g,m){g.diffuse.value.copy(m.color),g.opacity.value=m.opacity,m.map&&(g.map.value=m.map,e(m.map,g.mapTransform))}function a(g,m){g.dashSize.value=m.dashSize,g.totalSize.value=m.dashSize+m.gapSize,g.scale.value=m.scale}function l(g,m,y,v){g.diffuse.value.copy(m.color),g.opacity.value=m.opacity,g.size.value=m.size*y,g.scale.value=v*.5,m.map&&(g.map.value=m.map,e(m.map,g.uvTransform)),m.alphaMap&&(g.alphaMap.value=m.alphaMap,e(m.alphaMap,g.alphaMapTransform)),m.alphaTest>0&&(g.alphaTest.value=m.alphaTest)}function c(g,m){g.diffuse.value.copy(m.color),g.opacity.value=m.opacity,g.rotation.value=m.rotation,m.map&&(g.map.value=m.map,e(m.map,g.mapTransform)),m.alphaMap&&(g.alphaMap.value=m.alphaMap,e(m.alphaMap,g.alphaMapTransform)),m.alphaTest>0&&(g.alphaTest.value=m.alphaTest)}function h(g,m){g.specular.value.copy(m.specular),g.shininess.value=Math.max(m.shininess,1e-4)}function u(g,m){m.gradientMap&&(g.gradientMap.value=m.gradientMap)}function d(g,m){g.metalness.value=m.metalness,m.metalnessMap&&(g.metalnessMap.value=m.metalnessMap,e(m.metalnessMap,g.metalnessMapTransform)),g.roughness.value=m.roughness,m.roughnessMap&&(g.roughnessMap.value=m.roughnessMap,e(m.roughnessMap,g.roughnessMapTransform)),m.envMap&&(g.envMapIntensity.value=m.envMapIntensity)}function f(g,m,y){g.ior.value=m.ior,m.sheen>0&&(g.sheenColor.value.copy(m.sheenColor).multiplyScalar(m.sheen),g.sheenRoughness.value=m.sheenRoughness,m.sheenColorMap&&(g.sheenColorMap.value=m.sheenColorMap,e(m.sheenColorMap,g.sheenColorMapTransform)),m.sheenRoughnessMap&&(g.sheenRoughnessMap.value=m.sheenRoughnessMap,e(m.sheenRoughnessMap,g.sheenRoughnessMapTransform))),m.clearcoat>0&&(g.clearcoat.value=m.clearcoat,g.clearcoatRoughness.value=m.clearcoatRoughness,m.clearcoatMap&&(g.clearcoatMap.value=m.clearcoatMap,e(m.clearcoatMap,g.clearcoatMapTransform)),m.clearcoatRoughnessMap&&(g.clearcoatRoughnessMap.value=m.clearcoatRoughnessMap,e(m.clearcoatRoughnessMap,g.clearcoatRoughnessMapTransform)),m.clearcoatNormalMap&&(g.clearcoatNormalMap.value=m.clearcoatNormalMap,e(m.clearcoatNormalMap,g.clearcoatNormalMapTransform),g.clearcoatNormalScale.value.copy(m.clearcoatNormalScale),m.side===Fi&&g.clearcoatNormalScale.value.negate())),m.dispersion>0&&(g.dispersion.value=m.dispersion),m.iridescence>0&&(g.iridescence.value=m.iridescence,g.iridescenceIOR.value=m.iridescenceIOR,g.iridescenceThicknessMinimum.value=m.iridescenceThicknessRange[0],g.iridescenceThicknessMaximum.value=m.iridescenceThicknessRange[1],m.iridescenceMap&&(g.iridescenceMap.value=m.iridescenceMap,e(m.iridescenceMap,g.iridescenceMapTransform)),m.iridescenceThicknessMap&&(g.iridescenceThicknessMap.value=m.iridescenceThicknessMap,e(m.iridescenceThicknessMap,g.iridescenceThicknessMapTransform))),m.transmission>0&&(g.transmission.value=m.transmission,g.transmissionSamplerMap.value=y.texture,g.transmissionSamplerSize.value.set(y.width,y.height),m.transmissionMap&&(g.transmissionMap.value=m.transmissionMap,e(m.transmissionMap,g.transmissionMapTransform)),g.thickness.value=m.thickness,m.thicknessMap&&(g.thicknessMap.value=m.thicknessMap,e(m.thicknessMap,g.thicknessMapTransform)),g.attenuationDistance.value=m.attenuationDistance,g.attenuationColor.value.copy(m.attenuationColor)),m.anisotropy>0&&(g.anisotropyVector.value.set(m.anisotropy*Math.cos(m.anisotropyRotation),m.anisotropy*Math.sin(m.anisotropyRotation)),m.anisotropyMap&&(g.anisotropyMap.value=m.anisotropyMap,e(m.anisotropyMap,g.anisotropyMapTransform))),g.specularIntensity.value=m.specularIntensity,g.specularColor.value.copy(m.specularColor),m.specularColorMap&&(g.specularColorMap.value=m.specularColorMap,e(m.specularColorMap,g.specularColorMapTransform)),m.specularIntensityMap&&(g.specularIntensityMap.value=m.specularIntensityMap,e(m.specularIntensityMap,g.specularIntensityMapTransform))}function p(g,m){m.matcap&&(g.matcap.value=m.matcap)}function _(g,m){const y=t.get(m).light;g.referencePosition.value.setFromMatrixPosition(y.matrixWorld),g.nearDistance.value=y.shadow.camera.near,g.farDistance.value=y.shadow.camera.far}return{refreshFogUniforms:i,refreshMaterialUniforms:n}}function Gw(r,t,e,i){let n={},s={},o=[];const a=r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS);function l(y,v){const x=v.program;i.uniformBlockBinding(y,x)}function c(y,v){let x=n[y.id];x===void 0&&(p(y),x=h(y),n[y.id]=x,y.addEventListener("dispose",g));const C=v.program;i.updateUBOMapping(y,C);const A=t.render.frame;s[y.id]!==A&&(d(y),s[y.id]=A)}function h(y){const v=u();y.__bindingPointIndex=v;const x=r.createBuffer(),C=y.__size,A=y.usage;return r.bindBuffer(r.UNIFORM_BUFFER,x),r.bufferData(r.UNIFORM_BUFFER,C,A),r.bindBuffer(r.UNIFORM_BUFFER,null),r.bindBufferBase(r.UNIFORM_BUFFER,v,x),x}function u(){for(let y=0;y<a;y++)if(o.indexOf(y)===-1)return o.push(y),y;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function d(y){const v=n[y.id],x=y.uniforms,C=y.__cache;r.bindBuffer(r.UNIFORM_BUFFER,v);for(let A=0,E=x.length;A<E;A++){const w=Array.isArray(x[A])?x[A]:[x[A]];for(let T=0,S=w.length;T<S;T++){const N=w[T];if(f(N,A,T,C)===!0){const G=N.__offset,B=Array.isArray(N.value)?N.value:[N.value];let V=0;for(let Q=0;Q<B.length;Q++){const q=B[Q],rt=_(q);typeof q=="number"||typeof q=="boolean"?(N.__data[0]=q,r.bufferSubData(r.UNIFORM_BUFFER,G+V,N.__data)):q.isMatrix3?(N.__data[0]=q.elements[0],N.__data[1]=q.elements[1],N.__data[2]=q.elements[2],N.__data[3]=0,N.__data[4]=q.elements[3],N.__data[5]=q.elements[4],N.__data[6]=q.elements[5],N.__data[7]=0,N.__data[8]=q.elements[6],N.__data[9]=q.elements[7],N.__data[10]=q.elements[8],N.__data[11]=0):(q.toArray(N.__data,V),V+=rt.storage/Float32Array.BYTES_PER_ELEMENT)}r.bufferSubData(r.UNIFORM_BUFFER,G,N.__data)}}}r.bindBuffer(r.UNIFORM_BUFFER,null)}function f(y,v,x,C){const A=y.value,E=v+"_"+x;if(C[E]===void 0)return typeof A=="number"||typeof A=="boolean"?C[E]=A:C[E]=A.clone(),!0;{const w=C[E];if(typeof A=="number"||typeof A=="boolean"){if(w!==A)return C[E]=A,!0}else if(w.equals(A)===!1)return w.copy(A),!0}return!1}function p(y){const v=y.uniforms;let x=0;const C=16;for(let E=0,w=v.length;E<w;E++){const T=Array.isArray(v[E])?v[E]:[v[E]];for(let S=0,N=T.length;S<N;S++){const G=T[S],B=Array.isArray(G.value)?G.value:[G.value];for(let V=0,Q=B.length;V<Q;V++){const q=B[V],rt=_(q),$=x%C,ot=$%rt.boundary,dt=$+ot;x+=ot,dt!==0&&C-dt<rt.storage&&(x+=C-dt),G.__data=new Float32Array(rt.storage/Float32Array.BYTES_PER_ELEMENT),G.__offset=x,x+=rt.storage}}}const A=x%C;return A>0&&(x+=C-A),y.__size=x,y.__cache={},this}function _(y){const v={boundary:0,storage:0};return typeof y=="number"||typeof y=="boolean"?(v.boundary=4,v.storage=4):y.isVector2?(v.boundary=8,v.storage=8):y.isVector3||y.isColor?(v.boundary=16,v.storage=12):y.isVector4?(v.boundary=16,v.storage=16):y.isMatrix3?(v.boundary=48,v.storage=48):y.isMatrix4?(v.boundary=64,v.storage=64):y.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",y),v}function g(y){const v=y.target;v.removeEventListener("dispose",g);const x=o.indexOf(v.__bindingPointIndex);o.splice(x,1),r.deleteBuffer(n[v.id]),delete n[v.id],delete s[v.id]}function m(){for(const y in n)r.deleteBuffer(n[y]);o=[],n={},s={}}return{bind:l,update:c,dispose:m}}class LB{constructor(t={}){const{canvas:e=NM(),context:i=null,depth:n=!0,stencil:s=!1,alpha:o=!1,antialias:a=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:h="default",failIfMajorPerformanceCaveat:u=!1,reverseDepthBuffer:d=!1}=t;this.isWebGLRenderer=!0;let f;if(i!==null){if(typeof WebGLRenderingContext<"u"&&i instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");f=i.getContextAttributes().alpha}else f=o;const p=new Uint32Array(4),_=new Int32Array(4);let g=null,m=null;const y=[],v=[];this.domElement=e,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=Ji,this.toneMapping=Zs,this.toneMappingExposure=1;const x=this;let C=!1,A=0,E=0,w=null,T=-1,S=null;const N=new qe,G=new qe;let B=null;const V=new re(0);let Q=0,q=e.width,rt=e.height,$=1,ot=null,dt=null;const Tt=new qe(0,0,q,rt),Gt=new qe(0,0,q,rt);let he=!1;const J=new Up;let lt=!1,Nt=!1;const xt=new Pe,Bt=new Pe,Wt=new P,te=new qe,Fe={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let ae=!1;function Ge(){return w===null?$:1}let O=i;function ji(b,U){return e.getContext(b,U)}try{const b={alpha:!0,depth:n,stencil:s,antialias:a,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:u};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${bp}`),e.addEventListener("webglcontextlost",nt,!1),e.addEventListener("webglcontextrestored",Mt,!1),e.addEventListener("webglcontextcreationerror",vt,!1),O===null){const U="webgl2";if(O=ji(U,b),O===null)throw ji(U)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(b){throw console.error("THREE.WebGLRenderer: "+b.message),b}let ie,ne,Ut,Ae,Ft,R,M,k,it,st,et,Pt,yt,bt,le,ct,Et,It,Ot,At,se,jt,be,L;function _t(){ie=new XE(O),ie.init(),jt=new Pw(O,ie),ne=new GE(O,ie,t,jt),Ut=new Rw(O,ie),ne.reverseDepthBuffer&&d&&Ut.buffers.depth.setReversed(!0),Ae=new jE(O),Ft=new fw,R=new Nw(O,ie,Ut,Ft,ne,jt,Ae),M=new VE(x),k=new $E(x),it=new iT(O),be=new OE(O,it),st=new qE(O,it,Ae,be),et=new ZE(O,st,it,Ae),Ot=new KE(O,ne,R),ct=new kE(Ft),Pt=new dw(x,M,k,ie,ne,be,ct),yt=new zw(x,Ft),bt=new mw,le=new Sw(ie),It=new BE(x,M,k,Ut,et,f,l),Et=new Aw(x,et,ne),L=new Gw(O,Ae,ne,Ut),At=new zE(O,ie,Ae),se=new YE(O,ie,Ae),Ae.programs=Pt.programs,x.capabilities=ne,x.extensions=ie,x.properties=Ft,x.renderLists=bt,x.shadowMap=Et,x.state=Ut,x.info=Ae}_t();const Y=new Bw(x,O);this.xr=Y,this.getContext=function(){return O},this.getContextAttributes=function(){return O.getContextAttributes()},this.forceContextLoss=function(){const b=ie.get("WEBGL_lose_context");b&&b.loseContext()},this.forceContextRestore=function(){const b=ie.get("WEBGL_lose_context");b&&b.restoreContext()},this.getPixelRatio=function(){return $},this.setPixelRatio=function(b){b!==void 0&&($=b,this.setSize(q,rt,!1))},this.getSize=function(b){return b.set(q,rt)},this.setSize=function(b,U,H=!0){if(Y.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}q=b,rt=U,e.width=Math.floor(b*$),e.height=Math.floor(U*$),H===!0&&(e.style.width=b+"px",e.style.height=U+"px"),this.setViewport(0,0,b,U)},this.getDrawingBufferSize=function(b){return b.set(q*$,rt*$).floor()},this.setDrawingBufferSize=function(b,U,H){q=b,rt=U,$=H,e.width=Math.floor(b*H),e.height=Math.floor(U*H),this.setViewport(0,0,b,U)},this.getCurrentViewport=function(b){return b.copy(N)},this.getViewport=function(b){return b.copy(Tt)},this.setViewport=function(b,U,H,W){b.isVector4?Tt.set(b.x,b.y,b.z,b.w):Tt.set(b,U,H,W),Ut.viewport(N.copy(Tt).multiplyScalar($).round())},this.getScissor=function(b){return b.copy(Gt)},this.setScissor=function(b,U,H,W){b.isVector4?Gt.set(b.x,b.y,b.z,b.w):Gt.set(b,U,H,W),Ut.scissor(G.copy(Gt).multiplyScalar($).round())},this.getScissorTest=function(){return he},this.setScissorTest=function(b){Ut.setScissorTest(he=b)},this.setOpaqueSort=function(b){ot=b},this.setTransparentSort=function(b){dt=b},this.getClearColor=function(b){return b.copy(It.getClearColor())},this.setClearColor=function(){It.setClearColor.apply(It,arguments)},this.getClearAlpha=function(){return It.getClearAlpha()},this.setClearAlpha=function(){It.setClearAlpha.apply(It,arguments)},this.clear=function(b=!0,U=!0,H=!0){let W=0;if(b){let I=!1;if(w!==null){const ht=w.texture.format;I=ht===Pp||ht===Np||ht===Cp}if(I){const ht=w.texture.type,St=ht===Ss||ht===Br||ht===cl||ht===ra||ht===wp||ht===Rp,wt=It.getClearColor(),Rt=It.getClearAlpha(),kt=wt.r,Yt=wt.g,Ct=wt.b;St?(p[0]=kt,p[1]=Yt,p[2]=Ct,p[3]=Rt,O.clearBufferuiv(O.COLOR,0,p)):(_[0]=kt,_[1]=Yt,_[2]=Ct,_[3]=Rt,O.clearBufferiv(O.COLOR,0,_))}else W|=O.COLOR_BUFFER_BIT}U&&(W|=O.DEPTH_BUFFER_BIT),H&&(W|=O.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),O.clear(W)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",nt,!1),e.removeEventListener("webglcontextrestored",Mt,!1),e.removeEventListener("webglcontextcreationerror",vt,!1),bt.dispose(),le.dispose(),Ft.dispose(),M.dispose(),k.dispose(),et.dispose(),be.dispose(),L.dispose(),Pt.dispose(),Y.dispose(),Y.removeEventListener("sessionstart",Lm),Y.removeEventListener("sessionend",Fm),ur.stop()};function nt(b){b.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),C=!0}function Mt(){console.log("THREE.WebGLRenderer: Context Restored."),C=!1;const b=Ae.autoReset,U=Et.enabled,H=Et.autoUpdate,W=Et.needsUpdate,I=Et.type;_t(),Ae.autoReset=b,Et.enabled=U,Et.autoUpdate=H,Et.needsUpdate=W,Et.type=I}function vt(b){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",b.statusMessage)}function qt(b){const U=b.target;U.removeEventListener("dispose",qt),Be(U)}function Be(b){fi(b),Ft.remove(b)}function fi(b){const U=Ft.get(b).programs;U!==void 0&&(U.forEach(function(H){Pt.releaseProgram(H)}),b.isShaderMaterial&&Pt.releaseShaderCache(b))}this.renderBufferDirect=function(b,U,H,W,I,ht){U===null&&(U=Fe);const St=I.isMesh&&I.matrixWorld.determinant()<0,wt=bS(b,U,H,W,I);Ut.setMaterial(W,St);let Rt=H.index,kt=1;if(W.wireframe===!0){if(Rt=st.getWireframeAttribute(H),Rt===void 0)return;kt=2}const Yt=H.drawRange,Ct=H.attributes.position;let ue=Yt.start*kt,Ee=(Yt.start+Yt.count)*kt;ht!==null&&(ue=Math.max(ue,ht.start*kt),Ee=Math.min(Ee,(ht.start+ht.count)*kt)),Rt!==null?(ue=Math.max(ue,0),Ee=Math.min(Ee,Rt.count)):Ct!=null&&(ue=Math.max(ue,0),Ee=Math.min(Ee,Ct.count));const we=Ee-ue;if(we<0||we===1/0)return;be.setup(I,W,wt,H,Rt);let Ri,me=At;if(Rt!==null&&(Ri=it.get(Rt),me=se,me.setIndex(Ri)),I.isMesh)W.wireframe===!0?(Ut.setLineWidth(W.wireframeLinewidth*Ge()),me.setMode(O.LINES)):me.setMode(O.TRIANGLES);else if(I.isLine){let Dt=W.linewidth;Dt===void 0&&(Dt=1),Ut.setLineWidth(Dt*Ge()),I.isLineSegments?me.setMode(O.LINES):I.isLineLoop?me.setMode(O.LINE_LOOP):me.setMode(O.LINE_STRIP)}else I.isPoints?me.setMode(O.POINTS):I.isSprite&&me.setMode(O.TRIANGLES);if(I.isBatchedMesh)if(I._multiDrawInstances!==null)me.renderMultiDrawInstances(I._multiDrawStarts,I._multiDrawCounts,I._multiDrawCount,I._multiDrawInstances);else if(ie.get("WEBGL_multi_draw"))me.renderMultiDraw(I._multiDrawStarts,I._multiDrawCounts,I._multiDrawCount);else{const Dt=I._multiDrawStarts,kn=I._multiDrawCounts,ge=I._multiDrawCount,on=Rt?it.get(Rt).bytesPerElement:1,Kr=Ft.get(W).currentProgram.getUniforms();for(let Oi=0;Oi<ge;Oi++)Kr.setValue(O,"_gl_DrawID",Oi),me.render(Dt[Oi]/on,kn[Oi])}else if(I.isInstancedMesh)me.renderInstances(ue,we,I.count);else if(H.isInstancedBufferGeometry){const Dt=H._maxInstanceCount!==void 0?H._maxInstanceCount:1/0,kn=Math.min(H.instanceCount,Dt);me.renderInstances(ue,we,kn)}else me.render(ue,we)};function ve(b,U,H){b.transparent===!0&&b.side===ss&&b.forceSinglePass===!1?(b.side=Fi,b.needsUpdate=!0,Il(b,U,H),b.side=nr,b.needsUpdate=!0,Il(b,U,H),b.side=ss):Il(b,U,H)}this.compile=function(b,U,H=null){H===null&&(H=b),m=le.get(H),m.init(U),v.push(m),H.traverseVisible(function(I){I.isLight&&I.layers.test(U.layers)&&(m.pushLight(I),I.castShadow&&m.pushShadow(I))}),b!==H&&b.traverseVisible(function(I){I.isLight&&I.layers.test(U.layers)&&(m.pushLight(I),I.castShadow&&m.pushShadow(I))}),m.setupLights();const W=new Set;return b.traverse(function(I){if(!(I.isMesh||I.isPoints||I.isLine||I.isSprite))return;const ht=I.material;if(ht)if(Array.isArray(ht))for(let St=0;St<ht.length;St++){const wt=ht[St];ve(wt,H,I),W.add(wt)}else ve(ht,H,I),W.add(ht)}),v.pop(),m=null,W},this.compileAsync=function(b,U,H=null){const W=this.compile(b,U,H);return new Promise(I=>{function ht(){if(W.forEach(function(St){Ft.get(St).currentProgram.isReady()&&W.delete(St)}),W.size===0){I(b);return}setTimeout(ht,10)}ie.get("KHR_parallel_shader_compile")!==null?ht():setTimeout(ht,10)})};let rn=null;function Gn(b){rn&&rn(b)}function Lm(){ur.stop()}function Fm(){ur.start()}const ur=new C0;ur.setAnimationLoop(Gn),typeof self<"u"&&ur.setContext(self),this.setAnimationLoop=function(b){rn=b,Y.setAnimationLoop(b),b===null?ur.stop():ur.start()},Y.addEventListener("sessionstart",Lm),Y.addEventListener("sessionend",Fm),this.render=function(b,U){if(U!==void 0&&U.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(C===!0)return;if(b.matrixWorldAutoUpdate===!0&&b.updateMatrixWorld(),U.parent===null&&U.matrixWorldAutoUpdate===!0&&U.updateMatrixWorld(),Y.enabled===!0&&Y.isPresenting===!0&&(Y.cameraAutoUpdate===!0&&Y.updateCamera(U),U=Y.getCamera()),b.isScene===!0&&b.onBeforeRender(x,b,U,w),m=le.get(b,v.length),m.init(U),v.push(m),Bt.multiplyMatrices(U.projectionMatrix,U.matrixWorldInverse),J.setFromProjectionMatrix(Bt),Nt=this.localClippingEnabled,lt=ct.init(this.clippingPlanes,Nt),g=bt.get(b,y.length),g.init(),y.push(g),Y.enabled===!0&&Y.isPresenting===!0){const ht=x.xr.getDepthSensingMesh();ht!==null&&ru(ht,U,-1/0,x.sortObjects)}ru(b,U,0,x.sortObjects),g.finish(),x.sortObjects===!0&&g.sort(ot,dt),ae=Y.enabled===!1||Y.isPresenting===!1||Y.hasDepthSensing()===!1,ae&&It.addToRenderList(g,b),this.info.render.frame++,lt===!0&&ct.beginShadows();const H=m.state.shadowsArray;Et.render(H,b,U),lt===!0&&ct.endShadows(),this.info.autoReset===!0&&this.info.reset();const W=g.opaque,I=g.transmissive;if(m.setupLights(),U.isArrayCamera){const ht=U.cameras;if(I.length>0)for(let St=0,wt=ht.length;St<wt;St++){const Rt=ht[St];Im(W,I,b,Rt)}ae&&It.render(b);for(let St=0,wt=ht.length;St<wt;St++){const Rt=ht[St];Um(g,b,Rt,Rt.viewport)}}else I.length>0&&Im(W,I,b,U),ae&&It.render(b),Um(g,b,U);w!==null&&(R.updateMultisampleRenderTarget(w),R.updateRenderTargetMipmap(w)),b.isScene===!0&&b.onAfterRender(x,b,U),be.resetDefaultState(),T=-1,S=null,v.pop(),v.length>0?(m=v[v.length-1],lt===!0&&ct.setGlobalState(x.clippingPlanes,m.state.camera)):m=null,y.pop(),y.length>0?g=y[y.length-1]:g=null};function ru(b,U,H,W){if(b.visible===!1)return;if(b.layers.test(U.layers)){if(b.isGroup)H=b.renderOrder;else if(b.isLOD)b.autoUpdate===!0&&b.update(U);else if(b.isLight)m.pushLight(b),b.castShadow&&m.pushShadow(b);else if(b.isSprite){if(!b.frustumCulled||J.intersectsSprite(b)){W&&te.setFromMatrixPosition(b.matrixWorld).applyMatrix4(Bt);const St=et.update(b),wt=b.material;wt.visible&&g.push(b,St,wt,H,te.z,null)}}else if((b.isMesh||b.isLine||b.isPoints)&&(!b.frustumCulled||J.intersectsObject(b))){const St=et.update(b),wt=b.material;if(W&&(b.boundingSphere!==void 0?(b.boundingSphere===null&&b.computeBoundingSphere(),te.copy(b.boundingSphere.center)):(St.boundingSphere===null&&St.computeBoundingSphere(),te.copy(St.boundingSphere.center)),te.applyMatrix4(b.matrixWorld).applyMatrix4(Bt)),Array.isArray(wt)){const Rt=St.groups;for(let kt=0,Yt=Rt.length;kt<Yt;kt++){const Ct=Rt[kt],ue=wt[Ct.materialIndex];ue&&ue.visible&&g.push(b,St,ue,H,te.z,Ct)}}else wt.visible&&g.push(b,St,wt,H,te.z,null)}}const ht=b.children;for(let St=0,wt=ht.length;St<wt;St++)ru(ht[St],U,H,W)}function Um(b,U,H,W){const I=b.opaque,ht=b.transmissive,St=b.transparent;m.setupLightsView(H),lt===!0&&ct.setGlobalState(x.clippingPlanes,H),W&&Ut.viewport(N.copy(W)),I.length>0&&Ul(I,U,H),ht.length>0&&Ul(ht,U,H),St.length>0&&Ul(St,U,H),Ut.buffers.depth.setTest(!0),Ut.buffers.depth.setMask(!0),Ut.buffers.color.setMask(!0),Ut.setPolygonOffset(!1)}function Im(b,U,H,W){if((H.isScene===!0?H.overrideMaterial:null)!==null)return;m.state.transmissionRenderTarget[W.id]===void 0&&(m.state.transmissionRenderTarget[W.id]=new sr(1,1,{generateMipmaps:!0,type:ie.has("EXT_color_buffer_half_float")||ie.has("EXT_color_buffer_float")?ma:Ss,minFilter:Fr,samples:4,stencilBuffer:s,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:ce.workingColorSpace}));const ht=m.state.transmissionRenderTarget[W.id],St=W.viewport||N;ht.setSize(St.z,St.w);const wt=x.getRenderTarget();x.setRenderTarget(ht),x.getClearColor(V),Q=x.getClearAlpha(),Q<1&&x.setClearColor(16777215,.5),x.clear(),ae&&It.render(H);const Rt=x.toneMapping;x.toneMapping=Zs;const kt=W.viewport;if(W.viewport!==void 0&&(W.viewport=void 0),m.setupLightsView(W),lt===!0&&ct.setGlobalState(x.clippingPlanes,W),Ul(b,H,W),R.updateMultisampleRenderTarget(ht),R.updateRenderTargetMipmap(ht),ie.has("WEBGL_multisampled_render_to_texture")===!1){let Yt=!1;for(let Ct=0,ue=U.length;Ct<ue;Ct++){const Ee=U[Ct],we=Ee.object,Ri=Ee.geometry,me=Ee.material,Dt=Ee.group;if(me.side===ss&&we.layers.test(W.layers)){const kn=me.side;me.side=Fi,me.needsUpdate=!0,Bm(we,H,W,Ri,me,Dt),me.side=kn,me.needsUpdate=!0,Yt=!0}}Yt===!0&&(R.updateMultisampleRenderTarget(ht),R.updateRenderTargetMipmap(ht))}x.setRenderTarget(wt),x.setClearColor(V,Q),kt!==void 0&&(W.viewport=kt),x.toneMapping=Rt}function Ul(b,U,H){const W=U.isScene===!0?U.overrideMaterial:null;for(let I=0,ht=b.length;I<ht;I++){const St=b[I],wt=St.object,Rt=St.geometry,kt=W===null?St.material:W,Yt=St.group;wt.layers.test(H.layers)&&Bm(wt,U,H,Rt,kt,Yt)}}function Bm(b,U,H,W,I,ht){b.onBeforeRender(x,U,H,W,I,ht),b.modelViewMatrix.multiplyMatrices(H.matrixWorldInverse,b.matrixWorld),b.normalMatrix.getNormalMatrix(b.modelViewMatrix),I.onBeforeRender(x,U,H,W,b,ht),I.transparent===!0&&I.side===ss&&I.forceSinglePass===!1?(I.side=Fi,I.needsUpdate=!0,x.renderBufferDirect(H,U,W,I,b,ht),I.side=nr,I.needsUpdate=!0,x.renderBufferDirect(H,U,W,I,b,ht),I.side=ss):x.renderBufferDirect(H,U,W,I,b,ht),b.onAfterRender(x,U,H,W,I,ht)}function Il(b,U,H){U.isScene!==!0&&(U=Fe);const W=Ft.get(b),I=m.state.lights,ht=m.state.shadowsArray,St=I.state.version,wt=Pt.getParameters(b,I.state,ht,U,H),Rt=Pt.getProgramCacheKey(wt);let kt=W.programs;W.environment=b.isMeshStandardMaterial?U.environment:null,W.fog=U.fog,W.envMap=(b.isMeshStandardMaterial?k:M).get(b.envMap||W.environment),W.envMapRotation=W.environment!==null&&b.envMap===null?U.environmentRotation:b.envMapRotation,kt===void 0&&(b.addEventListener("dispose",qt),kt=new Map,W.programs=kt);let Yt=kt.get(Rt);if(Yt!==void 0){if(W.currentProgram===Yt&&W.lightsStateVersion===St)return zm(b,wt),Yt}else wt.uniforms=Pt.getUniforms(b),b.onBeforeCompile(wt,x),Yt=Pt.acquireProgram(wt,Rt),kt.set(Rt,Yt),W.uniforms=wt.uniforms;const Ct=W.uniforms;return(!b.isShaderMaterial&&!b.isRawShaderMaterial||b.clipping===!0)&&(Ct.clippingPlanes=ct.uniform),zm(b,wt),W.needsLights=AS(b),W.lightsStateVersion=St,W.needsLights&&(Ct.ambientLightColor.value=I.state.ambient,Ct.lightProbe.value=I.state.probe,Ct.directionalLights.value=I.state.directional,Ct.directionalLightShadows.value=I.state.directionalShadow,Ct.spotLights.value=I.state.spot,Ct.spotLightShadows.value=I.state.spotShadow,Ct.rectAreaLights.value=I.state.rectArea,Ct.ltc_1.value=I.state.rectAreaLTC1,Ct.ltc_2.value=I.state.rectAreaLTC2,Ct.pointLights.value=I.state.point,Ct.pointLightShadows.value=I.state.pointShadow,Ct.hemisphereLights.value=I.state.hemi,Ct.directionalShadowMap.value=I.state.directionalShadowMap,Ct.directionalShadowMatrix.value=I.state.directionalShadowMatrix,Ct.spotShadowMap.value=I.state.spotShadowMap,Ct.spotLightMatrix.value=I.state.spotLightMatrix,Ct.spotLightMap.value=I.state.spotLightMap,Ct.pointShadowMap.value=I.state.pointShadowMap,Ct.pointShadowMatrix.value=I.state.pointShadowMatrix),W.currentProgram=Yt,W.uniformsList=null,Yt}function Om(b){if(b.uniformsList===null){const U=b.currentProgram.getUniforms();b.uniformsList=ih.seqWithValue(U.seq,b.uniforms)}return b.uniformsList}function zm(b,U){const H=Ft.get(b);H.outputColorSpace=U.outputColorSpace,H.batching=U.batching,H.batchingColor=U.batchingColor,H.instancing=U.instancing,H.instancingColor=U.instancingColor,H.instancingMorph=U.instancingMorph,H.skinning=U.skinning,H.morphTargets=U.morphTargets,H.morphNormals=U.morphNormals,H.morphColors=U.morphColors,H.morphTargetsCount=U.morphTargetsCount,H.numClippingPlanes=U.numClippingPlanes,H.numIntersection=U.numClipIntersection,H.vertexAlphas=U.vertexAlphas,H.vertexTangents=U.vertexTangents,H.toneMapping=U.toneMapping}function bS(b,U,H,W,I){U.isScene!==!0&&(U=Fe),R.resetTextureUnits();const ht=U.fog,St=W.isMeshStandardMaterial?U.environment:null,wt=w===null?x.outputColorSpace:w.isXRRenderTarget===!0?w.texture.colorSpace:ga,Rt=(W.isMeshStandardMaterial?k:M).get(W.envMap||St),kt=W.vertexColors===!0&&!!H.attributes.color&&H.attributes.color.itemSize===4,Yt=!!H.attributes.tangent&&(!!W.normalMap||W.anisotropy>0),Ct=!!H.morphAttributes.position,ue=!!H.morphAttributes.normal,Ee=!!H.morphAttributes.color;let we=Zs;W.toneMapped&&(w===null||w.isXRRenderTarget===!0)&&(we=x.toneMapping);const Ri=H.morphAttributes.position||H.morphAttributes.normal||H.morphAttributes.color,me=Ri!==void 0?Ri.length:0,Dt=Ft.get(W),kn=m.state.lights;if(lt===!0&&(Nt===!0||b!==S)){const Ki=b===S&&W.id===T;ct.setState(W,b,Ki)}let ge=!1;W.version===Dt.__version?(Dt.needsLights&&Dt.lightsStateVersion!==kn.state.version||Dt.outputColorSpace!==wt||I.isBatchedMesh&&Dt.batching===!1||!I.isBatchedMesh&&Dt.batching===!0||I.isBatchedMesh&&Dt.batchingColor===!0&&I.colorTexture===null||I.isBatchedMesh&&Dt.batchingColor===!1&&I.colorTexture!==null||I.isInstancedMesh&&Dt.instancing===!1||!I.isInstancedMesh&&Dt.instancing===!0||I.isSkinnedMesh&&Dt.skinning===!1||!I.isSkinnedMesh&&Dt.skinning===!0||I.isInstancedMesh&&Dt.instancingColor===!0&&I.instanceColor===null||I.isInstancedMesh&&Dt.instancingColor===!1&&I.instanceColor!==null||I.isInstancedMesh&&Dt.instancingMorph===!0&&I.morphTexture===null||I.isInstancedMesh&&Dt.instancingMorph===!1&&I.morphTexture!==null||Dt.envMap!==Rt||W.fog===!0&&Dt.fog!==ht||Dt.numClippingPlanes!==void 0&&(Dt.numClippingPlanes!==ct.numPlanes||Dt.numIntersection!==ct.numIntersection)||Dt.vertexAlphas!==kt||Dt.vertexTangents!==Yt||Dt.morphTargets!==Ct||Dt.morphNormals!==ue||Dt.morphColors!==Ee||Dt.toneMapping!==we||Dt.morphTargetsCount!==me)&&(ge=!0):(ge=!0,Dt.__version=W.version);let on=Dt.currentProgram;ge===!0&&(on=Il(W,U,I));let Kr=!1,Oi=!1,ba=!1;const Re=on.getUniforms(),wn=Dt.uniforms;if(Ut.useProgram(on.program)&&(Kr=!0,Oi=!0,ba=!0),W.id!==T&&(T=W.id,Oi=!0),Kr||S!==b){Ut.buffers.depth.getReversed()?(xt.copy(b.projectionMatrix),DM(xt),LM(xt),Re.setValue(O,"projectionMatrix",xt)):Re.setValue(O,"projectionMatrix",b.projectionMatrix),Re.setValue(O,"viewMatrix",b.matrixWorldInverse);const Rs=Re.map.cameraPosition;Rs!==void 0&&Rs.setValue(O,Wt.setFromMatrixPosition(b.matrixWorld)),ne.logarithmicDepthBuffer&&Re.setValue(O,"logDepthBufFC",2/(Math.log(b.far+1)/Math.LN2)),(W.isMeshPhongMaterial||W.isMeshToonMaterial||W.isMeshLambertMaterial||W.isMeshBasicMaterial||W.isMeshStandardMaterial||W.isShaderMaterial)&&Re.setValue(O,"isOrthographic",b.isOrthographicCamera===!0),S!==b&&(S=b,Oi=!0,ba=!0)}if(I.isSkinnedMesh){Re.setOptional(O,I,"bindMatrix"),Re.setOptional(O,I,"bindMatrixInverse");const Ki=I.skeleton;Ki&&(Ki.boneTexture===null&&Ki.computeBoneTexture(),Re.setValue(O,"boneTexture",Ki.boneTexture,R))}I.isBatchedMesh&&(Re.setOptional(O,I,"batchingTexture"),Re.setValue(O,"batchingTexture",I._matricesTexture,R),Re.setOptional(O,I,"batchingIdTexture"),Re.setValue(O,"batchingIdTexture",I._indirectTexture,R),Re.setOptional(O,I,"batchingColorTexture"),I._colorsTexture!==null&&Re.setValue(O,"batchingColorTexture",I._colorsTexture,R));const Ea=H.morphAttributes;if((Ea.position!==void 0||Ea.normal!==void 0||Ea.color!==void 0)&&Ot.update(I,H,on),(Oi||Dt.receiveShadow!==I.receiveShadow)&&(Dt.receiveShadow=I.receiveShadow,Re.setValue(O,"receiveShadow",I.receiveShadow)),W.isMeshGouraudMaterial&&W.envMap!==null&&(wn.envMap.value=Rt,wn.flipEnvMap.value=Rt.isCubeTexture&&Rt.isRenderTargetTexture===!1?-1:1),W.isMeshStandardMaterial&&W.envMap===null&&U.environment!==null&&(wn.envMapIntensity.value=U.environmentIntensity),Oi&&(Re.setValue(O,"toneMappingExposure",x.toneMappingExposure),Dt.needsLights&&ES(wn,ba),ht&&W.fog===!0&&yt.refreshFogUniforms(wn,ht),yt.refreshMaterialUniforms(wn,W,$,rt,m.state.transmissionRenderTarget[b.id]),ih.upload(O,Om(Dt),wn,R)),W.isShaderMaterial&&W.uniformsNeedUpdate===!0&&(ih.upload(O,Om(Dt),wn,R),W.uniformsNeedUpdate=!1),W.isSpriteMaterial&&Re.setValue(O,"center",I.center),Re.setValue(O,"modelViewMatrix",I.modelViewMatrix),Re.setValue(O,"normalMatrix",I.normalMatrix),Re.setValue(O,"modelMatrix",I.matrixWorld),W.isShaderMaterial||W.isRawShaderMaterial){const Ki=W.uniformsGroups;for(let Rs=0,Cs=Ki.length;Rs<Cs;Rs++){const Gm=Ki[Rs];L.update(Gm,on),L.bind(Gm,on)}}return on}function ES(b,U){b.ambientLightColor.needsUpdate=U,b.lightProbe.needsUpdate=U,b.directionalLights.needsUpdate=U,b.directionalLightShadows.needsUpdate=U,b.pointLights.needsUpdate=U,b.pointLightShadows.needsUpdate=U,b.spotLights.needsUpdate=U,b.spotLightShadows.needsUpdate=U,b.rectAreaLights.needsUpdate=U,b.hemisphereLights.needsUpdate=U}function AS(b){return b.isMeshLambertMaterial||b.isMeshToonMaterial||b.isMeshPhongMaterial||b.isMeshStandardMaterial||b.isShadowMaterial||b.isShaderMaterial&&b.lights===!0}this.getActiveCubeFace=function(){return A},this.getActiveMipmapLevel=function(){return E},this.getRenderTarget=function(){return w},this.setRenderTargetTextures=function(b,U,H){Ft.get(b.texture).__webglTexture=U,Ft.get(b.depthTexture).__webglTexture=H;const W=Ft.get(b);W.__hasExternalTextures=!0,W.__autoAllocateDepthBuffer=H===void 0,W.__autoAllocateDepthBuffer||ie.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),W.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(b,U){const H=Ft.get(b);H.__webglFramebuffer=U,H.__useDefaultFramebuffer=U===void 0},this.setRenderTarget=function(b,U=0,H=0){w=b,A=U,E=H;let W=!0,I=null,ht=!1,St=!1;if(b){const Rt=Ft.get(b);if(Rt.__useDefaultFramebuffer!==void 0)Ut.bindFramebuffer(O.FRAMEBUFFER,null),W=!1;else if(Rt.__webglFramebuffer===void 0)R.setupRenderTarget(b);else if(Rt.__hasExternalTextures)R.rebindTextures(b,Ft.get(b.texture).__webglTexture,Ft.get(b.depthTexture).__webglTexture);else if(b.depthBuffer){const Ct=b.depthTexture;if(Rt.__boundDepthTexture!==Ct){if(Ct!==null&&Ft.has(Ct)&&(b.width!==Ct.image.width||b.height!==Ct.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");R.setupDepthRenderbuffer(b)}}const kt=b.texture;(kt.isData3DTexture||kt.isDataArrayTexture||kt.isCompressedArrayTexture)&&(St=!0);const Yt=Ft.get(b).__webglFramebuffer;b.isWebGLCubeRenderTarget?(Array.isArray(Yt[U])?I=Yt[U][H]:I=Yt[U],ht=!0):b.samples>0&&R.useMultisampledRTT(b)===!1?I=Ft.get(b).__webglMultisampledFramebuffer:Array.isArray(Yt)?I=Yt[H]:I=Yt,N.copy(b.viewport),G.copy(b.scissor),B=b.scissorTest}else N.copy(Tt).multiplyScalar($).floor(),G.copy(Gt).multiplyScalar($).floor(),B=he;if(Ut.bindFramebuffer(O.FRAMEBUFFER,I)&&W&&Ut.drawBuffers(b,I),Ut.viewport(N),Ut.scissor(G),Ut.setScissorTest(B),ht){const Rt=Ft.get(b.texture);O.framebufferTexture2D(O.FRAMEBUFFER,O.COLOR_ATTACHMENT0,O.TEXTURE_CUBE_MAP_POSITIVE_X+U,Rt.__webglTexture,H)}else if(St){const Rt=Ft.get(b.texture),kt=U||0;O.framebufferTextureLayer(O.FRAMEBUFFER,O.COLOR_ATTACHMENT0,Rt.__webglTexture,H||0,kt)}T=-1},this.readRenderTargetPixels=function(b,U,H,W,I,ht,St){if(!(b&&b.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let wt=Ft.get(b).__webglFramebuffer;if(b.isWebGLCubeRenderTarget&&St!==void 0&&(wt=wt[St]),wt){Ut.bindFramebuffer(O.FRAMEBUFFER,wt);try{const Rt=b.texture,kt=Rt.format,Yt=Rt.type;if(!ne.textureFormatReadable(kt)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!ne.textureTypeReadable(Yt)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}U>=0&&U<=b.width-W&&H>=0&&H<=b.height-I&&O.readPixels(U,H,W,I,jt.convert(kt),jt.convert(Yt),ht)}finally{const Rt=w!==null?Ft.get(w).__webglFramebuffer:null;Ut.bindFramebuffer(O.FRAMEBUFFER,Rt)}}},this.readRenderTargetPixelsAsync=async function(b,U,H,W,I,ht,St){if(!(b&&b.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let wt=Ft.get(b).__webglFramebuffer;if(b.isWebGLCubeRenderTarget&&St!==void 0&&(wt=wt[St]),wt){const Rt=b.texture,kt=Rt.format,Yt=Rt.type;if(!ne.textureFormatReadable(kt))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!ne.textureTypeReadable(Yt))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(U>=0&&U<=b.width-W&&H>=0&&H<=b.height-I){Ut.bindFramebuffer(O.FRAMEBUFFER,wt);const Ct=O.createBuffer();O.bindBuffer(O.PIXEL_PACK_BUFFER,Ct),O.bufferData(O.PIXEL_PACK_BUFFER,ht.byteLength,O.STREAM_READ),O.readPixels(U,H,W,I,jt.convert(kt),jt.convert(Yt),0);const ue=w!==null?Ft.get(w).__webglFramebuffer:null;Ut.bindFramebuffer(O.FRAMEBUFFER,ue);const Ee=O.fenceSync(O.SYNC_GPU_COMMANDS_COMPLETE,0);return O.flush(),await PM(O,Ee,4),O.bindBuffer(O.PIXEL_PACK_BUFFER,Ct),O.getBufferSubData(O.PIXEL_PACK_BUFFER,0,ht),O.deleteBuffer(Ct),O.deleteSync(Ee),ht}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(b,U=null,H=0){b.isTexture!==!0&&(qa("WebGLRenderer: copyFramebufferToTexture function signature has changed."),U=arguments[0]||null,b=arguments[1]);const W=Math.pow(2,-H),I=Math.floor(b.image.width*W),ht=Math.floor(b.image.height*W),St=U!==null?U.x:0,wt=U!==null?U.y:0;R.setTexture2D(b,0),O.copyTexSubImage2D(O.TEXTURE_2D,H,0,0,St,wt,I,ht),Ut.unbindTexture()},this.copyTextureToTexture=function(b,U,H=null,W=null,I=0){b.isTexture!==!0&&(qa("WebGLRenderer: copyTextureToTexture function signature has changed."),W=arguments[0]||null,b=arguments[1],U=arguments[2],I=arguments[3]||0,H=null);let ht,St,wt,Rt,kt,Yt,Ct,ue,Ee;const we=b.isCompressedTexture?b.mipmaps[I]:b.image;H!==null?(ht=H.max.x-H.min.x,St=H.max.y-H.min.y,wt=H.isBox3?H.max.z-H.min.z:1,Rt=H.min.x,kt=H.min.y,Yt=H.isBox3?H.min.z:0):(ht=we.width,St=we.height,wt=we.depth||1,Rt=0,kt=0,Yt=0),W!==null?(Ct=W.x,ue=W.y,Ee=W.z):(Ct=0,ue=0,Ee=0);const Ri=jt.convert(U.format),me=jt.convert(U.type);let Dt;U.isData3DTexture?(R.setTexture3D(U,0),Dt=O.TEXTURE_3D):U.isDataArrayTexture||U.isCompressedArrayTexture?(R.setTexture2DArray(U,0),Dt=O.TEXTURE_2D_ARRAY):(R.setTexture2D(U,0),Dt=O.TEXTURE_2D),O.pixelStorei(O.UNPACK_FLIP_Y_WEBGL,U.flipY),O.pixelStorei(O.UNPACK_PREMULTIPLY_ALPHA_WEBGL,U.premultiplyAlpha),O.pixelStorei(O.UNPACK_ALIGNMENT,U.unpackAlignment);const kn=O.getParameter(O.UNPACK_ROW_LENGTH),ge=O.getParameter(O.UNPACK_IMAGE_HEIGHT),on=O.getParameter(O.UNPACK_SKIP_PIXELS),Kr=O.getParameter(O.UNPACK_SKIP_ROWS),Oi=O.getParameter(O.UNPACK_SKIP_IMAGES);O.pixelStorei(O.UNPACK_ROW_LENGTH,we.width),O.pixelStorei(O.UNPACK_IMAGE_HEIGHT,we.height),O.pixelStorei(O.UNPACK_SKIP_PIXELS,Rt),O.pixelStorei(O.UNPACK_SKIP_ROWS,kt),O.pixelStorei(O.UNPACK_SKIP_IMAGES,Yt);const ba=b.isDataArrayTexture||b.isData3DTexture,Re=U.isDataArrayTexture||U.isData3DTexture;if(b.isRenderTargetTexture||b.isDepthTexture){const wn=Ft.get(b),Ea=Ft.get(U),Ki=Ft.get(wn.__renderTarget),Rs=Ft.get(Ea.__renderTarget);Ut.bindFramebuffer(O.READ_FRAMEBUFFER,Ki.__webglFramebuffer),Ut.bindFramebuffer(O.DRAW_FRAMEBUFFER,Rs.__webglFramebuffer);for(let Cs=0;Cs<wt;Cs++)ba&&O.framebufferTextureLayer(O.READ_FRAMEBUFFER,O.COLOR_ATTACHMENT0,Ft.get(b).__webglTexture,I,Yt+Cs),b.isDepthTexture?(Re&&O.framebufferTextureLayer(O.DRAW_FRAMEBUFFER,O.COLOR_ATTACHMENT0,Ft.get(U).__webglTexture,I,Ee+Cs),O.blitFramebuffer(Rt,kt,ht,St,Ct,ue,ht,St,O.DEPTH_BUFFER_BIT,O.NEAREST)):Re?O.copyTexSubImage3D(Dt,I,Ct,ue,Ee+Cs,Rt,kt,ht,St):O.copyTexSubImage2D(Dt,I,Ct,ue,Ee+Cs,Rt,kt,ht,St);Ut.bindFramebuffer(O.READ_FRAMEBUFFER,null),Ut.bindFramebuffer(O.DRAW_FRAMEBUFFER,null)}else Re?b.isDataTexture||b.isData3DTexture?O.texSubImage3D(Dt,I,Ct,ue,Ee,ht,St,wt,Ri,me,we.data):U.isCompressedArrayTexture?O.compressedTexSubImage3D(Dt,I,Ct,ue,Ee,ht,St,wt,Ri,we.data):O.texSubImage3D(Dt,I,Ct,ue,Ee,ht,St,wt,Ri,me,we):b.isDataTexture?O.texSubImage2D(O.TEXTURE_2D,I,Ct,ue,ht,St,Ri,me,we.data):b.isCompressedTexture?O.compressedTexSubImage2D(O.TEXTURE_2D,I,Ct,ue,we.width,we.height,Ri,we.data):O.texSubImage2D(O.TEXTURE_2D,I,Ct,ue,ht,St,Ri,me,we);O.pixelStorei(O.UNPACK_ROW_LENGTH,kn),O.pixelStorei(O.UNPACK_IMAGE_HEIGHT,ge),O.pixelStorei(O.UNPACK_SKIP_PIXELS,on),O.pixelStorei(O.UNPACK_SKIP_ROWS,Kr),O.pixelStorei(O.UNPACK_SKIP_IMAGES,Oi),I===0&&U.generateMipmaps&&O.generateMipmap(Dt),Ut.unbindTexture()},this.copyTextureToTexture3D=function(b,U,H=null,W=null,I=0){return b.isTexture!==!0&&(qa("WebGLRenderer: copyTextureToTexture3D function signature has changed."),H=arguments[0]||null,W=arguments[1]||null,b=arguments[2],U=arguments[3],I=arguments[4]||0),qa('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(b,U,H,W,I)},this.initRenderTarget=function(b){Ft.get(b).__webglFramebuffer===void 0&&R.setupRenderTarget(b)},this.initTexture=function(b){b.isCubeTexture?R.setTextureCube(b,0):b.isData3DTexture?R.setTexture3D(b,0):b.isDataArrayTexture||b.isCompressedArrayTexture?R.setTexture2DArray(b,0):R.setTexture2D(b,0),Ut.unbindTexture()},this.resetState=function(){A=0,E=0,w=null,Ut.reset(),be.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return us}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorspace=ce._getDrawingBufferColorSpace(t),e.unpackColorSpace=ce._getUnpackColorSpace()}}let FB=class extends Ui{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new rr,this.environmentIntensity=1,this.environmentRotation=new rr,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}},kw=class{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=t!==void 0?t.length/e:0,this.usage=Ff,this.updateRanges=[],this.version=0,this.uuid=fs()}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,i){t*=this.stride,i*=e.stride;for(let n=0,s=this.stride;n<s;n++)this.array[t+n]=e.array[i+n];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=fs()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),i=new this.constructor(e,this.stride);return i.setUsage(this.usage),i}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=fs()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}};const vi=new P;let zg=class U0{constructor(t,e,i,n=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=i,this.normalized=n}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,i=this.data.count;e<i;e++)vi.fromBufferAttribute(this,e),vi.applyMatrix4(t),this.setXYZ(e,vi.x,vi.y,vi.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)vi.fromBufferAttribute(this,e),vi.applyNormalMatrix(t),this.setXYZ(e,vi.x,vi.y,vi.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)vi.fromBufferAttribute(this,e),vi.transformDirection(t),this.setXYZ(e,vi.x,vi.y,vi.z);return this}getComponent(t,e){let i=this.array[t*this.data.stride+this.offset+e];return this.normalized&&(i=_n(i,this.array)),i}setComponent(t,e,i){return this.normalized&&(i=Se(i,this.array)),this.data.array[t*this.data.stride+this.offset+e]=i,this}setX(t,e){return this.normalized&&(e=Se(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=Se(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=Se(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=Se(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=_n(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=_n(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=_n(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=_n(e,this.array)),e}setXY(t,e,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=Se(e,this.array),i=Se(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this}setXYZ(t,e,i,n){return t=t*this.data.stride+this.offset,this.normalized&&(e=Se(e,this.array),i=Se(i,this.array),n=Se(n,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this}setXYZW(t,e,i,n,s){return t=t*this.data.stride+this.offset,this.normalized&&(e=Se(e,this.array),i=Se(i,this.array),n=Se(n,this.array),s=Se(s,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this.data.array[t+3]=s,this}clone(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let i=0;i<this.count;i++){const n=i*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[n+s])}return new Mn(new this.array.constructor(e),this.itemSize,this.normalized)}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new U0(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let i=0;i<this.count;i++){const n=i*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[n+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}},Vw=class extends $r{static get type(){return"SpriteMaterial"}constructor(t){super(),this.isSpriteMaterial=!0,this.color=new re(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}},uo;const Na=new P,fo=new P,po=new P,mo=new ft,Pa=new ft,I0=new Pe,rc=new P,Da=new P,oc=new P,Gg=new ft,Fu=new ft,kg=new ft;class OB extends Ui{constructor(t=new Vw){if(super(),this.isSprite=!0,this.type="Sprite",uo===void 0){uo=new An;const e=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),i=new kw(e,5);uo.setIndex([0,1,2,0,2,3]),uo.setAttribute("position",new zg(i,3,0,!1)),uo.setAttribute("uv",new zg(i,2,3,!1))}this.geometry=uo,this.material=t,this.center=new ft(.5,.5)}raycast(t,e){t.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),fo.setFromMatrixScale(this.matrixWorld),I0.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),po.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&fo.multiplyScalar(-po.z);const i=this.material.rotation;let n,s;i!==0&&(s=Math.cos(i),n=Math.sin(i));const o=this.center;ac(rc.set(-.5,-.5,0),po,o,fo,n,s),ac(Da.set(.5,-.5,0),po,o,fo,n,s),ac(oc.set(.5,.5,0),po,o,fo,n,s),Gg.set(0,0),Fu.set(1,0),kg.set(1,1);let a=t.ray.intersectTriangle(rc,Da,oc,!1,Na);if(a===null&&(ac(Da.set(-.5,.5,0),po,o,fo,n,s),Fu.set(0,1),a=t.ray.intersectTriangle(rc,oc,Da,!1,Na),a===null))return;const l=t.ray.origin.distanceTo(Na);l<t.near||l>t.far||e.push({distance:l,point:Na.clone(),uv:Fo.getInterpolation(Na,rc,Da,oc,Gg,Fu,kg,new ft),face:null,object:this})}copy(t,e){return super.copy(t,e),t.center!==void 0&&this.center.copy(t.center),this.material=t.material,this}}function ac(r,t,e,i,n,s){mo.subVectors(r,e).addScalar(.5).multiply(i),n!==void 0?(Pa.x=s*mo.x-n*mo.y,Pa.y=n*mo.x+s*mo.y):Pa.copy(mo),r.copy(t),r.x+=Pa.x,r.y+=Pa.y,r.applyMatrix4(I0)}let Hw=class extends $r{static get type(){return"LineBasicMaterial"}constructor(t){super(),this.isLineBasicMaterial=!0,this.color=new re(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}};const fh=new P,ph=new P,Vg=new Pe,La=new Oh,lc=new Bh,Uu=new P,Hg=new P;class GB extends Ui{constructor(t=new An,e=new Hw){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.index===null){const e=t.attributes.position,i=[0];for(let n=1,s=e.count;n<s;n++)fh.fromBufferAttribute(e,n-1),ph.fromBufferAttribute(e,n),i[n]=i[n-1],i[n]+=fh.distanceTo(ph);t.setAttribute("lineDistance",new Qe(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const i=this.geometry,n=this.matrixWorld,s=t.params.Line.threshold,o=i.drawRange;if(i.boundingSphere===null&&i.computeBoundingSphere(),lc.copy(i.boundingSphere),lc.applyMatrix4(n),lc.radius+=s,t.ray.intersectsSphere(lc)===!1)return;Vg.copy(n).invert(),La.copy(t.ray).applyMatrix4(Vg);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=a*a,c=this.isLineSegments?2:1,h=i.index,d=i.attributes.position;if(h!==null){const f=Math.max(0,o.start),p=Math.min(h.count,o.start+o.count);for(let _=f,g=p-1;_<g;_+=c){const m=h.getX(_),y=h.getX(_+1),v=cc(this,t,La,l,m,y);v&&e.push(v)}if(this.isLineLoop){const _=h.getX(p-1),g=h.getX(f),m=cc(this,t,La,l,_,g);m&&e.push(m)}}else{const f=Math.max(0,o.start),p=Math.min(d.count,o.start+o.count);for(let _=f,g=p-1;_<g;_+=c){const m=cc(this,t,La,l,_,_+1);m&&e.push(m)}if(this.isLineLoop){const _=cc(this,t,La,l,p-1,f);_&&e.push(_)}}}updateMorphTargets(){const e=this.geometry.morphAttributes,i=Object.keys(e);if(i.length>0){const n=e[i[0]];if(n!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=n.length;s<o;s++){const a=n[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}}function cc(r,t,e,i,n,s){const o=r.geometry.attributes.position;if(fh.fromBufferAttribute(o,n),ph.fromBufferAttribute(o,s),e.distanceSqToSegment(fh,ph,Uu,Hg)>i)return;Uu.applyMatrix4(r.matrixWorld);const l=t.ray.origin.distanceTo(Uu);if(!(l<t.near||l>t.far))return{distance:l,point:Hg.clone().applyMatrix4(r.matrixWorld),index:n,face:null,faceIndex:null,barycoord:null,object:r}}class kB extends sn{constructor(t,e,i,n,s,o,a,l,c){super(t,e,i,n,s,o,a,l,c),this.isCanvasTexture=!0,this.needsUpdate=!0}}class bs{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const i=this.getUtoTmapping(t);return this.getPoint(i,e)}getPoints(t=5){const e=[];for(let i=0;i<=t;i++)e.push(this.getPoint(i/t));return e}getSpacedPoints(t=5){const e=[];for(let i=0;i<=t;i++)e.push(this.getPointAt(i/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let i,n=this.getPoint(0),s=0;e.push(0);for(let o=1;o<=t;o++)i=this.getPoint(o/t),s+=i.distanceTo(n),e.push(s),n=i;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const i=this.getLengths();let n=0;const s=i.length;let o;e?o=e:o=t*i[s-1];let a=0,l=s-1,c;for(;a<=l;)if(n=Math.floor(a+(l-a)/2),c=i[n]-o,c<0)a=n+1;else if(c>0)l=n-1;else{l=n;break}if(n=l,i[n]===o)return n/(s-1);const h=i[n],d=i[n+1]-h,f=(o-h)/d;return(n+f)/(s-1)}getTangent(t,e){let n=t-1e-4,s=t+1e-4;n<0&&(n=0),s>1&&(s=1);const o=this.getPoint(n),a=this.getPoint(s),l=e||(o.isVector2?new ft:new P);return l.copy(a).sub(o).normalize(),l}getTangentAt(t,e){const i=this.getUtoTmapping(t);return this.getTangent(i,e)}computeFrenetFrames(t,e){const i=new P,n=[],s=[],o=[],a=new P,l=new Pe;for(let f=0;f<=t;f++){const p=f/t;n[f]=this.getTangentAt(p,new P)}s[0]=new P,o[0]=new P;let c=Number.MAX_VALUE;const h=Math.abs(n[0].x),u=Math.abs(n[0].y),d=Math.abs(n[0].z);h<=c&&(c=h,i.set(1,0,0)),u<=c&&(c=u,i.set(0,1,0)),d<=c&&i.set(0,0,1),a.crossVectors(n[0],i).normalize(),s[0].crossVectors(n[0],a),o[0].crossVectors(n[0],s[0]);for(let f=1;f<=t;f++){if(s[f]=s[f-1].clone(),o[f]=o[f-1].clone(),a.crossVectors(n[f-1],n[f]),a.length()>Number.EPSILON){a.normalize();const p=Math.acos(ni(n[f-1].dot(n[f]),-1,1));s[f].applyMatrix4(l.makeRotationAxis(a,p))}o[f].crossVectors(n[f],s[f])}if(e===!0){let f=Math.acos(ni(s[0].dot(s[t]),-1,1));f/=t,n[0].dot(a.crossVectors(s[0],s[t]))>0&&(f=-f);for(let p=1;p<=t;p++)s[p].applyMatrix4(l.makeRotationAxis(n[p],f*p)),o[p].crossVectors(n[p],s[p])}return{tangents:n,normals:s,binormals:o}}clone(){return new this.constructor().copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class B0 extends bs{constructor(t=0,e=0,i=1,n=1,s=0,o=Math.PI*2,a=!1,l=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=i,this.yRadius=n,this.aStartAngle=s,this.aEndAngle=o,this.aClockwise=a,this.aRotation=l}getPoint(t,e=new ft){const i=e,n=Math.PI*2;let s=this.aEndAngle-this.aStartAngle;const o=Math.abs(s)<Number.EPSILON;for(;s<0;)s+=n;for(;s>n;)s-=n;s<Number.EPSILON&&(o?s=0:s=n),this.aClockwise===!0&&!o&&(s===n?s=-n:s=s-n);const a=this.aStartAngle+t*s;let l=this.aX+this.xRadius*Math.cos(a),c=this.aY+this.yRadius*Math.sin(a);if(this.aRotation!==0){const h=Math.cos(this.aRotation),u=Math.sin(this.aRotation),d=l-this.aX,f=c-this.aY;l=d*h-f*u+this.aX,c=d*u+f*h+this.aY}return i.set(l,c)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}class Ww extends B0{constructor(t,e,i,n,s,o){super(t,e,i,i,n,s,o),this.isArcCurve=!0,this.type="ArcCurve"}}function Op(){let r=0,t=0,e=0,i=0;function n(s,o,a,l){r=s,t=a,e=-3*s+3*o-2*a-l,i=2*s-2*o+a+l}return{initCatmullRom:function(s,o,a,l,c){n(o,a,c*(a-s),c*(l-o))},initNonuniformCatmullRom:function(s,o,a,l,c,h,u){let d=(o-s)/c-(a-s)/(c+h)+(a-o)/h,f=(a-o)/h-(l-o)/(h+u)+(l-a)/u;d*=h,f*=h,n(o,a,d,f)},calc:function(s){const o=s*s,a=o*s;return r+t*s+e*o+i*a}}}const hc=new P,Iu=new Op,Bu=new Op,Ou=new Op;class $w extends bs{constructor(t=[],e=!1,i="centripetal",n=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=i,this.tension=n}getPoint(t,e=new P){const i=e,n=this.points,s=n.length,o=(s-(this.closed?0:1))*t;let a=Math.floor(o),l=o-a;this.closed?a+=a>0?0:(Math.floor(Math.abs(a)/s)+1)*s:l===0&&a===s-1&&(a=s-2,l=1);let c,h;this.closed||a>0?c=n[(a-1)%s]:(hc.subVectors(n[0],n[1]).add(n[0]),c=hc);const u=n[a%s],d=n[(a+1)%s];if(this.closed||a+2<s?h=n[(a+2)%s]:(hc.subVectors(n[s-1],n[s-2]).add(n[s-1]),h=hc),this.curveType==="centripetal"||this.curveType==="chordal"){const f=this.curveType==="chordal"?.5:.25;let p=Math.pow(c.distanceToSquared(u),f),_=Math.pow(u.distanceToSquared(d),f),g=Math.pow(d.distanceToSquared(h),f);_<1e-4&&(_=1),p<1e-4&&(p=_),g<1e-4&&(g=_),Iu.initNonuniformCatmullRom(c.x,u.x,d.x,h.x,p,_,g),Bu.initNonuniformCatmullRom(c.y,u.y,d.y,h.y,p,_,g),Ou.initNonuniformCatmullRom(c.z,u.z,d.z,h.z,p,_,g)}else this.curveType==="catmullrom"&&(Iu.initCatmullRom(c.x,u.x,d.x,h.x,this.tension),Bu.initCatmullRom(c.y,u.y,d.y,h.y,this.tension),Ou.initCatmullRom(c.z,u.z,d.z,h.z,this.tension));return i.set(Iu.calc(l),Bu.calc(l),Ou.calc(l)),i}copy(t){super.copy(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const n=t.points[e];this.points.push(n.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,i=this.points.length;e<i;e++){const n=this.points[e];t.points.push(n.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const n=t.points[e];this.points.push(new P().fromArray(n))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function Wg(r,t,e,i,n){const s=(i-t)*.5,o=(n-e)*.5,a=r*r,l=r*a;return(2*e-2*i+s+o)*l+(-3*e+3*i-2*s-o)*a+s*r+e}function Xw(r,t){const e=1-r;return e*e*t}function qw(r,t){return 2*(1-r)*r*t}function Yw(r,t){return r*r*t}function tl(r,t,e,i){return Xw(r,t)+qw(r,e)+Yw(r,i)}function jw(r,t){const e=1-r;return e*e*e*t}function Kw(r,t){const e=1-r;return 3*e*e*r*t}function Zw(r,t){return 3*(1-r)*r*r*t}function Qw(r,t){return r*r*r*t}function el(r,t,e,i,n){return jw(r,t)+Kw(r,e)+Zw(r,i)+Qw(r,n)}class Jw extends bs{constructor(t=new ft,e=new ft,i=new ft,n=new ft){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=i,this.v3=n}getPoint(t,e=new ft){const i=e,n=this.v0,s=this.v1,o=this.v2,a=this.v3;return i.set(el(t,n.x,s.x,o.x,a.x),el(t,n.y,s.y,o.y,a.y)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}class t1 extends bs{constructor(t=new P,e=new P,i=new P,n=new P){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=i,this.v3=n}getPoint(t,e=new P){const i=e,n=this.v0,s=this.v1,o=this.v2,a=this.v3;return i.set(el(t,n.x,s.x,o.x,a.x),el(t,n.y,s.y,o.y,a.y),el(t,n.z,s.z,o.z,a.z)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}class e1 extends bs{constructor(t=new ft,e=new ft){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new ft){const i=e;return t===1?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e=new ft){return e.subVectors(this.v2,this.v1).normalize()}getTangentAt(t,e){return this.getTangent(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class i1 extends bs{constructor(t=new P,e=new P){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=t,this.v2=e}getPoint(t,e=new P){const i=e;return t===1?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e=new P){return e.subVectors(this.v2,this.v1).normalize()}getTangentAt(t,e){return this.getTangent(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class n1 extends bs{constructor(t=new ft,e=new ft,i=new ft){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=i}getPoint(t,e=new ft){const i=e,n=this.v0,s=this.v1,o=this.v2;return i.set(tl(t,n.x,s.x,o.x),tl(t,n.y,s.y,o.y)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class O0 extends bs{constructor(t=new P,e=new P,i=new P){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=i}getPoint(t,e=new P){const i=e,n=this.v0,s=this.v1,o=this.v2;return i.set(tl(t,n.x,s.x,o.x),tl(t,n.y,s.y,o.y),tl(t,n.z,s.z,o.z)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class s1 extends bs{constructor(t=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=t}getPoint(t,e=new ft){const i=e,n=this.points,s=(n.length-1)*t,o=Math.floor(s),a=s-o,l=n[o===0?o:o-1],c=n[o],h=n[o>n.length-2?n.length-1:o+1],u=n[o>n.length-3?n.length-1:o+2];return i.set(Wg(a,l.x,c.x,h.x,u.x),Wg(a,l.y,c.y,h.y,u.y)),i}copy(t){super.copy(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const n=t.points[e];this.points.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,i=this.points.length;e<i;e++){const n=this.points[e];t.points.push(n.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const n=t.points[e];this.points.push(new ft().fromArray(n))}return this}}var r1=Object.freeze({__proto__:null,ArcCurve:Ww,CatmullRomCurve3:$w,CubicBezierCurve:Jw,CubicBezierCurve3:t1,EllipseCurve:B0,LineCurve:e1,LineCurve3:i1,QuadraticBezierCurve:n1,QuadraticBezierCurve3:O0,SplineCurve:s1});class zp extends An{constructor(t=1,e=1,i=1,n=32,s=1,o=!1,a=0,l=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:i,radialSegments:n,heightSegments:s,openEnded:o,thetaStart:a,thetaLength:l};const c=this;n=Math.floor(n),s=Math.floor(s);const h=[],u=[],d=[],f=[];let p=0;const _=[],g=i/2;let m=0;y(),o===!1&&(t>0&&v(!0),e>0&&v(!1)),this.setIndex(h),this.setAttribute("position",new Qe(u,3)),this.setAttribute("normal",new Qe(d,3)),this.setAttribute("uv",new Qe(f,2));function y(){const x=new P,C=new P;let A=0;const E=(e-t)/i;for(let w=0;w<=s;w++){const T=[],S=w/s,N=S*(e-t)+t;for(let G=0;G<=n;G++){const B=G/n,V=B*l+a,Q=Math.sin(V),q=Math.cos(V);C.x=N*Q,C.y=-S*i+g,C.z=N*q,u.push(C.x,C.y,C.z),x.set(Q,E,q).normalize(),d.push(x.x,x.y,x.z),f.push(B,1-S),T.push(p++)}_.push(T)}for(let w=0;w<n;w++)for(let T=0;T<s;T++){const S=_[T][w],N=_[T+1][w],G=_[T+1][w+1],B=_[T][w+1];(t>0||T!==0)&&(h.push(S,N,B),A+=3),(e>0||T!==s-1)&&(h.push(N,G,B),A+=3)}c.addGroup(m,A,0),m+=A}function v(x){const C=p,A=new ft,E=new P;let w=0;const T=x===!0?t:e,S=x===!0?1:-1;for(let G=1;G<=n;G++)u.push(0,g*S,0),d.push(0,S,0),f.push(.5,.5),p++;const N=p;for(let G=0;G<=n;G++){const V=G/n*l+a,Q=Math.cos(V),q=Math.sin(V);E.x=T*q,E.y=g*S,E.z=T*Q,u.push(E.x,E.y,E.z),d.push(0,S,0),A.x=Q*.5+.5,A.y=q*.5*S+.5,f.push(A.x,A.y),p++}for(let G=0;G<n;G++){const B=C+G,V=N+G;x===!0?h.push(V,V+1,B):h.push(V+1,V,B),w+=3}c.addGroup(m,w,x===!0?1:2),m+=w}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new zp(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class z0 extends zp{constructor(t=1,e=1,i=32,n=1,s=!1,o=0,a=Math.PI*2){super(0,t,e,i,n,s,o,a),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:i,heightSegments:n,openEnded:s,thetaStart:o,thetaLength:a}}static fromJSON(t){return new z0(t.radius,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}let VB=class G0 extends An{constructor(t=1,e=32,i=16,n=0,s=Math.PI*2,o=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:n,phiLength:s,thetaStart:o,thetaLength:a},e=Math.max(3,Math.floor(e)),i=Math.max(2,Math.floor(i));const l=Math.min(o+a,Math.PI);let c=0;const h=[],u=new P,d=new P,f=[],p=[],_=[],g=[];for(let m=0;m<=i;m++){const y=[],v=m/i;let x=0;m===0&&o===0?x=.5/e:m===i&&l===Math.PI&&(x=-.5/e);for(let C=0;C<=e;C++){const A=C/e;u.x=-t*Math.cos(n+A*s)*Math.sin(o+v*a),u.y=t*Math.cos(o+v*a),u.z=t*Math.sin(n+A*s)*Math.sin(o+v*a),p.push(u.x,u.y,u.z),d.copy(u).normalize(),_.push(d.x,d.y,d.z),g.push(A+x,1-v),y.push(c++)}h.push(y)}for(let m=0;m<i;m++)for(let y=0;y<e;y++){const v=h[m][y+1],x=h[m][y],C=h[m+1][y],A=h[m+1][y+1];(m!==0||o>0)&&f.push(v,x,A),(m!==i-1||l<Math.PI)&&f.push(x,C,A)}this.setIndex(f),this.setAttribute("position",new Qe(p,3)),this.setAttribute("normal",new Qe(_,3)),this.setAttribute("uv",new Qe(g,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new G0(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}};class k0 extends An{constructor(t=new O0(new P(-1,-1,0),new P(-1,1,0),new P(1,1,0)),e=64,i=1,n=8,s=!1){super(),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:i,radialSegments:n,closed:s};const o=t.computeFrenetFrames(e,s);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals;const a=new P,l=new P,c=new ft;let h=new P;const u=[],d=[],f=[],p=[];_(),this.setIndex(p),this.setAttribute("position",new Qe(u,3)),this.setAttribute("normal",new Qe(d,3)),this.setAttribute("uv",new Qe(f,2));function _(){for(let v=0;v<e;v++)g(v);g(s===!1?e:0),y(),m()}function g(v){h=t.getPointAt(v/e,h);const x=o.normals[v],C=o.binormals[v];for(let A=0;A<=n;A++){const E=A/n*Math.PI*2,w=Math.sin(E),T=-Math.cos(E);l.x=T*x.x+w*C.x,l.y=T*x.y+w*C.y,l.z=T*x.z+w*C.z,l.normalize(),d.push(l.x,l.y,l.z),a.x=h.x+i*l.x,a.y=h.y+i*l.y,a.z=h.z+i*l.z,u.push(a.x,a.y,a.z)}}function m(){for(let v=1;v<=e;v++)for(let x=1;x<=n;x++){const C=(n+1)*(v-1)+(x-1),A=(n+1)*v+(x-1),E=(n+1)*v+x,w=(n+1)*(v-1)+x;p.push(C,A,w),p.push(A,E,w)}}function y(){for(let v=0;v<=e;v++)for(let x=0;x<=n;x++)c.x=v/e,c.y=x/n,f.push(c.x,c.y)}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}toJSON(){const t=super.toJSON();return t.path=this.parameters.path.toJSON(),t}static fromJSON(t){return new k0(new r1[t.path.type]().fromJSON(t.path),t.tubularSegments,t.radius,t.radialSegments,t.closed)}}let HB=class extends $r{static get type(){return"MeshLambertMaterial"}constructor(t){super(),this.isMeshLambertMaterial=!0,this.color=new re(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new re(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=c0,this.normalScale=new ft(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new rr,this.combine=Ep,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}};const $g={enabled:!1,files:{},add:function(r,t){this.enabled!==!1&&(this.files[r]=t)},get:function(r){if(this.enabled!==!1)return this.files[r]},remove:function(r){delete this.files[r]},clear:function(){this.files={}}};class o1{constructor(t,e,i){const n=this;let s=!1,o=0,a=0,l;const c=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=i,this.itemStart=function(h){a++,s===!1&&n.onStart!==void 0&&n.onStart(h,o,a),s=!0},this.itemEnd=function(h){o++,n.onProgress!==void 0&&n.onProgress(h,o,a),o===a&&(s=!1,n.onLoad!==void 0&&n.onLoad())},this.itemError=function(h){n.onError!==void 0&&n.onError(h)},this.resolveURL=function(h){return l?l(h):h},this.setURLModifier=function(h){return l=h,this},this.addHandler=function(h,u){return c.push(h,u),this},this.removeHandler=function(h){const u=c.indexOf(h);return u!==-1&&c.splice(u,2),this},this.getHandler=function(h){for(let u=0,d=c.length;u<d;u+=2){const f=c[u],p=c[u+1];if(f.global&&(f.lastIndex=0),f.test(h))return p}return null}}}const a1=new o1;class Gp{constructor(t){this.manager=t!==void 0?t:a1,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const i=this;return new Promise(function(n,s){i.load(t,n,e,s)})}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}Gp.DEFAULT_MATERIAL_NAME="__DEFAULT";class l1 extends Gp{constructor(t){super(t)}load(t,e,i,n){this.path!==void 0&&(t=this.path+t),t=this.manager.resolveURL(t);const s=this,o=$g.get(t);if(o!==void 0)return s.manager.itemStart(t),setTimeout(function(){e&&e(o),s.manager.itemEnd(t)},0),o;const a=ul("img");function l(){h(),$g.add(t,this),e&&e(this),s.manager.itemEnd(t)}function c(u){h(),n&&n(u),s.manager.itemError(t),s.manager.itemEnd(t)}function h(){a.removeEventListener("load",l,!1),a.removeEventListener("error",c,!1)}return a.addEventListener("load",l,!1),a.addEventListener("error",c,!1),t.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(a.crossOrigin=this.crossOrigin),s.manager.itemStart(t),a.src=t,a}}class $B extends Gp{constructor(t){super(t)}load(t,e,i,n){const s=new sn,o=new l1(this.manager);return o.setCrossOrigin(this.crossOrigin),o.setPath(this.path),o.load(t,function(a){s.image=a,s.needsUpdate=!0,e!==void 0&&e(s)},i,n),s}}let V0=class extends Ui{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new re(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,this.groundColor!==void 0&&(e.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(e.object.distance=this.distance),this.angle!==void 0&&(e.object.angle=this.angle),this.decay!==void 0&&(e.object.decay=this.decay),this.penumbra!==void 0&&(e.object.penumbra=this.penumbra),this.shadow!==void 0&&(e.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(e.object.target=this.target.uuid),e}};const zu=new Pe,Xg=new P,qg=new P;let c1=class{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new ft(512,512),this.map=null,this.mapPass=null,this.matrix=new Pe,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Up,this._frameExtents=new ft(1,1),this._viewportCount=1,this._viewports=[new qe(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,i=this.matrix;Xg.setFromMatrixPosition(t.matrixWorld),e.position.copy(Xg),qg.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(qg),e.updateMatrixWorld(),zu.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(zu),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(zu)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.intensity=t.intensity,this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const t={};return this.intensity!==1&&(t.intensity=this.intensity),this.bias!==0&&(t.bias=this.bias),this.normalBias!==0&&(t.normalBias=this.normalBias),this.radius!==1&&(t.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}},h1=class extends c1{constructor(){super(new Ip(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}},jB=class extends V0{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Ui.DEFAULT_UP),this.updateMatrix(),this.target=new Ui,this.shadow=new h1}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}},ZB=class extends V0{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}};class u1{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=Yg(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=Yg();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function Yg(){return performance.now()}const jg=new Pe;class d1{constructor(t,e,i=0,n=1/0){this.ray=new Oh(t,e),this.near=i,this.far=n,this.camera=null,this.layers=new Lp,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}setFromXRController(t){return jg.identity().extractRotation(t.matrixWorld),this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(jg),this}intersectObject(t,e=!0,i=[]){return Of(t,this,i,e),i.sort(Kg),i}intersectObjects(t,e=!0,i=[]){for(let n=0,s=t.length;n<s;n++)Of(t[n],this,i,e);return i.sort(Kg),i}}function Kg(r,t){return r.distance-t.distance}function Of(r,t,e,i){let n=!0;if(r.layers.test(t.layers)&&r.raycast(t,e)===!1&&(n=!1),n===!0&&i===!0){const s=r.children;for(let o=0,a=s.length;o<a;o++)Of(s[o],t,e,!0)}}class Zg{constructor(t=1,e=0,i=0){return this.radius=t,this.phi=e,this.theta=i,this}set(t,e,i){return this.radius=t,this.phi=e,this.theta=i,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,i){return this.radius=Math.sqrt(t*t+e*e+i*i),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,i),this.phi=Math.acos(ni(e/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class kh extends Wr{constructor(t,e=null){super(),this.object=t,this.domElement=e,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:bp}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=bp);const Yo=new es,rs=new ft,H0=new P,Gu=new ft,nh=new ft,mh=new P,zf=new P,W0=new Pe,$0=new P,X0=new P;let Ni=null,Rn=null;const os=[],Qs={NONE:-1,PAN:0,ROTATE:1};class JB extends kh{constructor(t,e,i=null){super(e,i),this.objects=t,this.recursive=!0,this.transformGroup=!1,this.rotateSpeed=1,this.raycaster=new d1,this.mouseButtons={LEFT:ci.PAN,MIDDLE:ci.PAN,RIGHT:ci.ROTATE},this.touches={ONE:cs.PAN},this._onPointerMove=f1.bind(this),this._onPointerDown=p1.bind(this),this._onPointerCancel=m1.bind(this),this._onContextMenu=g1.bind(this),i!==null&&this.connect()}connect(){this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointerup",this._onPointerCancel),this.domElement.addEventListener("pointerleave",this._onPointerCancel),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointerup",this._onPointerCancel),this.domElement.removeEventListener("pointerleave",this._onPointerCancel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.domElement.style.touchAction="auto",this.domElement.style.cursor=""}dispose(){this.disconnect()}_updatePointer(t){const e=this.domElement.getBoundingClientRect();rs.x=(t.clientX-e.left)/e.width*2-1,rs.y=-(t.clientY-e.top)/e.height*2+1}_updateState(t){let e;if(t.pointerType==="touch")e=this.touches.ONE;else switch(t.button){case 0:e=this.mouseButtons.LEFT;break;case 1:e=this.mouseButtons.MIDDLE;break;case 2:e=this.mouseButtons.RIGHT;break;default:e=null}switch(e){case ci.PAN:case cs.PAN:this.state=Qs.PAN;break;case ci.ROTATE:case cs.ROTATE:this.state=Qs.ROTATE;break;default:this.state=Qs.NONE}}getRaycaster(){return console.warn("THREE.DragControls: getRaycaster() has been deprecated. Use controls.raycaster instead."),this.raycaster}setObjects(t){console.warn("THREE.DragControls: setObjects() has been deprecated. Use controls.objects instead."),this.objects=t}getObjects(){return console.warn("THREE.DragControls: getObjects() has been deprecated. Use controls.objects instead."),this.objects}activate(){console.warn("THREE.DragControls: activate() has been renamed to connect()."),this.connect()}deactivate(){console.warn("THREE.DragControls: deactivate() has been renamed to disconnect()."),this.disconnect()}set mode(t){console.warn("THREE.DragControls: The .mode property has been removed. Define the type of transformation via the .mouseButtons or .touches properties.")}get mode(){console.warn("THREE.DragControls: The .mode property has been removed. Define the type of transformation via the .mouseButtons or .touches properties.")}}function f1(r){const t=this.object,e=this.domElement,i=this.raycaster;if(this.enabled!==!1){if(this._updatePointer(r),i.setFromCamera(rs,t),Ni)this.state===Qs.PAN?i.ray.intersectPlane(Yo,mh)&&Ni.position.copy(mh.sub(H0).applyMatrix4(W0)):this.state===Qs.ROTATE&&(Gu.subVectors(rs,nh).multiplyScalar(this.rotateSpeed),Ni.rotateOnWorldAxis($0,Gu.x),Ni.rotateOnWorldAxis(X0.normalize(),-Gu.y)),this.dispatchEvent({type:"drag",object:Ni}),nh.copy(rs);else if(r.pointerType==="mouse"||r.pointerType==="pen")if(os.length=0,i.setFromCamera(rs,t),i.intersectObjects(this.objects,this.recursive,os),os.length>0){const n=os[0].object;Yo.setFromNormalAndCoplanarPoint(t.getWorldDirection(Yo.normal),zf.setFromMatrixPosition(n.matrixWorld)),Rn!==n&&Rn!==null&&(this.dispatchEvent({type:"hoveroff",object:Rn}),e.style.cursor="auto",Rn=null),Rn!==n&&(this.dispatchEvent({type:"hoveron",object:n}),e.style.cursor="pointer",Rn=n)}else Rn!==null&&(this.dispatchEvent({type:"hoveroff",object:Rn}),e.style.cursor="auto",Rn=null);nh.copy(rs)}}function p1(r){const t=this.object,e=this.domElement,i=this.raycaster;this.enabled!==!1&&(this._updatePointer(r),this._updateState(r),os.length=0,i.setFromCamera(rs,t),i.intersectObjects(this.objects,this.recursive,os),os.length>0&&(this.transformGroup===!0?Ni=q0(os[0].object):Ni=os[0].object,Yo.setFromNormalAndCoplanarPoint(t.getWorldDirection(Yo.normal),zf.setFromMatrixPosition(Ni.matrixWorld)),i.ray.intersectPlane(Yo,mh)&&(this.state===Qs.PAN?(W0.copy(Ni.parent.matrixWorld).invert(),H0.copy(mh).sub(zf.setFromMatrixPosition(Ni.matrixWorld))):this.state===Qs.ROTATE&&($0.set(0,1,0).applyQuaternion(t.quaternion).normalize(),X0.set(1,0,0).applyQuaternion(t.quaternion).normalize())),e.style.cursor="move",this.dispatchEvent({type:"dragstart",object:Ni})),nh.copy(rs))}function m1(){this.enabled!==!1&&(Ni&&(this.dispatchEvent({type:"dragend",object:Ni}),Ni=null),this.domElement.style.cursor=Rn?"pointer":"auto",this.state=Qs.NONE)}function g1(r){this.enabled!==!1&&r.preventDefault()}function q0(r,t=null){return r.isGroup&&(t=r),r.parent===null?t:q0(r.parent,t)}/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Vh="170",_1=0,x1=1,y1=2,v1=1,uc=3,la=0,Tn=1,jo=2,ca=0,Js=1,gh=2,_h=3,xh=4,Y0=5,Ys=100,j0=101,K0=102,S1=103,M1=104,Z0=200,Q0=201,J0=202,ty=203,yh=204,vh=205,ey=206,iy=207,ny=208,sy=209,ry=210,oy=0,ay=1,ly=2,Sh=3,cy=4,hy=5,uy=6,dy=7,Hh=0,T1=1,b1=2,Ko=0,E1=1,A1=2,w1=3,R1=4,C1=6,N1=7,kp=300,Or=301,ha=302,El=303,Al=304,Gf=306,Mh=1e3,Oo=1001,Th=1002,yi=1003,kf=1004,Zo=1005,Yi=1006,Vf=1007,ms=1008,tr=1009,il=1010,nl=1011,zo=1012,Ti=1013,ai=1014,qi=1015,gs=1016,P1=1017,D1=1018,wl=1020,fy=35902,L1=1021,Vp=1022,xa=1023,F1=1024,U1=1025,Ur=1026,ua=1027,Hp=1028,Wp=1029,dl=1030,$p=1031,I1=1032,Xp=1033,ku=33776,sh=33777,rh=33778,oh=33779,Qg=35840,Jg=35841,t_=35842,e_=35843,i_=36196,Hf=37492,Wf=37496,$f=37808,Xf=37809,qf=37810,Yf=37811,jf=37812,Kf=37813,Zf=37814,Qf=37815,Jf=37816,tp=37817,ep=37818,ip=37819,np=37820,sp=37821,Vu=36492,B1=36283,n_=36284,s_=36285,r_=36286,or=0,O1=1,zr="",Lt="srgb",er="srgb-linear",py="linear",fl="srgb",z1=0,br=7680,G1=7681,k1=7682,V1=7683,H1=34055,W1=34056,$1=5386,X1=512,q1=513,Y1=514,j1=515,K1=516,Z1=517,Q1=518,rp=519,my=512,qp=513,gy=514,_y=515,xy=516,yy=517,vy=518,Sy=519,bh=35044,Go=35048,vn=2e3,Gr=2001;class ya{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const i=this._listeners;i[t]===void 0&&(i[t]=[]),i[t].indexOf(e)===-1&&i[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const i=this._listeners;return i[t]!==void 0&&i[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const n=this._listeners[t];if(n!==void 0){const s=n.indexOf(e);s!==-1&&n.splice(s,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const i=this._listeners[t.type];if(i!==void 0){t.target=this;const n=i.slice(0);for(let s=0,o=n.length;s<o;s++)n[s].call(this,t);t.target=null}}}const gi=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let o_=1234567;const sl=Math.PI/180,pl=180/Math.PI;function _s(){const r=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,i=Math.random()*4294967295|0;return(gi[r&255]+gi[r>>8&255]+gi[r>>16&255]+gi[r>>24&255]+"-"+gi[t&255]+gi[t>>8&255]+"-"+gi[t>>16&15|64]+gi[t>>24&255]+"-"+gi[e&63|128]+gi[e>>8&255]+"-"+gi[e>>16&255]+gi[e>>24&255]+gi[i&255]+gi[i>>8&255]+gi[i>>16&255]+gi[i>>24&255]).toLowerCase()}function li(r,t,e){return Math.max(t,Math.min(e,r))}function Yp(r,t){return(r%t+t)%t}function J1(r,t,e,i,n){return i+(r-t)*(n-i)/(e-t)}function tR(r,t,e){return r!==t?(e-r)/(t-r):0}function rl(r,t,e){return(1-e)*r+e*t}function eR(r,t,e,i){return rl(r,t,1-Math.exp(-e*i))}function iR(r,t=1){return t-Math.abs(Yp(r,t*2)-t)}function nR(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*(3-2*r))}function sR(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*r*(r*(r*6-15)+10))}function rR(r,t){return r+Math.floor(Math.random()*(t-r+1))}function oR(r,t){return r+Math.random()*(t-r)}function aR(r){return r*(.5-Math.random())}function lR(r){r!==void 0&&(o_=r);let t=o_+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function cR(r){return r*sl}function hR(r){return r*pl}function uR(r){return(r&r-1)===0&&r!==0}function dR(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function fR(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function pR(r,t,e,i,n){const s=Math.cos,o=Math.sin,a=s(e/2),l=o(e/2),c=s((t+i)/2),h=o((t+i)/2),u=s((t-i)/2),d=o((t-i)/2),f=s((i-t)/2),p=o((i-t)/2);switch(n){case"XYX":r.set(a*h,l*u,l*d,a*c);break;case"YZY":r.set(l*d,a*h,l*u,a*c);break;case"ZXZ":r.set(l*u,l*d,a*h,a*c);break;case"XZX":r.set(a*h,l*p,l*f,a*c);break;case"YXY":r.set(l*f,a*h,l*p,a*c);break;case"ZYZ":r.set(l*p,l*f,a*h,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+n)}}function bi(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function $t(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const mR={DEG2RAD:sl,RAD2DEG:pl,generateUUID:_s,clamp:li,euclideanModulo:Yp,mapLinear:J1,inverseLerp:tR,lerp:rl,damp:eR,pingpong:iR,smoothstep:nR,smootherstep:sR,randInt:rR,randFloat:oR,randFloatSpread:aR,seededRandom:lR,degToRad:cR,radToDeg:hR,isPowerOfTwo:uR,ceilPowerOfTwo:dR,floorPowerOfTwo:fR,setQuaternionFromProperEuler:pR,normalize:$t,denormalize:bi};class oe{constructor(t=0,e=0){oe.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,i=this.y,n=t.elements;return this.x=n[0]*e+n[3]*i+n[6],this.y=n[1]*e+n[4]*i+n[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(li(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y;return e*e+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const i=Math.cos(e),n=Math.sin(e),s=this.x-t.x,o=this.y-t.y;return this.x=s*i-o*n+t.x,this.y=s*n+o*i+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Bi{constructor(t,e,i,n,s,o,a,l,c){Bi.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,i,n,s,o,a,l,c)}set(t,e,i,n,s,o,a,l,c){const h=this.elements;return h[0]=t,h[1]=n,h[2]=a,h[3]=e,h[4]=s,h[5]=l,h[6]=i,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this}extractBasis(t,e,i){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,n=e.elements,s=this.elements,o=i[0],a=i[3],l=i[6],c=i[1],h=i[4],u=i[7],d=i[2],f=i[5],p=i[8],_=n[0],g=n[3],m=n[6],y=n[1],v=n[4],x=n[7],C=n[2],A=n[5],E=n[8];return s[0]=o*_+a*y+l*C,s[3]=o*g+a*v+l*A,s[6]=o*m+a*x+l*E,s[1]=c*_+h*y+u*C,s[4]=c*g+h*v+u*A,s[7]=c*m+h*x+u*E,s[2]=d*_+f*y+p*C,s[5]=d*g+f*v+p*A,s[8]=d*m+f*x+p*E,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[1],n=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8];return e*o*h-e*a*c-i*s*h+i*a*l+n*s*c-n*o*l}invert(){const t=this.elements,e=t[0],i=t[1],n=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=h*o-a*c,d=a*l-h*s,f=c*s-o*l,p=e*u+i*d+n*f;if(p===0)return this.set(0,0,0,0,0,0,0,0,0);const _=1/p;return t[0]=u*_,t[1]=(n*c-h*i)*_,t[2]=(a*i-n*o)*_,t[3]=d*_,t[4]=(h*e-n*l)*_,t[5]=(n*s-a*e)*_,t[6]=f*_,t[7]=(i*l-c*e)*_,t[8]=(o*e-i*s)*_,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,i,n,s,o,a){const l=Math.cos(s),c=Math.sin(s);return this.set(i*l,i*c,-i*(l*o+c*a)+o+t,-n*c,n*l,-n*(-c*o+l*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(Hu.makeScale(t,e)),this}rotate(t){return this.premultiply(Hu.makeRotation(-t)),this}translate(t,e){return this.premultiply(Hu.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,i,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,i=t.elements;for(let n=0;n<9;n++)if(e[n]!==i[n])return!1;return!0}fromArray(t,e=0){for(let i=0;i<9;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const Hu=new Bi;function gR(r){for(let t=r.length-1;t>=0;--t)if(r[t]>=65535)return!0;return!1}function op(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function _R(){const r=op("canvas");return r.style.display="block",r}const a_={};function xR(r){r in a_||(a_[r]=!0,console.warn(r))}const We={enabled:!0,workingColorSpace:er,spaces:{},convert:function(r,t,e){return this.enabled===!1||t===e||!t||!e||(this.spaces[t].transfer===fl&&(r.r=xs(r.r),r.g=xs(r.g),r.b=xs(r.b)),this.spaces[t].primaries!==this.spaces[e].primaries&&(r.applyMatrix3(this.spaces[t].toXYZ),r.applyMatrix3(this.spaces[e].fromXYZ)),this.spaces[e].transfer===fl&&(r.r=Qo(r.r),r.g=Qo(r.g),r.b=Qo(r.b))),r},fromWorkingColorSpace:function(r,t){return this.convert(r,this.workingColorSpace,t)},toWorkingColorSpace:function(r,t){return this.convert(r,t,this.workingColorSpace)},getPrimaries:function(r){return this.spaces[r].primaries},getTransfer:function(r){return r===zr?py:this.spaces[r].transfer},getLuminanceCoefficients:function(r,t=this.workingColorSpace){return r.fromArray(this.spaces[t].luminanceCoefficients)},define:function(r){Object.assign(this.spaces,r)},_getMatrix:function(r,t,e){return r.copy(this.spaces[t].toXYZ).multiply(this.spaces[e].fromXYZ)},_getDrawingBufferColorSpace:function(r){return this.spaces[r].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(r=this.workingColorSpace){return this.spaces[r].workingColorSpaceConfig.unpackColorSpace}};function xs(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function Qo(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}const l_=[.64,.33,.3,.6,.15,.06],c_=[.2126,.7152,.0722],h_=[.3127,.329],u_=new Bi().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),d_=new Bi().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);We.define({[er]:{primaries:l_,whitePoint:h_,transfer:py,toXYZ:u_,fromXYZ:d_,luminanceCoefficients:c_,workingColorSpaceConfig:{unpackColorSpace:Lt},outputColorSpaceConfig:{drawingBufferColorSpace:Lt}},[Lt]:{primaries:l_,whitePoint:h_,transfer:fl,toXYZ:u_,fromXYZ:d_,luminanceCoefficients:c_,outputColorSpaceConfig:{drawingBufferColorSpace:Lt}}});let go;class yR{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{go===void 0&&(go=op("canvas")),go.width=t.width,go.height=t.height;const i=go.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),e=go}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=op("canvas");e.width=t.width,e.height=t.height;const i=e.getContext("2d");i.drawImage(t,0,0,t.width,t.height);const n=i.getImageData(0,0,t.width,t.height),s=n.data;for(let o=0;o<s.length;o++)s[o]=xs(s[o]/255)*255;return i.putImageData(n,0,0),e}else if(t.data){const e=t.data.slice(0);for(let i=0;i<e.length;i++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[i]=Math.floor(xs(e[i]/255)*255):e[i]=xs(e[i]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let vR=0;class My{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:vR++}),this.uuid=_s(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const i={uuid:this.uuid,url:""},n=this.data;if(n!==null){let s;if(Array.isArray(n)){s=[];for(let o=0,a=n.length;o<a;o++)n[o].isDataTexture?s.push(Wu(n[o].image)):s.push(Wu(n[o]))}else s=Wu(n);i.url=s}return e||(t.images[this.uuid]=i),i}}function Wu(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?yR.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let SR=0;class Ei extends ya{constructor(t=Ei.DEFAULT_IMAGE,e=Ei.DEFAULT_MAPPING,i=Oo,n=Oo,s=Yi,o=ms,a=xa,l=tr,c=Ei.DEFAULT_ANISOTROPY,h=zr){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:SR++}),this.uuid=_s(),this.name="",this.source=new My(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=i,this.wrapT=n,this.magFilter=s,this.minFilter=o,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=l,this.offset=new oe(0,0),this.repeat=new oe(1,1),this.center=new oe(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Bi,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const i={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(i.userData=this.userData),e||(t.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==kp)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case Mh:t.x=t.x-Math.floor(t.x);break;case Oo:t.x=t.x<0?0:1;break;case Th:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case Mh:t.y=t.y-Math.floor(t.y);break;case Oo:t.y=t.y<0?0:1;break;case Th:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}}Ei.DEFAULT_IMAGE=null;Ei.DEFAULT_MAPPING=kp;Ei.DEFAULT_ANISOTROPY=1;class _e{constructor(t=0,e=0,i=0,n=1){_e.prototype.isVector4=!0,this.x=t,this.y=e,this.z=i,this.w=n}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,i,n){return this.x=t,this.y=e,this.z=i,this.w=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,i=this.y,n=this.z,s=this.w,o=t.elements;return this.x=o[0]*e+o[4]*i+o[8]*n+o[12]*s,this.y=o[1]*e+o[5]*i+o[9]*n+o[13]*s,this.z=o[2]*e+o[6]*i+o[10]*n+o[14]*s,this.w=o[3]*e+o[7]*i+o[11]*n+o[15]*s,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,i,n,s;const l=t.elements,c=l[0],h=l[4],u=l[8],d=l[1],f=l[5],p=l[9],_=l[2],g=l[6],m=l[10];if(Math.abs(h-d)<.01&&Math.abs(u-_)<.01&&Math.abs(p-g)<.01){if(Math.abs(h+d)<.1&&Math.abs(u+_)<.1&&Math.abs(p+g)<.1&&Math.abs(c+f+m-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const v=(c+1)/2,x=(f+1)/2,C=(m+1)/2,A=(h+d)/4,E=(u+_)/4,w=(p+g)/4;return v>x&&v>C?v<.01?(i=0,n=.707106781,s=.707106781):(i=Math.sqrt(v),n=A/i,s=E/i):x>C?x<.01?(i=.707106781,n=0,s=.707106781):(n=Math.sqrt(x),i=A/n,s=w/n):C<.01?(i=.707106781,n=.707106781,s=0):(s=Math.sqrt(C),i=E/s,n=w/s),this.set(i,n,s,e),this}let y=Math.sqrt((g-p)*(g-p)+(u-_)*(u-_)+(d-h)*(d-h));return Math.abs(y)<.001&&(y=1),this.x=(g-p)/y,this.y=(u-_)/y,this.z=(d-h)/y,this.w=Math.acos((c+f+m-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this.w=t.w+(e.w-t.w)*i,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class va extends ya{constructor(t=1,e=1,i={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new _e(0,0,t,e),this.scissorTest=!1,this.viewport=new _e(0,0,t,e);const n={width:t,height:e,depth:1};i=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:Yi,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},i);const s=new Ei(n,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.colorSpace);s.flipY=!1,s.generateMipmaps=i.generateMipmaps,s.internalFormat=i.internalFormat,this.textures=[];const o=i.count;for(let a=0;a<o;a++)this.textures[a]=s.clone(),this.textures[a].isRenderTargetTexture=!0;this.depthBuffer=i.depthBuffer,this.stencilBuffer=i.stencilBuffer,this.resolveDepthBuffer=i.resolveDepthBuffer,this.resolveStencilBuffer=i.resolveStencilBuffer,this.depthTexture=i.depthTexture,this.samples=i.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,i=1){if(this.width!==t||this.height!==e||this.depth!==i){this.width=t,this.height=e,this.depth=i;for(let n=0,s=this.textures.length;n<s;n++)this.textures[n].image.width=t,this.textures[n].image.height=e,this.textures[n].image.depth=i;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let i=0,n=t.textures.length;i<n;i++)this.textures[i]=t.textures[i].clone(),this.textures[i].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new My(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class MR extends va{constructor(t=1,e=1,i={}){super(t,e,i),this.isWebGLRenderTarget=!0}}class TR extends Ei{constructor(t=null,e=1,i=1,n=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:i,depth:n},this.magFilter=yi,this.minFilter=yi,this.wrapR=Oo,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class Rl{constructor(t=0,e=0,i=0,n=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=i,this._w=n}static slerpFlat(t,e,i,n,s,o,a){let l=i[n+0],c=i[n+1],h=i[n+2],u=i[n+3];const d=s[o+0],f=s[o+1],p=s[o+2],_=s[o+3];if(a===0){t[e+0]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u;return}if(a===1){t[e+0]=d,t[e+1]=f,t[e+2]=p,t[e+3]=_;return}if(u!==_||l!==d||c!==f||h!==p){let g=1-a;const m=l*d+c*f+h*p+u*_,y=m>=0?1:-1,v=1-m*m;if(v>Number.EPSILON){const C=Math.sqrt(v),A=Math.atan2(C,m*y);g=Math.sin(g*A)/C,a=Math.sin(a*A)/C}const x=a*y;if(l=l*g+d*x,c=c*g+f*x,h=h*g+p*x,u=u*g+_*x,g===1-a){const C=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=C,c*=C,h*=C,u*=C}}t[e]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u}static multiplyQuaternionsFlat(t,e,i,n,s,o){const a=i[n],l=i[n+1],c=i[n+2],h=i[n+3],u=s[o],d=s[o+1],f=s[o+2],p=s[o+3];return t[e]=a*p+h*u+l*f-c*d,t[e+1]=l*p+h*d+c*u-a*f,t[e+2]=c*p+h*f+a*d-l*u,t[e+3]=h*p-a*u-l*d-c*f,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,i,n){return this._x=t,this._y=e,this._z=i,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const i=t._x,n=t._y,s=t._z,o=t._order,a=Math.cos,l=Math.sin,c=a(i/2),h=a(n/2),u=a(s/2),d=l(i/2),f=l(n/2),p=l(s/2);switch(o){case"XYZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"YXZ":this._x=d*h*u+c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"ZXY":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u-d*f*p;break;case"ZYX":this._x=d*h*u-c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u+d*f*p;break;case"YZX":this._x=d*h*u+c*f*p,this._y=c*f*u+d*h*p,this._z=c*h*p-d*f*u,this._w=c*h*u-d*f*p;break;case"XZY":this._x=d*h*u-c*f*p,this._y=c*f*u-d*h*p,this._z=c*h*p+d*f*u,this._w=c*h*u+d*f*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const i=e/2,n=Math.sin(i);return this._x=t.x*n,this._y=t.y*n,this._z=t.z*n,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,i=e[0],n=e[4],s=e[8],o=e[1],a=e[5],l=e[9],c=e[2],h=e[6],u=e[10],d=i+a+u;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(h-l)*f,this._y=(s-c)*f,this._z=(o-n)*f}else if(i>a&&i>u){const f=2*Math.sqrt(1+i-a-u);this._w=(h-l)/f,this._x=.25*f,this._y=(n+o)/f,this._z=(s+c)/f}else if(a>u){const f=2*Math.sqrt(1+a-i-u);this._w=(s-c)/f,this._x=(n+o)/f,this._y=.25*f,this._z=(l+h)/f}else{const f=2*Math.sqrt(1+u-i-a);this._w=(o-n)/f,this._x=(s+c)/f,this._y=(l+h)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let i=t.dot(e)+1;return i<Number.EPSILON?(i=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=i):(this._x=0,this._y=-t.z,this._z=t.y,this._w=i)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=i),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(li(this.dot(t),-1,1)))}rotateTowards(t,e){const i=this.angleTo(t);if(i===0)return this;const n=Math.min(1,e/i);return this.slerp(t,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const i=t._x,n=t._y,s=t._z,o=t._w,a=e._x,l=e._y,c=e._z,h=e._w;return this._x=i*h+o*a+n*c-s*l,this._y=n*h+o*l+s*a-i*c,this._z=s*h+o*c+i*l-n*a,this._w=o*h-i*a-n*l-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const i=this._x,n=this._y,s=this._z,o=this._w;let a=o*t._w+i*t._x+n*t._y+s*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=i,this._y=n,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const f=1-e;return this._w=f*o+e*this._w,this._x=f*i+e*this._x,this._y=f*n+e*this._y,this._z=f*s+e*this._z,this.normalize(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-e)*h)/c,d=Math.sin(e*h)/c;return this._w=o*u+this._w*d,this._x=i*u+this._x*d,this._y=n*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(t,e,i){return this.copy(t).slerp(e,i)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),i=Math.random(),n=Math.sqrt(1-i),s=Math.sqrt(i);return this.set(n*Math.sin(t),n*Math.cos(t),s*Math.sin(e),s*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class z{constructor(t=0,e=0,i=0){z.prototype.isVector3=!0,this.x=t,this.y=e,this.z=i}set(t,e,i){return i===void 0&&(i=this.z),this.x=t,this.y=e,this.z=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(f_.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(f_.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,i=this.y,n=this.z,s=t.elements;return this.x=s[0]*e+s[3]*i+s[6]*n,this.y=s[1]*e+s[4]*i+s[7]*n,this.z=s[2]*e+s[5]*i+s[8]*n,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,i=this.y,n=this.z,s=t.elements,o=1/(s[3]*e+s[7]*i+s[11]*n+s[15]);return this.x=(s[0]*e+s[4]*i+s[8]*n+s[12])*o,this.y=(s[1]*e+s[5]*i+s[9]*n+s[13])*o,this.z=(s[2]*e+s[6]*i+s[10]*n+s[14])*o,this}applyQuaternion(t){const e=this.x,i=this.y,n=this.z,s=t.x,o=t.y,a=t.z,l=t.w,c=2*(o*n-a*i),h=2*(a*e-s*n),u=2*(s*i-o*e);return this.x=e+l*c+o*u-a*h,this.y=i+l*h+a*c-s*u,this.z=n+l*u+s*h-o*c,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,i=this.y,n=this.z,s=t.elements;return this.x=s[0]*e+s[4]*i+s[8]*n,this.y=s[1]*e+s[5]*i+s[9]*n,this.z=s[2]*e+s[6]*i+s[10]*n,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const i=t.x,n=t.y,s=t.z,o=e.x,a=e.y,l=e.z;return this.x=n*l-s*a,this.y=s*o-i*l,this.z=i*a-n*o,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const i=t.dot(this)/e;return this.copy(t).multiplyScalar(i)}projectOnPlane(t){return $u.copy(this).projectOnVector(t),this.sub($u)}reflect(t){return this.sub($u.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(li(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y,n=this.z-t.z;return e*e+i*i+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,i){const n=Math.sin(e)*t;return this.x=n*Math.sin(i),this.y=Math.cos(e)*t,this.z=n*Math.cos(i),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),n=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=n,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,i=Math.sqrt(1-e*e);return this.x=i*Math.cos(t),this.y=e,this.z=i*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const $u=new z,f_=new Rl;class Cl{constructor(t=new z(1/0,1/0,1/0),e=new z(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e+=3)this.expandByPoint(hn.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,i=t.count;e<i;e++)this.expandByPoint(hn.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=hn.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const i=t.geometry;if(i!==void 0){const s=i.getAttribute("position");if(e===!0&&s!==void 0&&t.isInstancedMesh!==!0)for(let o=0,a=s.count;o<a;o++)t.isMesh===!0?t.getVertexPosition(o,hn):hn.fromBufferAttribute(s,o),hn.applyMatrix4(t.matrixWorld),this.expandByPoint(hn);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),dc.copy(t.boundingBox)):(i.boundingBox===null&&i.computeBoundingBox(),dc.copy(i.boundingBox)),dc.applyMatrix4(t.matrixWorld),this.union(dc)}const n=t.children;for(let s=0,o=n.length;s<o;s++)this.expandByObject(n[s],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,hn),hn.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Fa),fc.subVectors(this.max,Fa),_o.subVectors(t.a,Fa),xo.subVectors(t.b,Fa),yo.subVectors(t.c,Fa),Is.subVectors(xo,_o),Bs.subVectors(yo,xo),xr.subVectors(_o,yo);let e=[0,-Is.z,Is.y,0,-Bs.z,Bs.y,0,-xr.z,xr.y,Is.z,0,-Is.x,Bs.z,0,-Bs.x,xr.z,0,-xr.x,-Is.y,Is.x,0,-Bs.y,Bs.x,0,-xr.y,xr.x,0];return!Xu(e,_o,xo,yo,fc)||(e=[1,0,0,0,1,0,0,0,1],!Xu(e,_o,xo,yo,fc))?!1:(pc.crossVectors(Is,Bs),e=[pc.x,pc.y,pc.z],Xu(e,_o,xo,yo,fc))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,hn).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(hn).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(qn[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),qn[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),qn[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),qn[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),qn[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),qn[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),qn[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),qn[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(qn),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const qn=[new z,new z,new z,new z,new z,new z,new z,new z],hn=new z,dc=new Cl,_o=new z,xo=new z,yo=new z,Is=new z,Bs=new z,xr=new z,Fa=new z,fc=new z,pc=new z,yr=new z;function Xu(r,t,e,i,n){for(let s=0,o=r.length-3;s<=o;s+=3){yr.fromArray(r,s);const a=n.x*Math.abs(yr.x)+n.y*Math.abs(yr.y)+n.z*Math.abs(yr.z),l=t.dot(yr),c=e.dot(yr),h=i.dot(yr);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>a)return!1}return!0}const bR=new Cl,Ua=new z,qu=new z;class jp{constructor(t=new z,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const i=this.center;e!==void 0?i.copy(e):bR.setFromPoints(t).getCenter(i);let n=0;for(let s=0,o=t.length;s<o;s++)n=Math.max(n,i.distanceToSquared(t[s]));return this.radius=Math.sqrt(n),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const i=this.center.distanceToSquared(t);return e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;Ua.subVectors(t,this.center);const e=Ua.lengthSq();if(e>this.radius*this.radius){const i=Math.sqrt(e),n=(i-this.radius)*.5;this.center.addScaledVector(Ua,n/i),this.radius+=n}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(qu.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(Ua.copy(t.center).add(qu)),this.expandByPoint(Ua.copy(t.center).sub(qu))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const Yn=new z,Yu=new z,mc=new z,Os=new z,ju=new z,gc=new z,Ku=new z;class ER{constructor(t=new z,e=new z(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Yn)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,i)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Yn.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Yn.copy(this.origin).addScaledVector(this.direction,e),Yn.distanceToSquared(t))}distanceSqToSegment(t,e,i,n){Yu.copy(t).add(e).multiplyScalar(.5),mc.copy(e).sub(t).normalize(),Os.copy(this.origin).sub(Yu);const s=t.distanceTo(e)*.5,o=-this.direction.dot(mc),a=Os.dot(this.direction),l=-Os.dot(mc),c=Os.lengthSq(),h=Math.abs(1-o*o);let u,d,f,p;if(h>0)if(u=o*l-a,d=o*a-l,p=s*h,u>=0)if(d>=-p)if(d<=p){const _=1/h;u*=_,d*=_,f=u*(u+o*d+2*a)+d*(o*u+d+2*l)+c}else d=s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d=-s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d<=-p?(u=Math.max(0,-(-o*s+a)),d=u>0?-s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c):d<=p?(u=0,d=Math.min(Math.max(-s,-l),s),f=d*(d+2*l)+c):(u=Math.max(0,-(o*s+a)),d=u>0?s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c);else d=o>0?-s:s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;return i&&i.copy(this.origin).addScaledVector(this.direction,u),n&&n.copy(Yu).addScaledVector(mc,d),f}intersectSphere(t,e){Yn.subVectors(t.center,this.origin);const i=Yn.dot(this.direction),n=Yn.dot(Yn)-i*i,s=t.radius*t.radius;if(n>s)return null;const o=Math.sqrt(s-n),a=i-o,l=i+o;return l<0?null:a<0?this.at(l,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null}intersectPlane(t,e){const i=this.distanceToPlane(t);return i===null?null:this.at(i,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let i,n,s,o,a,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,d=this.origin;return c>=0?(i=(t.min.x-d.x)*c,n=(t.max.x-d.x)*c):(i=(t.max.x-d.x)*c,n=(t.min.x-d.x)*c),h>=0?(s=(t.min.y-d.y)*h,o=(t.max.y-d.y)*h):(s=(t.max.y-d.y)*h,o=(t.min.y-d.y)*h),i>o||s>n||((s>i||isNaN(i))&&(i=s),(o<n||isNaN(n))&&(n=o),u>=0?(a=(t.min.z-d.z)*u,l=(t.max.z-d.z)*u):(a=(t.max.z-d.z)*u,l=(t.min.z-d.z)*u),i>l||a>n)||((a>i||i!==i)&&(i=a),(l<n||n!==n)&&(n=l),n<0)?null:this.at(i>=0?i:n,e)}intersectsBox(t){return this.intersectBox(t,Yn)!==null}intersectTriangle(t,e,i,n,s){ju.subVectors(e,t),gc.subVectors(i,t),Ku.crossVectors(ju,gc);let o=this.direction.dot(Ku),a;if(o>0){if(n)return null;a=1}else if(o<0)a=-1,o=-o;else return null;Os.subVectors(this.origin,t);const l=a*this.direction.dot(gc.crossVectors(Os,gc));if(l<0)return null;const c=a*this.direction.dot(ju.cross(Os));if(c<0||l+c>o)return null;const h=-a*Os.dot(Ku);return h<0?null:this.at(h/o,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class De{constructor(t,e,i,n,s,o,a,l,c,h,u,d,f,p,_,g){De.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,i,n,s,o,a,l,c,h,u,d,f,p,_,g)}set(t,e,i,n,s,o,a,l,c,h,u,d,f,p,_,g){const m=this.elements;return m[0]=t,m[4]=e,m[8]=i,m[12]=n,m[1]=s,m[5]=o,m[9]=a,m[13]=l,m[2]=c,m[6]=h,m[10]=u,m[14]=d,m[3]=f,m[7]=p,m[11]=_,m[15]=g,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new De().fromArray(this.elements)}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this}copyPosition(t){const e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,i=t.elements,n=1/vo.setFromMatrixColumn(t,0).length(),s=1/vo.setFromMatrixColumn(t,1).length(),o=1/vo.setFromMatrixColumn(t,2).length();return e[0]=i[0]*n,e[1]=i[1]*n,e[2]=i[2]*n,e[3]=0,e[4]=i[4]*s,e[5]=i[5]*s,e[6]=i[6]*s,e[7]=0,e[8]=i[8]*o,e[9]=i[9]*o,e[10]=i[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,i=t.x,n=t.y,s=t.z,o=Math.cos(i),a=Math.sin(i),l=Math.cos(n),c=Math.sin(n),h=Math.cos(s),u=Math.sin(s);if(t.order==="XYZ"){const d=o*h,f=o*u,p=a*h,_=a*u;e[0]=l*h,e[4]=-l*u,e[8]=c,e[1]=f+p*c,e[5]=d-_*c,e[9]=-a*l,e[2]=_-d*c,e[6]=p+f*c,e[10]=o*l}else if(t.order==="YXZ"){const d=l*h,f=l*u,p=c*h,_=c*u;e[0]=d+_*a,e[4]=p*a-f,e[8]=o*c,e[1]=o*u,e[5]=o*h,e[9]=-a,e[2]=f*a-p,e[6]=_+d*a,e[10]=o*l}else if(t.order==="ZXY"){const d=l*h,f=l*u,p=c*h,_=c*u;e[0]=d-_*a,e[4]=-o*u,e[8]=p+f*a,e[1]=f+p*a,e[5]=o*h,e[9]=_-d*a,e[2]=-o*c,e[6]=a,e[10]=o*l}else if(t.order==="ZYX"){const d=o*h,f=o*u,p=a*h,_=a*u;e[0]=l*h,e[4]=p*c-f,e[8]=d*c+_,e[1]=l*u,e[5]=_*c+d,e[9]=f*c-p,e[2]=-c,e[6]=a*l,e[10]=o*l}else if(t.order==="YZX"){const d=o*l,f=o*c,p=a*l,_=a*c;e[0]=l*h,e[4]=_-d*u,e[8]=p*u+f,e[1]=u,e[5]=o*h,e[9]=-a*h,e[2]=-c*h,e[6]=f*u+p,e[10]=d-_*u}else if(t.order==="XZY"){const d=o*l,f=o*c,p=a*l,_=a*c;e[0]=l*h,e[4]=-u,e[8]=c*h,e[1]=d*u+_,e[5]=o*h,e[9]=f*u-p,e[2]=p*u-f,e[6]=a*h,e[10]=_*u+d}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(AR,t,wR)}lookAt(t,e,i){const n=this.elements;return ki.subVectors(t,e),ki.lengthSq()===0&&(ki.z=1),ki.normalize(),zs.crossVectors(i,ki),zs.lengthSq()===0&&(Math.abs(i.z)===1?ki.x+=1e-4:ki.z+=1e-4,ki.normalize(),zs.crossVectors(i,ki)),zs.normalize(),_c.crossVectors(ki,zs),n[0]=zs.x,n[4]=_c.x,n[8]=ki.x,n[1]=zs.y,n[5]=_c.y,n[9]=ki.y,n[2]=zs.z,n[6]=_c.z,n[10]=ki.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,n=e.elements,s=this.elements,o=i[0],a=i[4],l=i[8],c=i[12],h=i[1],u=i[5],d=i[9],f=i[13],p=i[2],_=i[6],g=i[10],m=i[14],y=i[3],v=i[7],x=i[11],C=i[15],A=n[0],E=n[4],w=n[8],T=n[12],S=n[1],N=n[5],G=n[9],B=n[13],V=n[2],Q=n[6],q=n[10],rt=n[14],$=n[3],ot=n[7],dt=n[11],Tt=n[15];return s[0]=o*A+a*S+l*V+c*$,s[4]=o*E+a*N+l*Q+c*ot,s[8]=o*w+a*G+l*q+c*dt,s[12]=o*T+a*B+l*rt+c*Tt,s[1]=h*A+u*S+d*V+f*$,s[5]=h*E+u*N+d*Q+f*ot,s[9]=h*w+u*G+d*q+f*dt,s[13]=h*T+u*B+d*rt+f*Tt,s[2]=p*A+_*S+g*V+m*$,s[6]=p*E+_*N+g*Q+m*ot,s[10]=p*w+_*G+g*q+m*dt,s[14]=p*T+_*B+g*rt+m*Tt,s[3]=y*A+v*S+x*V+C*$,s[7]=y*E+v*N+x*Q+C*ot,s[11]=y*w+v*G+x*q+C*dt,s[15]=y*T+v*B+x*rt+C*Tt,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[4],n=t[8],s=t[12],o=t[1],a=t[5],l=t[9],c=t[13],h=t[2],u=t[6],d=t[10],f=t[14],p=t[3],_=t[7],g=t[11],m=t[15];return p*(+s*l*u-n*c*u-s*a*d+i*c*d+n*a*f-i*l*f)+_*(+e*l*f-e*c*d+s*o*d-n*o*f+n*c*h-s*l*h)+g*(+e*c*u-e*a*f-s*o*u+i*o*f+s*a*h-i*c*h)+m*(-n*a*h-e*l*u+e*a*d+n*o*u-i*o*d+i*l*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,i){const n=this.elements;return t.isVector3?(n[12]=t.x,n[13]=t.y,n[14]=t.z):(n[12]=t,n[13]=e,n[14]=i),this}invert(){const t=this.elements,e=t[0],i=t[1],n=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=t[9],d=t[10],f=t[11],p=t[12],_=t[13],g=t[14],m=t[15],y=u*g*c-_*d*c+_*l*f-a*g*f-u*l*m+a*d*m,v=p*d*c-h*g*c-p*l*f+o*g*f+h*l*m-o*d*m,x=h*_*c-p*u*c+p*a*f-o*_*f-h*a*m+o*u*m,C=p*u*l-h*_*l-p*a*d+o*_*d+h*a*g-o*u*g,A=e*y+i*v+n*x+s*C;if(A===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const E=1/A;return t[0]=y*E,t[1]=(_*d*s-u*g*s-_*n*f+i*g*f+u*n*m-i*d*m)*E,t[2]=(a*g*s-_*l*s+_*n*c-i*g*c-a*n*m+i*l*m)*E,t[3]=(u*l*s-a*d*s-u*n*c+i*d*c+a*n*f-i*l*f)*E,t[4]=v*E,t[5]=(h*g*s-p*d*s+p*n*f-e*g*f-h*n*m+e*d*m)*E,t[6]=(p*l*s-o*g*s-p*n*c+e*g*c+o*n*m-e*l*m)*E,t[7]=(o*d*s-h*l*s+h*n*c-e*d*c-o*n*f+e*l*f)*E,t[8]=x*E,t[9]=(p*u*s-h*_*s-p*i*f+e*_*f+h*i*m-e*u*m)*E,t[10]=(o*_*s-p*a*s+p*i*c-e*_*c-o*i*m+e*a*m)*E,t[11]=(h*a*s-o*u*s-h*i*c+e*u*c+o*i*f-e*a*f)*E,t[12]=C*E,t[13]=(h*_*n-p*u*n+p*i*d-e*_*d-h*i*g+e*u*g)*E,t[14]=(p*a*n-o*_*n-p*i*l+e*_*l+o*i*g-e*a*g)*E,t[15]=(o*u*n-h*a*n+h*i*l-e*u*l-o*i*d+e*a*d)*E,this}scale(t){const e=this.elements,i=t.x,n=t.y,s=t.z;return e[0]*=i,e[4]*=n,e[8]*=s,e[1]*=i,e[5]*=n,e[9]*=s,e[2]*=i,e[6]*=n,e[10]*=s,e[3]*=i,e[7]*=n,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],n=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,n))}makeTranslation(t,e,i){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const i=Math.cos(e),n=Math.sin(e),s=1-i,o=t.x,a=t.y,l=t.z,c=s*o,h=s*a;return this.set(c*o+i,c*a-n*l,c*l+n*a,0,c*a+n*l,h*a+i,h*l-n*o,0,c*l-n*a,h*l+n*o,s*l*l+i,0,0,0,0,1),this}makeScale(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this}makeShear(t,e,i,n,s,o){return this.set(1,i,s,0,t,1,o,0,e,n,1,0,0,0,0,1),this}compose(t,e,i){const n=this.elements,s=e._x,o=e._y,a=e._z,l=e._w,c=s+s,h=o+o,u=a+a,d=s*c,f=s*h,p=s*u,_=o*h,g=o*u,m=a*u,y=l*c,v=l*h,x=l*u,C=i.x,A=i.y,E=i.z;return n[0]=(1-(_+m))*C,n[1]=(f+x)*C,n[2]=(p-v)*C,n[3]=0,n[4]=(f-x)*A,n[5]=(1-(d+m))*A,n[6]=(g+y)*A,n[7]=0,n[8]=(p+v)*E,n[9]=(g-y)*E,n[10]=(1-(d+_))*E,n[11]=0,n[12]=t.x,n[13]=t.y,n[14]=t.z,n[15]=1,this}decompose(t,e,i){const n=this.elements;let s=vo.set(n[0],n[1],n[2]).length();const o=vo.set(n[4],n[5],n[6]).length(),a=vo.set(n[8],n[9],n[10]).length();this.determinant()<0&&(s=-s),t.x=n[12],t.y=n[13],t.z=n[14],un.copy(this);const c=1/s,h=1/o,u=1/a;return un.elements[0]*=c,un.elements[1]*=c,un.elements[2]*=c,un.elements[4]*=h,un.elements[5]*=h,un.elements[6]*=h,un.elements[8]*=u,un.elements[9]*=u,un.elements[10]*=u,e.setFromRotationMatrix(un),i.x=s,i.y=o,i.z=a,this}makePerspective(t,e,i,n,s,o,a=vn){const l=this.elements,c=2*s/(e-t),h=2*s/(i-n),u=(e+t)/(e-t),d=(i+n)/(i-n);let f,p;if(a===vn)f=-(o+s)/(o-s),p=-2*o*s/(o-s);else if(a===Gr)f=-o/(o-s),p=-o*s/(o-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return l[0]=c,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=h,l[9]=d,l[13]=0,l[2]=0,l[6]=0,l[10]=f,l[14]=p,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(t,e,i,n,s,o,a=vn){const l=this.elements,c=1/(e-t),h=1/(i-n),u=1/(o-s),d=(e+t)*c,f=(i+n)*h;let p,_;if(a===vn)p=(o+s)*u,_=-2*u;else if(a===Gr)p=s*u,_=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-d,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-f,l[2]=0,l[6]=0,l[10]=_,l[14]=-p,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(t){const e=this.elements,i=t.elements;for(let n=0;n<16;n++)if(e[n]!==i[n])return!1;return!0}fromArray(t,e=0){for(let i=0;i<16;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}}const vo=new z,un=new De,AR=new z(0,0,0),wR=new z(1,1,1),zs=new z,_c=new z,ki=new z,p_=new De,m_=new Rl;class bn{constructor(t=0,e=0,i=0,n=bn.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=i,this._order=n}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,i,n=this._order){return this._x=t,this._y=e,this._z=i,this._order=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,i=!0){const n=t.elements,s=n[0],o=n[4],a=n[8],l=n[1],c=n[5],h=n[9],u=n[2],d=n[6],f=n[10];switch(e){case"XYZ":this._y=Math.asin(li(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-li(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,s),this._z=0);break;case"ZXY":this._x=Math.asin(li(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-li(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-o,c));break;case"YZX":this._z=Math.asin(li(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-li(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-h,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,i===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,i){return p_.makeRotationFromQuaternion(t),this.setFromRotationMatrix(p_,e,i)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return m_.setFromEuler(this),this.setFromQuaternion(m_,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}bn.DEFAULT_ORDER="XYZ";class RR{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let CR=0;const g_=new z,So=new Rl,jn=new De,xc=new z,Ia=new z,NR=new z,PR=new Rl,__=new z(1,0,0),x_=new z(0,1,0),y_=new z(0,0,1),v_={type:"added"},DR={type:"removed"},Mo={type:"childadded",child:null},Zu={type:"childremoved",child:null};class si extends ya{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:CR++}),this.uuid=_s(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=si.DEFAULT_UP.clone();const t=new z,e=new bn,i=new Rl,n=new z(1,1,1);function s(){i.setFromEuler(e,!1)}function o(){e.setFromQuaternion(i,void 0,!1)}e._onChange(s),i._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new De},normalMatrix:{value:new Bi}}),this.matrix=new De,this.matrixWorld=new De,this.matrixAutoUpdate=si.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=si.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new RR,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return So.setFromAxisAngle(t,e),this.quaternion.multiply(So),this}rotateOnWorldAxis(t,e){return So.setFromAxisAngle(t,e),this.quaternion.premultiply(So),this}rotateX(t){return this.rotateOnAxis(__,t)}rotateY(t){return this.rotateOnAxis(x_,t)}rotateZ(t){return this.rotateOnAxis(y_,t)}translateOnAxis(t,e){return g_.copy(t).applyQuaternion(this.quaternion),this.position.add(g_.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(__,t)}translateY(t){return this.translateOnAxis(x_,t)}translateZ(t){return this.translateOnAxis(y_,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(jn.copy(this.matrixWorld).invert())}lookAt(t,e,i){t.isVector3?xc.copy(t):xc.set(t,e,i);const n=this.parent;this.updateWorldMatrix(!0,!1),Ia.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?jn.lookAt(Ia,xc,this.up):jn.lookAt(xc,Ia,this.up),this.quaternion.setFromRotationMatrix(jn),n&&(jn.extractRotation(n.matrixWorld),So.setFromRotationMatrix(jn),this.quaternion.premultiply(So.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(v_),Mo.child=t,this.dispatchEvent(Mo),Mo.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(DR),Zu.child=t,this.dispatchEvent(Zu),Zu.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),jn.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),jn.multiply(t.parent.matrixWorld)),t.applyMatrix4(jn),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(v_),Mo.child=t,this.dispatchEvent(Mo),Mo.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let i=0,n=this.children.length;i<n;i++){const o=this.children[i].getObjectByProperty(t,e);if(o!==void 0)return o}}getObjectsByProperty(t,e,i=[]){this[t]===e&&i.push(this);const n=this.children;for(let s=0,o=n.length;s<o;s++)n[s].getObjectsByProperty(t,e,i);return i}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Ia,t,NR),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Ia,PR,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].updateMatrixWorld(t)}updateWorldMatrix(t,e){const i=this.parent;if(t===!0&&i!==null&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const n=this.children;for(let s=0,o=n.length;s<o;s++)n[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",i={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const n={};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.castShadow===!0&&(n.castShadow=!0),this.receiveShadow===!0&&(n.receiveShadow=!0),this.visible===!1&&(n.visible=!1),this.frustumCulled===!1&&(n.frustumCulled=!1),this.renderOrder!==0&&(n.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),n.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(n.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(n.type="BatchedMesh",n.perObjectFrustumCulled=this.perObjectFrustumCulled,n.sortObjects=this.sortObjects,n.drawRanges=this._drawRanges,n.reservedRanges=this._reservedRanges,n.visibility=this._visibility,n.active=this._active,n.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),n.maxInstanceCount=this._maxInstanceCount,n.maxVertexCount=this._maxVertexCount,n.maxIndexCount=this._maxIndexCount,n.geometryInitialized=this._geometryInitialized,n.geometryCount=this._geometryCount,n.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(n.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(n.boundingSphere={center:n.boundingSphere.center.toArray(),radius:n.boundingSphere.radius}),this.boundingBox!==null&&(n.boundingBox={min:n.boundingBox.min.toArray(),max:n.boundingBox.max.toArray()}));function s(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?n.background=this.background.toJSON():this.background.isTexture&&(n.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(n.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){n.geometry=s(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];s(t.shapes,u)}else s(t.shapes,l)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++)a.push(s(t.materials,this.material[l]));n.material=a}else n.material=s(t.materials,this.material);if(this.children.length>0){n.children=[];for(let a=0;a<this.children.length;a++)n.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){n.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];n.animations.push(s(t.animations,l))}}if(e){const a=o(t.geometries),l=o(t.materials),c=o(t.textures),h=o(t.images),u=o(t.shapes),d=o(t.skeletons),f=o(t.animations),p=o(t.nodes);a.length>0&&(i.geometries=a),l.length>0&&(i.materials=l),c.length>0&&(i.textures=c),h.length>0&&(i.images=h),u.length>0&&(i.shapes=u),d.length>0&&(i.skeletons=d),f.length>0&&(i.animations=f),p.length>0&&(i.nodes=p)}return i.object=n,i;function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let i=0;i<t.children.length;i++){const n=t.children[i];this.add(n.clone())}return this}}si.DEFAULT_UP=new z(0,1,0);si.DEFAULT_MATRIX_AUTO_UPDATE=!0;si.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const dn=new z,Kn=new z,Qu=new z,Zn=new z,To=new z,bo=new z,S_=new z,Ju=new z,td=new z,ed=new z,id=new _e,nd=new _e,sd=new _e;class xn{constructor(t=new z,e=new z,i=new z){this.a=t,this.b=e,this.c=i}static getNormal(t,e,i,n){n.subVectors(i,e),dn.subVectors(t,e),n.cross(dn);const s=n.lengthSq();return s>0?n.multiplyScalar(1/Math.sqrt(s)):n.set(0,0,0)}static getBarycoord(t,e,i,n,s){dn.subVectors(n,e),Kn.subVectors(i,e),Qu.subVectors(t,e);const o=dn.dot(dn),a=dn.dot(Kn),l=dn.dot(Qu),c=Kn.dot(Kn),h=Kn.dot(Qu),u=o*c-a*a;if(u===0)return s.set(0,0,0),null;const d=1/u,f=(c*l-a*h)*d,p=(o*h-a*l)*d;return s.set(1-f-p,p,f)}static containsPoint(t,e,i,n){return this.getBarycoord(t,e,i,n,Zn)===null?!1:Zn.x>=0&&Zn.y>=0&&Zn.x+Zn.y<=1}static getInterpolation(t,e,i,n,s,o,a,l){return this.getBarycoord(t,e,i,n,Zn)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(s,Zn.x),l.addScaledVector(o,Zn.y),l.addScaledVector(a,Zn.z),l)}static getInterpolatedAttribute(t,e,i,n,s,o){return id.setScalar(0),nd.setScalar(0),sd.setScalar(0),id.fromBufferAttribute(t,e),nd.fromBufferAttribute(t,i),sd.fromBufferAttribute(t,n),o.setScalar(0),o.addScaledVector(id,s.x),o.addScaledVector(nd,s.y),o.addScaledVector(sd,s.z),o}static isFrontFacing(t,e,i,n){return dn.subVectors(i,e),Kn.subVectors(t,e),dn.cross(Kn).dot(n)<0}set(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this}setFromPointsAndIndices(t,e,i,n){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[n]),this}setFromAttributeAndIndices(t,e,i,n){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,i),this.c.fromBufferAttribute(t,n),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return dn.subVectors(this.c,this.b),Kn.subVectors(this.a,this.b),dn.cross(Kn).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return xn.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return xn.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,i,n,s){return xn.getInterpolation(t,this.a,this.b,this.c,e,i,n,s)}containsPoint(t){return xn.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return xn.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const i=this.a,n=this.b,s=this.c;let o,a;To.subVectors(n,i),bo.subVectors(s,i),Ju.subVectors(t,i);const l=To.dot(Ju),c=bo.dot(Ju);if(l<=0&&c<=0)return e.copy(i);td.subVectors(t,n);const h=To.dot(td),u=bo.dot(td);if(h>=0&&u<=h)return e.copy(n);const d=l*u-h*c;if(d<=0&&l>=0&&h<=0)return o=l/(l-h),e.copy(i).addScaledVector(To,o);ed.subVectors(t,s);const f=To.dot(ed),p=bo.dot(ed);if(p>=0&&f<=p)return e.copy(s);const _=f*c-l*p;if(_<=0&&c>=0&&p<=0)return a=c/(c-p),e.copy(i).addScaledVector(bo,a);const g=h*p-f*u;if(g<=0&&u-h>=0&&f-p>=0)return S_.subVectors(s,n),a=(u-h)/(u-h+(f-p)),e.copy(n).addScaledVector(S_,a);const m=1/(g+_+d);return o=_*m,a=d*m,e.copy(i).addScaledVector(To,o).addScaledVector(bo,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const Ty={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Gs={h:0,s:0,l:0},yc={h:0,s:0,l:0};function rd(r,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?r+(t-r)*6*e:e<1/2?t:e<2/3?r+(t-r)*6*(2/3-e):r}class xe{constructor(t,e,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,i)}set(t,e,i){if(e===void 0&&i===void 0){const n=t;n&&n.isColor?this.copy(n):typeof n=="number"?this.setHex(n):typeof n=="string"&&this.setStyle(n)}else this.setRGB(t,e,i);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=Lt){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,We.toWorkingColorSpace(this,e),this}setRGB(t,e,i,n=We.workingColorSpace){return this.r=t,this.g=e,this.b=i,We.toWorkingColorSpace(this,n),this}setHSL(t,e,i,n=We.workingColorSpace){if(t=Yp(t,1),e=li(e,0,1),i=li(i,0,1),e===0)this.r=this.g=this.b=i;else{const s=i<=.5?i*(1+e):i+e-i*e,o=2*i-s;this.r=rd(o,s,t+1/3),this.g=rd(o,s,t),this.b=rd(o,s,t-1/3)}return We.toWorkingColorSpace(this,n),this}setStyle(t,e=Lt){function i(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let n;if(n=/^(\w+)\(([^\)]*)\)/.exec(t)){let s;const o=n[1],a=n[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return i(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,e);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return i(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,e);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return i(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(t)){const s=n[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,e);if(o===6)return this.setHex(parseInt(s,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=Lt){const i=Ty[t.toLowerCase()];return i!==void 0?this.setHex(i,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=xs(t.r),this.g=xs(t.g),this.b=xs(t.b),this}copyLinearToSRGB(t){return this.r=Qo(t.r),this.g=Qo(t.g),this.b=Qo(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Lt){return We.fromWorkingColorSpace(_i.copy(this),t),Math.round(li(_i.r*255,0,255))*65536+Math.round(li(_i.g*255,0,255))*256+Math.round(li(_i.b*255,0,255))}getHexString(t=Lt){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=We.workingColorSpace){We.fromWorkingColorSpace(_i.copy(this),e);const i=_i.r,n=_i.g,s=_i.b,o=Math.max(i,n,s),a=Math.min(i,n,s);let l,c;const h=(a+o)/2;if(a===o)l=0,c=0;else{const u=o-a;switch(c=h<=.5?u/(o+a):u/(2-o-a),o){case i:l=(n-s)/u+(n<s?6:0);break;case n:l=(s-i)/u+2;break;case s:l=(i-n)/u+4;break}l/=6}return t.h=l,t.s=c,t.l=h,t}getRGB(t,e=We.workingColorSpace){return We.fromWorkingColorSpace(_i.copy(this),e),t.r=_i.r,t.g=_i.g,t.b=_i.b,t}getStyle(t=Lt){We.fromWorkingColorSpace(_i.copy(this),t);const e=_i.r,i=_i.g,n=_i.b;return t!==Lt?`color(${t} ${e.toFixed(3)} ${i.toFixed(3)} ${n.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(i*255)},${Math.round(n*255)})`}offsetHSL(t,e,i){return this.getHSL(Gs),this.setHSL(Gs.h+t,Gs.s+e,Gs.l+i)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,i){return this.r=t.r+(e.r-t.r)*i,this.g=t.g+(e.g-t.g)*i,this.b=t.b+(e.b-t.b)*i,this}lerpHSL(t,e){this.getHSL(Gs),t.getHSL(yc);const i=rl(Gs.h,yc.h,e),n=rl(Gs.s,yc.s,e),s=rl(Gs.l,yc.l,e);return this.setHSL(i,n,s),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,i=this.g,n=this.b,s=t.elements;return this.r=s[0]*e+s[3]*i+s[6]*n,this.g=s[1]*e+s[4]*i+s[7]*n,this.b=s[2]*e+s[5]*i+s[8]*n,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const _i=new xe;xe.NAMES=Ty;let LR=0;class Ii extends ya{static get type(){return"Material"}get type(){return this.constructor.type}set type(t){}constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:LR++}),this.uuid=_s(),this.name="",this.blending=Js,this.side=la,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=yh,this.blendDst=vh,this.blendEquation=Ys,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new xe(0,0,0),this.blendAlpha=0,this.depthFunc=Sh,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=rp,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=br,this.stencilZFail=br,this.stencilZPass=br,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const i=t[e];if(i===void 0){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const n=this[e];if(n===void 0){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}n&&n.isColor?n.set(i):n&&n.isVector3&&i&&i.isVector3?n.copy(i):this[e]=i}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const i={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),this.roughness!==void 0&&(i.roughness=this.roughness),this.metalness!==void 0&&(i.metalness=this.metalness),this.sheen!==void 0&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(i.shininess=this.shininess),this.clearcoat!==void 0&&(i.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(i.dispersion=this.dispersion),this.iridescence!==void 0&&(i.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(i.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(i.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(i.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(i.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(i.combine=this.combine)),this.envMapRotation!==void 0&&(i.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(i.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(i.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(i.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(i.size=this.size),this.shadowSide!==null&&(i.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==Js&&(i.blending=this.blending),this.side!==la&&(i.side=this.side),this.vertexColors===!0&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),this.transparent===!0&&(i.transparent=!0),this.blendSrc!==yh&&(i.blendSrc=this.blendSrc),this.blendDst!==vh&&(i.blendDst=this.blendDst),this.blendEquation!==Ys&&(i.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(i.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(i.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(i.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(i.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(i.blendAlpha=this.blendAlpha),this.depthFunc!==Sh&&(i.depthFunc=this.depthFunc),this.depthTest===!1&&(i.depthTest=this.depthTest),this.depthWrite===!1&&(i.depthWrite=this.depthWrite),this.colorWrite===!1&&(i.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(i.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==rp&&(i.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(i.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(i.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==br&&(i.stencilFail=this.stencilFail),this.stencilZFail!==br&&(i.stencilZFail=this.stencilZFail),this.stencilZPass!==br&&(i.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(i.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(i.rotation=this.rotation),this.polygonOffset===!0&&(i.polygonOffset=!0),this.polygonOffsetFactor!==0&&(i.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(i.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(i.linewidth=this.linewidth),this.dashSize!==void 0&&(i.dashSize=this.dashSize),this.gapSize!==void 0&&(i.gapSize=this.gapSize),this.scale!==void 0&&(i.scale=this.scale),this.dithering===!0&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),this.alphaHash===!0&&(i.alphaHash=!0),this.alphaToCoverage===!0&&(i.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(i.premultipliedAlpha=!0),this.forceSinglePass===!0&&(i.forceSinglePass=!0),this.wireframe===!0&&(i.wireframe=!0),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(i.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(i.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(i.flatShading=!0),this.visible===!1&&(i.visible=!1),this.toneMapped===!1&&(i.toneMapped=!1),this.fog===!1&&(i.fog=!1),Object.keys(this.userData).length>0&&(i.userData=this.userData);function n(s){const o=[];for(const a in s){const l=s[a];delete l.metadata,o.push(l)}return o}if(e){const s=n(t.textures),o=n(t.images);s.length>0&&(i.textures=s),o.length>0&&(i.images=o)}return i}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let i=null;if(e!==null){const n=e.length;i=new Array(n);for(let s=0;s!==n;++s)i[s]=e[s].clone()}return this.clippingPlanes=i,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class Wh extends Ii{static get type(){return"MeshBasicMaterial"}constructor(t){super(),this.isMeshBasicMaterial=!0,this.color=new xe(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new bn,this.combine=Hh,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const as=FR();function FR(){const r=new ArrayBuffer(4),t=new Float32Array(r),e=new Uint32Array(r),i=new Uint32Array(512),n=new Uint32Array(512);for(let l=0;l<256;++l){const c=l-127;c<-27?(i[l]=0,i[l|256]=32768,n[l]=24,n[l|256]=24):c<-14?(i[l]=1024>>-c-14,i[l|256]=1024>>-c-14|32768,n[l]=-c-1,n[l|256]=-c-1):c<=15?(i[l]=c+15<<10,i[l|256]=c+15<<10|32768,n[l]=13,n[l|256]=13):c<128?(i[l]=31744,i[l|256]=64512,n[l]=24,n[l|256]=24):(i[l]=31744,i[l|256]=64512,n[l]=13,n[l|256]=13)}const s=new Uint32Array(2048),o=new Uint32Array(64),a=new Uint32Array(64);for(let l=1;l<1024;++l){let c=l<<13,h=0;for(;!(c&8388608);)c<<=1,h-=8388608;c&=-8388609,h+=947912704,s[l]=c|h}for(let l=1024;l<2048;++l)s[l]=939524096+(l-1024<<13);for(let l=1;l<31;++l)o[l]=l<<23;o[31]=1199570944,o[32]=2147483648;for(let l=33;l<63;++l)o[l]=2147483648+(l-32<<23);o[63]=3347054592;for(let l=1;l<64;++l)l!==32&&(a[l]=1024);return{floatView:t,uint32View:e,baseTable:i,shiftTable:n,mantissaTable:s,exponentTable:o,offsetTable:a}}function Vi(r){Math.abs(r)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),r=li(r,-65504,65504),as.floatView[0]=r;const t=as.uint32View[0],e=t>>23&511;return as.baseTable[e]+((t&8388607)>>as.shiftTable[e])}function vc(r){const t=r>>10;return as.uint32View[0]=as.mantissaTable[as.offsetTable[t]+(r&1023)]+as.exponentTable[t],as.floatView[0]}const Ve=new z,Sc=new oe;class en{constructor(t,e,i=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=i,this.usage=bh,this.updateRanges=[],this.gpuType=qi,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,i){t*=this.itemSize,i*=e.itemSize;for(let n=0,s=this.itemSize;n<s;n++)this.array[t+n]=e.array[i+n];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,i=this.count;e<i;e++)Sc.fromBufferAttribute(this,e),Sc.applyMatrix3(t),this.setXY(e,Sc.x,Sc.y);else if(this.itemSize===3)for(let e=0,i=this.count;e<i;e++)Ve.fromBufferAttribute(this,e),Ve.applyMatrix3(t),this.setXYZ(e,Ve.x,Ve.y,Ve.z);return this}applyMatrix4(t){for(let e=0,i=this.count;e<i;e++)Ve.fromBufferAttribute(this,e),Ve.applyMatrix4(t),this.setXYZ(e,Ve.x,Ve.y,Ve.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)Ve.fromBufferAttribute(this,e),Ve.applyNormalMatrix(t),this.setXYZ(e,Ve.x,Ve.y,Ve.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)Ve.fromBufferAttribute(this,e),Ve.transformDirection(t),this.setXYZ(e,Ve.x,Ve.y,Ve.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let i=this.array[t*this.itemSize+e];return this.normalized&&(i=bi(i,this.array)),i}setComponent(t,e,i){return this.normalized&&(i=$t(i,this.array)),this.array[t*this.itemSize+e]=i,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=bi(e,this.array)),e}setX(t,e){return this.normalized&&(e=$t(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=bi(e,this.array)),e}setY(t,e){return this.normalized&&(e=$t(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=bi(e,this.array)),e}setZ(t,e){return this.normalized&&(e=$t(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=bi(e,this.array)),e}setW(t,e){return this.normalized&&(e=$t(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,i){return t*=this.itemSize,this.normalized&&(e=$t(e,this.array),i=$t(i,this.array)),this.array[t+0]=e,this.array[t+1]=i,this}setXYZ(t,e,i,n){return t*=this.itemSize,this.normalized&&(e=$t(e,this.array),i=$t(i,this.array),n=$t(n,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this}setXYZW(t,e,i,n,s){return t*=this.itemSize,this.normalized&&(e=$t(e,this.array),i=$t(i,this.array),n=$t(n,this.array),s=$t(s,this.array)),this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=n,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==bh&&(t.usage=this.usage),t}}class by extends en{constructor(t,e,i){super(new Uint16Array(t),e,i)}}class Ey extends en{constructor(t,e,i){super(new Uint32Array(t),e,i)}}class Ay extends en{constructor(t,e,i){super(new Uint16Array(t),e,i),this.isFloat16BufferAttribute=!0}getX(t){let e=vc(this.array[t*this.itemSize]);return this.normalized&&(e=bi(e,this.array)),e}setX(t,e){return this.normalized&&(e=$t(e,this.array)),this.array[t*this.itemSize]=Vi(e),this}getY(t){let e=vc(this.array[t*this.itemSize+1]);return this.normalized&&(e=bi(e,this.array)),e}setY(t,e){return this.normalized&&(e=$t(e,this.array)),this.array[t*this.itemSize+1]=Vi(e),this}getZ(t){let e=vc(this.array[t*this.itemSize+2]);return this.normalized&&(e=bi(e,this.array)),e}setZ(t,e){return this.normalized&&(e=$t(e,this.array)),this.array[t*this.itemSize+2]=Vi(e),this}getW(t){let e=vc(this.array[t*this.itemSize+3]);return this.normalized&&(e=bi(e,this.array)),e}setW(t,e){return this.normalized&&(e=$t(e,this.array)),this.array[t*this.itemSize+3]=Vi(e),this}setXY(t,e,i){return t*=this.itemSize,this.normalized&&(e=$t(e,this.array),i=$t(i,this.array)),this.array[t+0]=Vi(e),this.array[t+1]=Vi(i),this}setXYZ(t,e,i,n){return t*=this.itemSize,this.normalized&&(e=$t(e,this.array),i=$t(i,this.array),n=$t(n,this.array)),this.array[t+0]=Vi(e),this.array[t+1]=Vi(i),this.array[t+2]=Vi(n),this}setXYZW(t,e,i,n,s){return t*=this.itemSize,this.normalized&&(e=$t(e,this.array),i=$t(i,this.array),n=$t(n,this.array),s=$t(s,this.array)),this.array[t+0]=Vi(e),this.array[t+1]=Vi(i),this.array[t+2]=Vi(n),this.array[t+3]=Vi(s),this}}class ys extends en{constructor(t,e,i){super(new Float32Array(t),e,i)}}let UR=0;const Qi=new De,od=new si,Eo=new z,Hi=new Cl,Ba=new Cl,ii=new z;class Xr extends ya{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:UR++}),this.uuid=_s(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(gR(t)?Ey:by)(t,1):this.index=t,this}setIndirect(t){return this.indirect=t,this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,i=0){this.groups.push({start:t,count:e,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const i=this.attributes.normal;if(i!==void 0){const s=new Bi().getNormalMatrix(t);i.applyNormalMatrix(s),i.needsUpdate=!0}const n=this.attributes.tangent;return n!==void 0&&(n.transformDirection(t),n.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return Qi.makeRotationFromQuaternion(t),this.applyMatrix4(Qi),this}rotateX(t){return Qi.makeRotationX(t),this.applyMatrix4(Qi),this}rotateY(t){return Qi.makeRotationY(t),this.applyMatrix4(Qi),this}rotateZ(t){return Qi.makeRotationZ(t),this.applyMatrix4(Qi),this}translate(t,e,i){return Qi.makeTranslation(t,e,i),this.applyMatrix4(Qi),this}scale(t,e,i){return Qi.makeScale(t,e,i),this.applyMatrix4(Qi),this}lookAt(t){return od.lookAt(t),od.updateMatrix(),this.applyMatrix4(od.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Eo).negate(),this.translate(Eo.x,Eo.y,Eo.z),this}setFromPoints(t){const e=this.getAttribute("position");if(e===void 0){const i=[];for(let n=0,s=t.length;n<s;n++){const o=t[n];i.push(o.x,o.y,o.z||0)}this.setAttribute("position",new ys(i,3))}else{for(let i=0,n=e.count;i<n;i++){const s=t[i];e.setXYZ(i,s.x,s.y,s.z||0)}t.length>e.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),e.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Cl);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new z(-1/0,-1/0,-1/0),new z(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let i=0,n=e.length;i<n;i++){const s=e[i];Hi.setFromBufferAttribute(s),this.morphTargetsRelative?(ii.addVectors(this.boundingBox.min,Hi.min),this.boundingBox.expandByPoint(ii),ii.addVectors(this.boundingBox.max,Hi.max),this.boundingBox.expandByPoint(ii)):(this.boundingBox.expandByPoint(Hi.min),this.boundingBox.expandByPoint(Hi.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new jp);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new z,1/0);return}if(t){const i=this.boundingSphere.center;if(Hi.setFromBufferAttribute(t),e)for(let s=0,o=e.length;s<o;s++){const a=e[s];Ba.setFromBufferAttribute(a),this.morphTargetsRelative?(ii.addVectors(Hi.min,Ba.min),Hi.expandByPoint(ii),ii.addVectors(Hi.max,Ba.max),Hi.expandByPoint(ii)):(Hi.expandByPoint(Ba.min),Hi.expandByPoint(Ba.max))}Hi.getCenter(i);let n=0;for(let s=0,o=t.count;s<o;s++)ii.fromBufferAttribute(t,s),n=Math.max(n,i.distanceToSquared(ii));if(e)for(let s=0,o=e.length;s<o;s++){const a=e[s],l=this.morphTargetsRelative;for(let c=0,h=a.count;c<h;c++)ii.fromBufferAttribute(a,c),l&&(Eo.fromBufferAttribute(t,c),ii.add(Eo)),n=Math.max(n,i.distanceToSquared(ii))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const i=e.position,n=e.normal,s=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new en(new Float32Array(4*i.count),4));const o=this.getAttribute("tangent"),a=[],l=[];for(let w=0;w<i.count;w++)a[w]=new z,l[w]=new z;const c=new z,h=new z,u=new z,d=new oe,f=new oe,p=new oe,_=new z,g=new z;function m(w,T,S){c.fromBufferAttribute(i,w),h.fromBufferAttribute(i,T),u.fromBufferAttribute(i,S),d.fromBufferAttribute(s,w),f.fromBufferAttribute(s,T),p.fromBufferAttribute(s,S),h.sub(c),u.sub(c),f.sub(d),p.sub(d);const N=1/(f.x*p.y-p.x*f.y);isFinite(N)&&(_.copy(h).multiplyScalar(p.y).addScaledVector(u,-f.y).multiplyScalar(N),g.copy(u).multiplyScalar(f.x).addScaledVector(h,-p.x).multiplyScalar(N),a[w].add(_),a[T].add(_),a[S].add(_),l[w].add(g),l[T].add(g),l[S].add(g))}let y=this.groups;y.length===0&&(y=[{start:0,count:t.count}]);for(let w=0,T=y.length;w<T;++w){const S=y[w],N=S.start,G=S.count;for(let B=N,V=N+G;B<V;B+=3)m(t.getX(B+0),t.getX(B+1),t.getX(B+2))}const v=new z,x=new z,C=new z,A=new z;function E(w){C.fromBufferAttribute(n,w),A.copy(C);const T=a[w];v.copy(T),v.sub(C.multiplyScalar(C.dot(T))).normalize(),x.crossVectors(A,T);const N=x.dot(l[w])<0?-1:1;o.setXYZW(w,v.x,v.y,v.z,N)}for(let w=0,T=y.length;w<T;++w){const S=y[w],N=S.start,G=S.count;for(let B=N,V=N+G;B<V;B+=3)E(t.getX(B+0)),E(t.getX(B+1)),E(t.getX(B+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let i=this.getAttribute("normal");if(i===void 0)i=new en(new Float32Array(e.count*3),3),this.setAttribute("normal",i);else for(let d=0,f=i.count;d<f;d++)i.setXYZ(d,0,0,0);const n=new z,s=new z,o=new z,a=new z,l=new z,c=new z,h=new z,u=new z;if(t)for(let d=0,f=t.count;d<f;d+=3){const p=t.getX(d+0),_=t.getX(d+1),g=t.getX(d+2);n.fromBufferAttribute(e,p),s.fromBufferAttribute(e,_),o.fromBufferAttribute(e,g),h.subVectors(o,s),u.subVectors(n,s),h.cross(u),a.fromBufferAttribute(i,p),l.fromBufferAttribute(i,_),c.fromBufferAttribute(i,g),a.add(h),l.add(h),c.add(h),i.setXYZ(p,a.x,a.y,a.z),i.setXYZ(_,l.x,l.y,l.z),i.setXYZ(g,c.x,c.y,c.z)}else for(let d=0,f=e.count;d<f;d+=3)n.fromBufferAttribute(e,d+0),s.fromBufferAttribute(e,d+1),o.fromBufferAttribute(e,d+2),h.subVectors(o,s),u.subVectors(n,s),h.cross(u),i.setXYZ(d+0,h.x,h.y,h.z),i.setXYZ(d+1,h.x,h.y,h.z),i.setXYZ(d+2,h.x,h.y,h.z);this.normalizeNormals(),i.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,i=t.count;e<i;e++)ii.fromBufferAttribute(t,e),ii.normalize(),t.setXYZ(e,ii.x,ii.y,ii.z)}toNonIndexed(){function t(a,l){const c=a.array,h=a.itemSize,u=a.normalized,d=new c.constructor(l.length*h);let f=0,p=0;for(let _=0,g=l.length;_<g;_++){a.isInterleavedBufferAttribute?f=l[_]*a.data.stride+a.offset:f=l[_]*h;for(let m=0;m<h;m++)d[p++]=c[f++]}return new en(d,h,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Xr,i=this.index.array,n=this.attributes;for(const a in n){const l=n[a],c=t(l,i);e.setAttribute(a,c)}const s=this.morphAttributes;for(const a in s){const l=[],c=s[a];for(let h=0,u=c.length;h<u;h++){const d=c[h],f=t(d,i);l.push(f)}e.morphAttributes[a]=l}e.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const c=o[a];e.addGroup(c.start,c.count,c.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(t[c]=l[c]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const i=this.attributes;for(const l in i){const c=i[l];t.data.attributes[l]=c.toJSON(t.data)}const n={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],h=[];for(let u=0,d=c.length;u<d;u++){const f=c[u];h.push(f.toJSON(t.data))}h.length>0&&(n[l]=h,s=!0)}s&&(t.data.morphAttributes=n,t.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(t.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const i=t.index;i!==null&&this.setIndex(i.clone(e));const n=t.attributes;for(const c in n){const h=n[c];this.setAttribute(c,h.clone(e))}const s=t.morphAttributes;for(const c in s){const h=[],u=s[c];for(let d=0,f=u.length;d<f;d++)h.push(u[d].clone(e));this.morphAttributes[c]=h}this.morphTargetsRelative=t.morphTargetsRelative;const o=t.groups;for(let c=0,h=o.length;c<h;c++){const u=o[c];this.addGroup(u.start,u.count,u.materialIndex)}const a=t.boundingBox;a!==null&&(this.boundingBox=a.clone());const l=t.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const M_=new De,vr=new ER,Mc=new jp,T_=new z,Tc=new z,bc=new z,Ec=new z,ad=new z,Ac=new z,b_=new z,wc=new z;class kr extends si{constructor(t=new Xr,e=new Wh){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,i=Object.keys(e);if(i.length>0){const n=e[i[0]];if(n!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=n.length;s<o;s++){const a=n[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}getVertexPosition(t,e){const i=this.geometry,n=i.attributes.position,s=i.morphAttributes.position,o=i.morphTargetsRelative;e.fromBufferAttribute(n,t);const a=this.morphTargetInfluences;if(s&&a){Ac.set(0,0,0);for(let l=0,c=s.length;l<c;l++){const h=a[l],u=s[l];h!==0&&(ad.fromBufferAttribute(u,t),o?Ac.addScaledVector(ad,h):Ac.addScaledVector(ad.sub(e),h))}e.add(Ac)}return e}raycast(t,e){const i=this.geometry,n=this.material,s=this.matrixWorld;n!==void 0&&(i.boundingSphere===null&&i.computeBoundingSphere(),Mc.copy(i.boundingSphere),Mc.applyMatrix4(s),vr.copy(t.ray).recast(t.near),!(Mc.containsPoint(vr.origin)===!1&&(vr.intersectSphere(Mc,T_)===null||vr.origin.distanceToSquared(T_)>(t.far-t.near)**2))&&(M_.copy(s).invert(),vr.copy(t.ray).applyMatrix4(M_),!(i.boundingBox!==null&&vr.intersectsBox(i.boundingBox)===!1)&&this._computeIntersections(t,e,vr)))}_computeIntersections(t,e,i){let n;const s=this.geometry,o=this.material,a=s.index,l=s.attributes.position,c=s.attributes.uv,h=s.attributes.uv1,u=s.attributes.normal,d=s.groups,f=s.drawRange;if(a!==null)if(Array.isArray(o))for(let p=0,_=d.length;p<_;p++){const g=d[p],m=o[g.materialIndex],y=Math.max(g.start,f.start),v=Math.min(a.count,Math.min(g.start+g.count,f.start+f.count));for(let x=y,C=v;x<C;x+=3){const A=a.getX(x),E=a.getX(x+1),w=a.getX(x+2);n=Rc(this,m,t,i,c,h,u,A,E,w),n&&(n.faceIndex=Math.floor(x/3),n.face.materialIndex=g.materialIndex,e.push(n))}}else{const p=Math.max(0,f.start),_=Math.min(a.count,f.start+f.count);for(let g=p,m=_;g<m;g+=3){const y=a.getX(g),v=a.getX(g+1),x=a.getX(g+2);n=Rc(this,o,t,i,c,h,u,y,v,x),n&&(n.faceIndex=Math.floor(g/3),e.push(n))}}else if(l!==void 0)if(Array.isArray(o))for(let p=0,_=d.length;p<_;p++){const g=d[p],m=o[g.materialIndex],y=Math.max(g.start,f.start),v=Math.min(l.count,Math.min(g.start+g.count,f.start+f.count));for(let x=y,C=v;x<C;x+=3){const A=x,E=x+1,w=x+2;n=Rc(this,m,t,i,c,h,u,A,E,w),n&&(n.faceIndex=Math.floor(x/3),n.face.materialIndex=g.materialIndex,e.push(n))}}else{const p=Math.max(0,f.start),_=Math.min(l.count,f.start+f.count);for(let g=p,m=_;g<m;g+=3){const y=g,v=g+1,x=g+2;n=Rc(this,o,t,i,c,h,u,y,v,x),n&&(n.faceIndex=Math.floor(g/3),e.push(n))}}}}function IR(r,t,e,i,n,s,o,a){let l;if(t.side===Tn?l=i.intersectTriangle(o,s,n,!0,a):l=i.intersectTriangle(n,s,o,t.side===la,a),l===null)return null;wc.copy(a),wc.applyMatrix4(r.matrixWorld);const c=e.ray.origin.distanceTo(wc);return c<e.near||c>e.far?null:{distance:c,point:wc.clone(),object:r}}function Rc(r,t,e,i,n,s,o,a,l,c){r.getVertexPosition(a,Tc),r.getVertexPosition(l,bc),r.getVertexPosition(c,Ec);const h=IR(r,t,e,i,Tc,bc,Ec,b_);if(h){const u=new z;xn.getBarycoord(b_,Tc,bc,Ec,u),n&&(h.uv=xn.getInterpolatedAttribute(n,a,l,c,u,new oe)),s&&(h.uv1=xn.getInterpolatedAttribute(s,a,l,c,u,new oe)),o&&(h.normal=xn.getInterpolatedAttribute(o,a,l,c,u,new z),h.normal.dot(i.direction)>0&&h.normal.multiplyScalar(-1));const d={a,b:l,c,normal:new z,materialIndex:0};xn.getNormal(Tc,bc,Ec,d.normal),h.face=d,h.barycoord=u}return h}class Nl extends Xr{constructor(t=1,e=1,i=1,n=1,s=1,o=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:n,heightSegments:s,depthSegments:o};const a=this;n=Math.floor(n),s=Math.floor(s),o=Math.floor(o);const l=[],c=[],h=[],u=[];let d=0,f=0;p("z","y","x",-1,-1,i,e,t,o,s,0),p("z","y","x",1,-1,i,e,-t,o,s,1),p("x","z","y",1,1,t,i,e,n,o,2),p("x","z","y",1,-1,t,i,-e,n,o,3),p("x","y","z",1,-1,t,e,i,n,s,4),p("x","y","z",-1,-1,t,e,-i,n,s,5),this.setIndex(l),this.setAttribute("position",new ys(c,3)),this.setAttribute("normal",new ys(h,3)),this.setAttribute("uv",new ys(u,2));function p(_,g,m,y,v,x,C,A,E,w,T){const S=x/E,N=C/w,G=x/2,B=C/2,V=A/2,Q=E+1,q=w+1;let rt=0,$=0;const ot=new z;for(let dt=0;dt<q;dt++){const Tt=dt*N-B;for(let Gt=0;Gt<Q;Gt++){const he=Gt*S-G;ot[_]=he*y,ot[g]=Tt*v,ot[m]=V,c.push(ot.x,ot.y,ot.z),ot[_]=0,ot[g]=0,ot[m]=A>0?1:-1,h.push(ot.x,ot.y,ot.z),u.push(Gt/E),u.push(1-dt/w),rt+=1}}for(let dt=0;dt<w;dt++)for(let Tt=0;Tt<E;Tt++){const Gt=d+Tt+Q*dt,he=d+Tt+Q*(dt+1),J=d+(Tt+1)+Q*(dt+1),lt=d+(Tt+1)+Q*dt;l.push(Gt,he,lt),l.push(he,J,lt),$+=6}a.addGroup(f,$,T),f+=$,d+=rt}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Nl(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function wy(r){const t={};for(const e in r){t[e]={};for(const i in r[e]){const n=r[e][i];n&&(n.isColor||n.isMatrix3||n.isMatrix4||n.isVector2||n.isVector3||n.isVector4||n.isTexture||n.isQuaternion)?n.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][i]=null):t[e][i]=n.clone():Array.isArray(n)?t[e][i]=n.slice():t[e][i]=n}}return t}function BR(r){const t=[];for(let e=0;e<r.length;e++)t.push(r[e].clone());return t}var OR=`
void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}
`,zR=`
void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}
`;class GR extends Ii{static get type(){return"ShaderMaterial"}constructor(t){super(),this.isShaderMaterial=!0,this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=OR,this.fragmentShader=zR,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=wy(t.uniforms),this.uniformsGroups=BR(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const o=this.uniforms[n].value;o&&o.isTexture?e.uniforms[n]={type:"t",value:o.toJSON(t).uuid}:o&&o.isColor?e.uniforms[n]={type:"c",value:o.getHex()}:o&&o.isVector2?e.uniforms[n]={type:"v2",value:o.toArray()}:o&&o.isVector3?e.uniforms[n]={type:"v3",value:o.toArray()}:o&&o.isVector4?e.uniforms[n]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?e.uniforms[n]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?e.uniforms[n]={type:"m4",value:o.toArray()}:e.uniforms[n]={value:o}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const i={};for(const n in this.extensions)this.extensions[n]===!0&&(i[n]=!0);return Object.keys(i).length>0&&(e.extensions=i),e}}class Ry extends si{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new De,this.projectionMatrix=new De,this.projectionMatrixInverse=new De,this.coordinateSystem=vn}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const ks=new z,E_=new oe,A_=new oe;class is extends Ry{constructor(t=50,e=1,i=.1,n=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=i,this.far=n,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=pl*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(sl*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return pl*2*Math.atan(Math.tan(sl*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,i){ks.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(ks.x,ks.y).multiplyScalar(-t/ks.z),ks.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),i.set(ks.x,ks.y).multiplyScalar(-t/ks.z)}getViewSize(t,e){return this.getViewBounds(t,E_,A_),e.subVectors(A_,E_)}setViewOffset(t,e,i,n,s,o){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(sl*.5*this.fov)/this.zoom,i=2*e,n=this.aspect*i,s=-.5*n;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,c=o.fullHeight;s+=o.offsetX*n/l,e-=o.offsetY*i/c,n*=o.width/l,i*=o.height/c}const a=this.filmOffset;a!==0&&(s+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+n,e,e-i,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const Ao=-90,wo=1;class Cy extends si{constructor(t,e,i){super(),this.type="CubeCamera",this.renderTarget=i,this.coordinateSystem=null,this.activeMipmapLevel=0;const n=new is(Ao,wo,t,e);n.layers=this.layers,this.add(n);const s=new is(Ao,wo,t,e);s.layers=this.layers,this.add(s);const o=new is(Ao,wo,t,e);o.layers=this.layers,this.add(o);const a=new is(Ao,wo,t,e);a.layers=this.layers,this.add(a);const l=new is(Ao,wo,t,e);l.layers=this.layers,this.add(l);const c=new is(Ao,wo,t,e);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[i,n,s,o,a,l]=e;for(const c of e)this.remove(c);if(t===vn)i.up.set(0,1,0),i.lookAt(1,0,0),n.up.set(0,1,0),n.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),o.up.set(0,0,1),o.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(t===Gr)i.up.set(0,-1,0),i.lookAt(-1,0,0),n.up.set(0,-1,0),n.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),o.up.set(0,0,-1),o.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const c of e)this.add(c),c.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:i,activeMipmapLevel:n}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[s,o,a,l,c,h]=this.children,u=t.getRenderTarget(),d=t.getActiveCubeFace(),f=t.getActiveMipmapLevel(),p=t.xr.enabled;t.xr.enabled=!1;const _=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,t.setRenderTarget(i,0,n),t.render(e,s),t.setRenderTarget(i,1,n),t.render(e,o),t.setRenderTarget(i,2,n),t.render(e,a),t.setRenderTarget(i,3,n),t.render(e,l),t.setRenderTarget(i,4,n),t.render(e,c),i.texture.generateMipmaps=_,t.setRenderTarget(i,5,n),t.render(e,h),t.setRenderTarget(u,d,f),t.xr.enabled=p,i.texture.needsPMREMUpdate=!0}}class Kp extends Ei{constructor(t,e,i,n,s,o,a,l,c,h){t=t!==void 0?t:[],e=e!==void 0?e:Or,super(t,e,i,n,s,o,a,l,c,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class kR extends MR{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const i={width:t,height:t,depth:1},n=[i,i,i,i,i,i];this.texture=new Kp(n,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:Yi}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const i={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},n=new Nl(5,5,5),s=new GR({name:"CubemapFromEquirect",uniforms:wy(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:Tn,blending:ca});s.uniforms.tEquirect.value=e;const o=new kr(n,s),a=e.minFilter;return e.minFilter===ms&&(e.minFilter=Yi),new Cy(1,10,this).update(t,o),e.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,i,n){const s=t.getRenderTarget();for(let o=0;o<6;o++)t.setRenderTarget(this,o),t.clear(e,i,n);t.setRenderTarget(s)}}class Ny extends si{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new bn,this.environmentIntensity=1,this.environmentRotation=new bn,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}class Py{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=t!==void 0?t.length/e:0,this.usage=bh,this.updateRanges=[],this.version=0,this.uuid=_s()}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,i){t*=this.stride,i*=e.stride;for(let n=0,s=this.stride;n<s;n++)this.array[t+n]=e.array[i+n];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=_s()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),i=new this.constructor(e,this.stride);return i.setUsage(this.usage),i}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=_s()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const Si=new z;class Zp{constructor(t,e,i,n=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=i,this.normalized=n}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,i=this.data.count;e<i;e++)Si.fromBufferAttribute(this,e),Si.applyMatrix4(t),this.setXYZ(e,Si.x,Si.y,Si.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)Si.fromBufferAttribute(this,e),Si.applyNormalMatrix(t),this.setXYZ(e,Si.x,Si.y,Si.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)Si.fromBufferAttribute(this,e),Si.transformDirection(t),this.setXYZ(e,Si.x,Si.y,Si.z);return this}getComponent(t,e){let i=this.array[t*this.data.stride+this.offset+e];return this.normalized&&(i=bi(i,this.array)),i}setComponent(t,e,i){return this.normalized&&(i=$t(i,this.array)),this.data.array[t*this.data.stride+this.offset+e]=i,this}setX(t,e){return this.normalized&&(e=$t(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=$t(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=$t(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=$t(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=bi(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=bi(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=bi(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=bi(e,this.array)),e}setXY(t,e,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=$t(e,this.array),i=$t(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this}setXYZ(t,e,i,n){return t=t*this.data.stride+this.offset,this.normalized&&(e=$t(e,this.array),i=$t(i,this.array),n=$t(n,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this}setXYZW(t,e,i,n,s){return t=t*this.data.stride+this.offset,this.normalized&&(e=$t(e,this.array),i=$t(i,this.array),n=$t(n,this.array),s=$t(s,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=n,this.data.array[t+3]=s,this}clone(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let i=0;i<this.count;i++){const n=i*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[n+s])}return new en(new this.array.constructor(e),this.itemSize,this.normalized)}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new Zp(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let i=0;i<this.count;i++){const n=i*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[n+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class Dy extends Ii{static get type(){return"SpriteMaterial"}constructor(t){super(),this.isSpriteMaterial=!0,this.color=new xe(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}class VR extends Ei{constructor(t=null,e=1,i=1,n,s,o,a,l,c=yi,h=yi,u,d){super(null,o,a,l,c,h,n,s,u,d),this.isDataTexture=!0,this.image={data:t,width:e,height:i},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class HR extends en{constructor(t,e,i,n=1){super(t,e,i),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}const ld=new z,WR=new z,$R=new Bi;class $s{constructor(t=new z(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,i,n){return this.normal.set(t,e,i),this.constant=n,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,i){const n=ld.subVectors(i,e).cross(WR.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(n,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const i=t.delta(ld),n=this.normal.dot(i);if(n===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/n;return s<0||s>1?null:e.copy(t.start).addScaledVector(i,s)}intersectsLine(t){const e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const i=e||$R.getNormalMatrix(t),n=this.coplanarPoint(ld).applyMatrix4(t),s=this.normal.applyMatrix3(i).normalize();return this.constant=-n.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const Sr=new jp,Cc=new z;class Ly{constructor(t=new $s,e=new $s,i=new $s,n=new $s,s=new $s,o=new $s){this.planes=[t,e,i,n,s,o]}set(t,e,i,n,s,o){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(i),a[3].copy(n),a[4].copy(s),a[5].copy(o),this}copy(t){const e=this.planes;for(let i=0;i<6;i++)e[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t,e=vn){const i=this.planes,n=t.elements,s=n[0],o=n[1],a=n[2],l=n[3],c=n[4],h=n[5],u=n[6],d=n[7],f=n[8],p=n[9],_=n[10],g=n[11],m=n[12],y=n[13],v=n[14],x=n[15];if(i[0].setComponents(l-s,d-c,g-f,x-m).normalize(),i[1].setComponents(l+s,d+c,g+f,x+m).normalize(),i[2].setComponents(l+o,d+h,g+p,x+y).normalize(),i[3].setComponents(l-o,d-h,g-p,x-y).normalize(),i[4].setComponents(l-a,d-u,g-_,x-v).normalize(),e===vn)i[5].setComponents(l+a,d+u,g+_,x+v).normalize();else if(e===Gr)i[5].setComponents(a,u,_,v).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),Sr.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),Sr.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(Sr)}intersectsSprite(t){return Sr.center.set(0,0,0),Sr.radius=.7071067811865476,Sr.applyMatrix4(t.matrixWorld),this.intersectsSphere(Sr)}intersectsSphere(t){const e=this.planes,i=t.center,n=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(i)<n)return!1;return!0}intersectsBox(t){const e=this.planes;for(let i=0;i<6;i++){const n=e[i];if(Cc.x=n.normal.x>0?t.max.x:t.min.x,Cc.y=n.normal.y>0?t.max.y:t.min.y,Cc.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(Cc)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class Qp extends Ii{static get type(){return"LineBasicMaterial"}constructor(t){super(),this.isLineBasicMaterial=!0,this.color=new xe(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.fog=t.fog,this}}class Fy extends Ii{static get type(){return"PointsMaterial"}constructor(t){super(),this.isPointsMaterial=!0,this.color=new xe(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.fog=t.fog,this}}class XR extends Ei{constructor(t,e){super({width:t,height:e}),this.isFramebufferTexture=!0,this.magFilter=yi,this.minFilter=yi,this.generateMipmaps=!1,this.needsUpdate=!0}}class Sa extends Ei{constructor(t,e,i,n,s,o,a,l,c,h=Ur){if(h!==Ur&&h!==ua)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");i===void 0&&h===Ur&&(i=ai),i===void 0&&h===ua&&(i=wl),super(null,n,s,o,a,l,h,i,c),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=a!==void 0?a:yi,this.minFilter=l!==void 0?l:yi,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}}class Jp extends Xr{constructor(t=1,e=32,i=16,n=0,s=Math.PI*2,o=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:n,phiLength:s,thetaStart:o,thetaLength:a},e=Math.max(3,Math.floor(e)),i=Math.max(2,Math.floor(i));const l=Math.min(o+a,Math.PI);let c=0;const h=[],u=new z,d=new z,f=[],p=[],_=[],g=[];for(let m=0;m<=i;m++){const y=[],v=m/i;let x=0;m===0&&o===0?x=.5/e:m===i&&l===Math.PI&&(x=-.5/e);for(let C=0;C<=e;C++){const A=C/e;u.x=-t*Math.cos(n+A*s)*Math.sin(o+v*a),u.y=t*Math.cos(o+v*a),u.z=t*Math.sin(n+A*s)*Math.sin(o+v*a),p.push(u.x,u.y,u.z),d.copy(u).normalize(),_.push(d.x,d.y,d.z),g.push(A+x,1-v),y.push(c++)}h.push(y)}for(let m=0;m<i;m++)for(let y=0;y<e;y++){const v=h[m][y+1],x=h[m][y],C=h[m+1][y],A=h[m+1][y+1];(m!==0||o>0)&&f.push(v,x,A),(m!==i-1||l<Math.PI)&&f.push(x,C,A)}this.setIndex(f),this.setAttribute("position",new ys(p,3)),this.setAttribute("normal",new ys(_,3)),this.setAttribute("uv",new ys(g,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new Jp(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class Uy extends Ii{static get type(){return"ShadowMaterial"}constructor(t){super(),this.isShadowMaterial=!0,this.color=new xe(0),this.transparent=!0,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.fog=t.fog,this}}class tm extends Ii{static get type(){return"MeshStandardMaterial"}constructor(t){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.color=new xe(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new xe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=or,this.normalScale=new oe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new bn,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Iy extends tm{static get type(){return"MeshPhysicalMaterial"}constructor(t){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new oe(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return li(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(e){this.ior=(1+.4*e)/(1-.4*e)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new xe(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new xe(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new xe(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(t)}get anisotropy(){return this._anisotropy}set anisotropy(t){this._anisotropy>0!=t>0&&this.version++,this._anisotropy=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get iridescence(){return this._iridescence}set iridescence(t){this._iridescence>0!=t>0&&this.version++,this._iridescence=t}get dispersion(){return this._dispersion}set dispersion(t){this._dispersion>0!=t>0&&this.version++,this._dispersion=t}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=t.anisotropy,this.anisotropyRotation=t.anisotropyRotation,this.anisotropyMap=t.anisotropyMap,this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.dispersion=t.dispersion,this.ior=t.ior,this.iridescence=t.iridescence,this.iridescenceMap=t.iridescenceMap,this.iridescenceIOR=t.iridescenceIOR,this.iridescenceThicknessRange=[...t.iridescenceThicknessRange],this.iridescenceThicknessMap=t.iridescenceThicknessMap,this.sheen=t.sheen,this.sheenColor.copy(t.sheenColor),this.sheenColorMap=t.sheenColorMap,this.sheenRoughness=t.sheenRoughness,this.sheenRoughnessMap=t.sheenRoughnessMap,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularColor.copy(t.specularColor),this.specularColorMap=t.specularColorMap,this}}class By extends Ii{static get type(){return"MeshPhongMaterial"}constructor(t){super(),this.isMeshPhongMaterial=!0,this.color=new xe(16777215),this.specular=new xe(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new xe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=or,this.normalScale=new oe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new bn,this.combine=Hh,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Oy extends Ii{static get type(){return"MeshToonMaterial"}constructor(t){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.color=new xe(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new xe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=or,this.normalScale=new oe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}class zy extends Ii{static get type(){return"MeshNormalMaterial"}constructor(t){super(),this.isMeshNormalMaterial=!0,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=or,this.normalScale=new oe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}class Gy extends Ii{static get type(){return"MeshLambertMaterial"}constructor(t){super(),this.isMeshLambertMaterial=!0,this.color=new xe(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new xe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=or,this.normalScale=new oe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new bn,this.combine=Hh,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class ky extends Ii{static get type(){return"MeshMatcapMaterial"}constructor(t){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.color=new xe(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=or,this.normalScale=new oe(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Vy extends Qp{static get type(){return"LineDashedMaterial"}constructor(t){super(),this.isLineDashedMaterial=!0,this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}class qr extends si{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new xe(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,this.groundColor!==void 0&&(e.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(e.object.distance=this.distance),this.angle!==void 0&&(e.object.angle=this.angle),this.decay!==void 0&&(e.object.decay=this.decay),this.penumbra!==void 0&&(e.object.penumbra=this.penumbra),this.shadow!==void 0&&(e.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(e.object.target=this.target.uuid),e}}class qR extends qr{constructor(t,e,i){super(t,i),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(si.DEFAULT_UP),this.updateMatrix(),this.groundColor=new xe(e)}copy(t,e){return super.copy(t,e),this.groundColor.copy(t.groundColor),this}}const cd=new De,w_=new z,R_=new z;class em{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new oe(512,512),this.map=null,this.mapPass=null,this.matrix=new De,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Ly,this._frameExtents=new oe(1,1),this._viewportCount=1,this._viewports=[new _e(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,i=this.matrix;w_.setFromMatrixPosition(t.matrixWorld),e.position.copy(w_),R_.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(R_),e.updateMatrixWorld(),cd.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(cd),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(cd)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.intensity=t.intensity,this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const t={};return this.intensity!==1&&(t.intensity=this.intensity),this.bias!==0&&(t.bias=this.bias),this.normalBias!==0&&(t.normalBias=this.normalBias),this.radius!==1&&(t.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class YR extends em{constructor(){super(new is(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(t){const e=this.camera,i=pl*2*t.angle*this.focus,n=this.mapSize.width/this.mapSize.height,s=t.distance||e.far;(i!==e.fov||n!==e.aspect||s!==e.far)&&(e.fov=i,e.aspect=n,e.far=s,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}class Hy extends qr{constructor(t,e,i=0,n=Math.PI/3,s=0,o=2){super(t,e),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(si.DEFAULT_UP),this.updateMatrix(),this.target=new si,this.distance=i,this.angle=n,this.penumbra=s,this.decay=o,this.map=null,this.shadow=new YR}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}const C_=new De,Oa=new z,hd=new z;class jR extends em{constructor(){super(new is(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new oe(4,2),this._viewportCount=6,this._viewports=[new _e(2,1,1,1),new _e(0,1,1,1),new _e(3,1,1,1),new _e(1,1,1,1),new _e(3,0,1,1),new _e(1,0,1,1)],this._cubeDirections=[new z(1,0,0),new z(-1,0,0),new z(0,0,1),new z(0,0,-1),new z(0,1,0),new z(0,-1,0)],this._cubeUps=[new z(0,1,0),new z(0,1,0),new z(0,1,0),new z(0,1,0),new z(0,0,1),new z(0,0,-1)]}updateMatrices(t,e=0){const i=this.camera,n=this.matrix,s=t.distance||i.far;s!==i.far&&(i.far=s,i.updateProjectionMatrix()),Oa.setFromMatrixPosition(t.matrixWorld),i.position.copy(Oa),hd.copy(i.position),hd.add(this._cubeDirections[e]),i.up.copy(this._cubeUps[e]),i.lookAt(hd),i.updateMatrixWorld(),n.makeTranslation(-Oa.x,-Oa.y,-Oa.z),C_.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(C_)}}class KR extends qr{constructor(t,e,i=0,n=2){super(t,e),this.isPointLight=!0,this.type="PointLight",this.distance=i,this.decay=n,this.shadow=new jR}get power(){return this.intensity*4*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}class im extends Ry{constructor(t=-1,e=1,i=1,n=-1,s=.1,o=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=i,this.bottom=n,this.near=s,this.far=o,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,i,n,s,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=n,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,n=(this.top+this.bottom)/2;let s=i-t,o=i+t,a=n+e,l=n-e;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,o=s+c*this.view.width,a-=h*this.view.offsetY,l=a-h*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}}class ZR extends em{constructor(){super(new im(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class QR extends qr{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(si.DEFAULT_UP),this.updateMatrix(),this.target=new si,this.shadow=new ZR}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class JR extends qr{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}}class tC extends qr{constructor(t,e,i=10,n=10){super(t,e),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=i,this.height=n}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}class eC{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new z)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const i=t.x,n=t.y,s=t.z,o=this.coefficients;return e.copy(o[0]).multiplyScalar(.282095),e.addScaledVector(o[1],.488603*n),e.addScaledVector(o[2],.488603*s),e.addScaledVector(o[3],.488603*i),e.addScaledVector(o[4],1.092548*(i*n)),e.addScaledVector(o[5],1.092548*(n*s)),e.addScaledVector(o[6],.315392*(3*s*s-1)),e.addScaledVector(o[7],1.092548*(i*s)),e.addScaledVector(o[8],.546274*(i*i-n*n)),e}getIrradianceAt(t,e){const i=t.x,n=t.y,s=t.z,o=this.coefficients;return e.copy(o[0]).multiplyScalar(.886227),e.addScaledVector(o[1],2*.511664*n),e.addScaledVector(o[2],2*.511664*s),e.addScaledVector(o[3],2*.511664*i),e.addScaledVector(o[4],2*.429043*i*n),e.addScaledVector(o[5],2*.429043*n*s),e.addScaledVector(o[6],.743125*s*s-.247708),e.addScaledVector(o[7],2*.429043*i*s),e.addScaledVector(o[8],.429043*(i*i-n*n)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let i=0;i<9;i++)this.coefficients[i].addScaledVector(t.coefficients[i],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let i=0;i<9;i++)this.coefficients[i].lerp(t.coefficients[i],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(t,e=0){const i=this.coefficients;for(let n=0;n<9;n++)i[n].fromArray(t,e+n*3);return this}toArray(t=[],e=0){const i=this.coefficients;for(let n=0;n<9;n++)i[n].toArray(t,e+n*3);return t}static getBasisAt(t,e){const i=t.x,n=t.y,s=t.z;e[0]=.282095,e[1]=.488603*n,e[2]=.488603*s,e[3]=.488603*i,e[4]=1.092548*i*n,e[5]=1.092548*n*s,e[6]=.315392*(3*s*s-1),e[7]=1.092548*i*s,e[8]=.546274*(i*i-n*n)}}class iC extends qr{constructor(t=new eC,e=1){super(void 0,e),this.isLightProbe=!0,this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}class nC extends Py{constructor(t,e,i=1){super(t,e),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}const sC=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveMap","envMap","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"];class rC{constructor(t){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(t),this.hasAnimation=t.object.isSkinnedMesh===!0,this.refreshUniforms=sC,this.renderId=0}firstInitialization(t){return this.renderObjects.has(t)===!1?(this.getRenderObjectData(t),!0):!1}getRenderObjectData(t){let e=this.renderObjects.get(t);if(e===void 0){const{geometry:i,material:n}=t;if(e={material:this.getMaterialData(n),geometry:{attributes:this.getAttributesData(i.attributes),indexVersion:i.index?i.index.version:null,drawRange:{start:i.drawRange.start,count:i.drawRange.count}},worldMatrix:t.object.matrixWorld.clone()},t.object.center&&(e.center=t.object.center.clone()),t.object.morphTargetInfluences&&(e.morphTargetInfluences=t.object.morphTargetInfluences.slice()),t.bundle!==null&&(e.version=t.bundle.version),e.material.transmission>0){const{width:s,height:o}=t.context;e.bufferWidth=s,e.bufferHeight=o}this.renderObjects.set(t,e)}return e}getAttributesData(t){const e={};for(const i in t){const n=t[i];e[i]={version:n.version}}return e}containsNode(t){const e=t.material;for(const i in e)if(e[i]&&e[i].isNode)return!0;return t.renderer.nodes.modelViewMatrix!==null||t.renderer.nodes.modelNormalViewMatrix!==null}getMaterialData(t){const e={};for(const i of this.refreshUniforms){const n=t[i];n!=null&&(typeof n=="object"&&n.clone!==void 0?n.isTexture===!0?e[i]={id:n.id,version:n.version}:e[i]=n.clone():e[i]=n)}return e}equals(t){const{object:e,material:i,geometry:n}=t,s=this.getRenderObjectData(t);if(s.worldMatrix.equals(e.matrixWorld)!==!0)return s.worldMatrix.copy(e.matrixWorld),!1;const o=s.material;for(const _ in o){const g=o[_],m=i[_];if(g.equals!==void 0){if(g.equals(m)===!1)return g.copy(m),!1}else if(m.isTexture===!0){if(g.id!==m.id||g.version!==m.version)return g.id=m.id,g.version=m.version,!1}else if(g!==m)return o[_]=m,!1}if(o.transmission>0){const{width:_,height:g}=t.context;if(s.bufferWidth!==_||s.bufferHeight!==g)return s.bufferWidth=_,s.bufferHeight=g,!1}const a=s.geometry,l=n.attributes,c=a.attributes,h=Object.keys(c),u=Object.keys(l);if(h.length!==u.length)return s.geometry.attributes=this.getAttributesData(l),!1;for(const _ of h){const g=c[_],m=l[_];if(m===void 0)return delete c[_],!1;if(g.version!==m.version)return g.version=m.version,!1}const d=n.index,f=a.indexVersion,p=d?d.version:null;if(f!==p)return a.indexVersion=p,!1;if(a.drawRange.start!==n.drawRange.start||a.drawRange.count!==n.drawRange.count)return a.drawRange.start=n.drawRange.start,a.drawRange.count=n.drawRange.count,!1;if(s.morphTargetInfluences){let _=!1;for(let g=0;g<s.morphTargetInfluences.length;g++)s.morphTargetInfluences[g]!==e.morphTargetInfluences[g]&&(_=!0);if(_)return!0}return s.center&&s.center.equals(e.center)===!1?(s.center.copy(e.center),!0):(t.bundle!==null&&(s.version=t.bundle.version),!0)}needsRefresh(t,e){if(this.hasNode||this.hasAnimation||this.firstInitialization(t))return!0;const{renderId:i}=e;if(this.renderId!==i)return this.renderId=i,!0;const n=t.object.static===!0,s=t.bundle!==null&&t.bundle.static===!0&&this.getRenderObjectData(t).version===t.bundle.version;return n||s?!1:this.equals(t)!==!0}}function ml(r,t=0){let e=3735928559^t,i=1103547991^t;if(r instanceof Array)for(let n=0,s;n<r.length;n++)s=r[n],e=Math.imul(e^s,2654435761),i=Math.imul(i^s,1597334677);else for(let n=0,s;n<r.length;n++)s=r.charCodeAt(n),e=Math.imul(e^s,2654435761),i=Math.imul(i^s,1597334677);return e=Math.imul(e^e>>>16,2246822507),e^=Math.imul(i^i>>>13,3266489909),i=Math.imul(i^i>>>16,2246822507),i^=Math.imul(e^e>>>13,3266489909),4294967296*(2097151&i)+(e>>>0)}const oC=r=>ml(r),Wy=r=>ml(r),Eh=(...r)=>ml(r);function $y(r,t=!1){const e=[];r.isNode===!0&&(e.push(r.id),r=r.getSelf());for(const{property:i,childNode:n}of Ah(r))e.push(e,ml(i.slice(0,-4)),n.getCacheKey(t));return ml(e)}function*Ah(r,t=!1){for(const e in r){if(e.startsWith("_")===!0)continue;const i=r[e];if(Array.isArray(i)===!0)for(let n=0;n<i.length;n++){const s=i[n];s&&(s.isNode===!0||t&&typeof s.toJSON=="function")&&(yield{property:e,index:n,childNode:s})}else if(i&&i.isNode===!0)yield{property:e,childNode:i};else if(typeof i=="object")for(const n in i){const s=i[n];s&&(s.isNode===!0||t&&typeof s.toJSON=="function")&&(yield{property:e,index:n,childNode:s})}}}function wh(r){if(r==null)return null;const t=typeof r;return r.isNode===!0?"node":t==="number"?"float":t==="boolean"?"bool":t==="string"?"string":t==="function"?"shader":r.isVector2===!0?"vec2":r.isVector3===!0?"vec3":r.isVector4===!0?"vec4":r.isMatrix3===!0?"mat3":r.isMatrix4===!0?"mat4":r.isColor===!0?"color":r instanceof ArrayBuffer?"ArrayBuffer":null}function Xy(r,...t){const e=r?r.slice(-4):void 0;return t.length===1&&(e==="vec2"?t=[t[0],t[0]]:e==="vec3"?t=[t[0],t[0],t[0]]:e==="vec4"&&(t=[t[0],t[0],t[0],t[0]])),r==="color"?new xe(...t):e==="vec2"?new oe(...t):e==="vec3"?new z(...t):e==="vec4"?new _e(...t):e==="mat3"?new Bi(...t):e==="mat4"?new De(...t):r==="bool"?t[0]||!1:r==="float"||r==="int"||r==="uint"?t[0]||0:r==="string"?t[0]||"":r==="ArrayBuffer"?lC(t[0]):null}function aC(r){let t="";const e=new Uint8Array(r);for(let i=0;i<e.length;i++)t+=String.fromCharCode(e[i]);return btoa(t)}function lC(r){return Uint8Array.from(atob(r),t=>t.charCodeAt(0)).buffer}const N_={VERTEX:"vertex",FRAGMENT:"fragment"},Zt={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},cC=["fragment","vertex"],P_=["setup","analyze","generate"],D_=[...cC,"compute"],Ma=["x","y","z","w"];let hC=0;class Xt extends ya{static get type(){return"Node"}constructor(t=null){super(),this.nodeType=t,this.updateType=Zt.NONE,this.updateBeforeType=Zt.NONE,this.updateAfterType=Zt.NONE,this.uuid=mR.generateUUID(),this.version=0,this._cacheKey=null,this._cacheKeyVersion=0,this.global=!1,this.isNode=!0,Object.defineProperty(this,"id",{value:hC++})}set needsUpdate(t){t===!0&&this.version++}get type(){return this.constructor.type}onUpdate(t,e){return this.updateType=e,this.update=t.bind(this.getSelf()),this}onFrameUpdate(t){return this.onUpdate(t,Zt.FRAME)}onRenderUpdate(t){return this.onUpdate(t,Zt.RENDER)}onObjectUpdate(t){return this.onUpdate(t,Zt.OBJECT)}onReference(t){return this.updateReference=t.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:t}of Ah(this))yield t}dispose(){this.dispatchEvent({type:"dispose"})}traverse(t){t(this);for(const e of this.getChildren())e.traverse(t)}getCacheKey(t=!1){return t=t||this.version!==this._cacheKeyVersion,(t===!0||this._cacheKey===null)&&(this._cacheKey=$y(this,t),this._cacheKeyVersion=this.version),this._cacheKey}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(t){const e=this.getNodeType(t);return t.getElementType(e)}getNodeType(t){const e=t.getNodeProperties(this);return e.outputNode?e.outputNode.getNodeType(t):this.nodeType}getShared(t){const e=this.getHash(t);return t.getNodeFromHash(e)||this}setup(t){const e=t.getNodeProperties(this);let i=0;for(const n of this.getChildren())e["node"+i++]=n;return null}analyze(t){if(t.increaseUsage(this)===1){const i=t.getNodeProperties(this);for(const n of Object.values(i))n&&n.isNode===!0&&n.build(t)}}generate(t,e){const{outputNode:i}=t.getNodeProperties(this);if(i&&i.isNode===!0)return i.build(t,e)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(t,e=null){const i=this.getShared(t);if(this!==i)return i.build(t,e);t.addNode(this),t.addChain(this);let n=null;const s=t.getBuildStage();if(s==="setup"){this.updateReference(t);const o=t.getNodeProperties(this);if(o.initialized!==!0){const a=t.stack.nodes.length;o.initialized=!0,o.outputNode=this.setup(t),o.outputNode!==null&&t.stack.nodes.length;for(const l of Object.values(o))l&&l.isNode===!0&&l.build(t)}}else if(s==="analyze")this.analyze(t);else if(s==="generate")if(this.generate.length===1){const a=this.getNodeType(t),l=t.getDataFromNode(this);n=l.snippet,n===void 0?(n=this.generate(t)||"",l.snippet=n):l.flowCodes!==void 0&&t.context.nodeBlock!==void 0&&t.addFlowCodeHierarchy(this,t.context.nodeBlock),n=t.format(n,a,e)}else n=this.generate(t,e)||"";return t.removeChain(this),t.addSequentialNode(this),n}getSerializeChildren(){return Ah(this)}serialize(t){const e=this.getSerializeChildren(),i={};for(const{property:n,index:s,childNode:o}of e)s!==void 0?(i[n]===void 0&&(i[n]=Number.isInteger(s)?[]:{}),i[n][s]=o.toJSON(t.meta).uuid):i[n]=o.toJSON(t.meta).uuid;Object.keys(i).length>0&&(t.inputNodes=i)}deserialize(t){if(t.inputNodes!==void 0){const e=t.meta.nodes;for(const i in t.inputNodes)if(Array.isArray(t.inputNodes[i])){const n=[];for(const s of t.inputNodes[i])n.push(e[s]);this[i]=n}else if(typeof t.inputNodes[i]=="object"){const n={};for(const s in t.inputNodes[i]){const o=t.inputNodes[i][s];n[s]=e[o]}this[i]=n}else{const n=t.inputNodes[i];this[i]=e[n]}}}toJSON(t){const{uuid:e,type:i}=this,n=t===void 0||typeof t=="string";n&&(t={textures:{},images:{},nodes:{}});let s=t.nodes[e];s===void 0&&(s={uuid:e,type:i,meta:t,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},n!==!0&&(t.nodes[s.uuid]=s),this.serialize(s),delete s.meta);function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}if(n){const a=o(t.textures),l=o(t.images),c=o(t.nodes);a.length>0&&(s.textures=a),l.length>0&&(s.images=l),c.length>0&&(s.nodes=c)}return s}}class Pl extends Xt{static get type(){return"ArrayElementNode"}constructor(t,e){super(),this.node=t,this.indexNode=e,this.isArrayElementNode=!0}getNodeType(t){return this.node.getElementType(t)}generate(t){const e=this.node.build(t),i=this.indexNode.build(t,"uint");return`${e}[ ${i} ]`}}class qy extends Xt{static get type(){return"ConvertNode"}constructor(t,e){super(),this.node=t,this.convertTo=e}getNodeType(t){const e=this.node.getNodeType(t);let i=null;for(const n of this.convertTo.split("|"))(i===null||t.getTypeLength(e)===t.getTypeLength(n))&&(i=n);return i}serialize(t){super.serialize(t),t.convertTo=this.convertTo}deserialize(t){super.deserialize(t),this.convertTo=t.convertTo}generate(t,e){const i=this.node,n=this.getNodeType(t),s=i.build(t,n);return t.format(s,n,e)}}class je extends Xt{static get type(){return"TempNode"}constructor(t){super(t),this.isTempNode=!0}hasDependencies(t){return t.getDataFromNode(this).usageCount>1}build(t,e){if(t.getBuildStage()==="generate"){const n=t.getVectorType(this.getNodeType(t,e)),s=t.getDataFromNode(this);if(s.propertyName!==void 0)return t.format(s.propertyName,n,e);if(n!=="void"&&e!=="void"&&this.hasDependencies(t)){const o=super.build(t,n),a=t.getVarFromNode(this,null,n),l=t.getPropertyName(a);return t.addLineFlowCode(`${l} = ${o}`,this),s.snippet=o,s.propertyName=l,t.format(s.propertyName,n,e)}}return super.build(t,e)}}class uC extends je{static get type(){return"JoinNode"}constructor(t=[],e=null){super(e),this.nodes=t}getNodeType(t){return this.nodeType!==null?t.getVectorType(this.nodeType):t.getTypeFromLength(this.nodes.reduce((e,i)=>e+t.getTypeLength(i.getNodeType(t)),0))}generate(t,e){const i=this.getNodeType(t),n=this.nodes,s=t.getComponentType(i),o=[];for(const l of n){let c=l.build(t);const h=t.getComponentType(l.getNodeType(t));h!==s&&(c=t.format(c,h,s)),o.push(c)}const a=`${t.getType(i)}( ${o.join(", ")} )`;return t.format(a,i,e)}}const dC=Ma.join("");class L_ extends Xt{static get type(){return"SplitNode"}constructor(t,e="x"){super(),this.node=t,this.components=e,this.isSplitNode=!0}getVectorLength(){let t=this.components.length;for(const e of this.components)t=Math.max(Ma.indexOf(e)+1,t);return t}getComponentType(t){return t.getComponentType(this.node.getNodeType(t))}getNodeType(t){return t.getTypeFromLength(this.components.length,this.getComponentType(t))}generate(t,e){const i=this.node,n=t.getTypeLength(i.getNodeType(t));let s=null;if(n>1){let o=null;this.getVectorLength()>=n&&(o=t.getTypeFromLength(this.getVectorLength(),this.getComponentType(t)));const l=i.build(t,o);this.components.length===n&&this.components===dC.slice(0,this.components.length)?s=t.format(l,o,e):s=t.format(`${l}.${this.components}`,this.getNodeType(t),e)}else s=i.build(t,e);return s}serialize(t){super.serialize(t),t.components=this.components}deserialize(t){super.deserialize(t),this.components=t.components}}class fC extends je{static get type(){return"SetNode"}constructor(t,e,i){super(),this.sourceNode=t,this.components=e,this.targetNode=i}getNodeType(t){return this.sourceNode.getNodeType(t)}generate(t){const{sourceNode:e,components:i,targetNode:n}=this,s=this.getNodeType(t),o=t.getTypeFromLength(i.length,n.getNodeType(t)),a=n.build(t,o),l=e.build(t,s),c=t.getTypeLength(s),h=[];for(let u=0;u<c;u++){const d=Ma[u];d===i[0]?(h.push(a),u+=i.length-1):h.push(l+"."+d)}return`${t.getType(s)}( ${h.join(", ")} )`}}class pC extends je{static get type(){return"FlipNode"}constructor(t,e){super(),this.sourceNode=t,this.components=e}getNodeType(t){return this.sourceNode.getNodeType(t)}generate(t){const{components:e,sourceNode:i}=this,n=this.getNodeType(t),s=i.build(t),o=t.getVarFromNode(this),a=t.getPropertyName(o);t.addLineFlowCode(a+" = "+s,this);const l=t.getTypeLength(n),c=[];let h=0;for(let u=0;u<l;u++){const d=Ma[u];d===e[h]?(c.push("1.0 - "+(a+"."+d)),h++):c.push(a+"."+d)}return`${t.getType(n)}( ${c.join(", ")} )`}}class nm extends Xt{static get type(){return"InputNode"}constructor(t,e=null){super(e),this.isInputNode=!0,this.value=t,this.precision=null}getNodeType(){return this.nodeType===null?wh(this.value):this.nodeType}getInputType(t){return this.getNodeType(t)}setPrecision(t){return this.precision=t,this}serialize(t){super.serialize(t),t.value=this.value,this.value&&this.value.toArray&&(t.value=this.value.toArray()),t.valueType=wh(this.value),t.nodeType=this.nodeType,t.valueType==="ArrayBuffer"&&(t.value=aC(t.value)),t.precision=this.precision}deserialize(t){super.deserialize(t),this.nodeType=t.nodeType,this.value=Array.isArray(t.value)?Xy(t.valueType,...t.value):t.value,this.precision=t.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(t.value))}generate(){console.warn("Abstract function.")}}class Es extends nm{static get type(){return"ConstNode"}constructor(t,e=null){super(t,e),this.isConstNode=!0}generateConst(t){return t.generateConst(this.getNodeType(t),this.value)}generate(t,e){const i=this.getNodeType(t);return t.format(this.generateConst(t),i,e)}}let da=null;const ko=new Map;function j(r,t){if(ko.has(r)){console.warn(`Redefinition of method chaining ${r}`);return}if(typeof t!="function")throw new Error(`Node element ${r} is not a function`);ko.set(r,t)}const Yy=r=>r.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),F_=r=>Yy(r).split("").sort().join(""),jy={setup(r,t){const e=t.shift();return r(qh(e),...t)},get(r,t,e){if(typeof t=="string"&&r[t]===void 0){if(r.isStackNode!==!0&&t==="assign")return(...i)=>(da.assign(e,...i),e);if(ko.has(t)){const i=ko.get(t);return r.isStackNode?(...n)=>e.add(i(...n)):(...n)=>i(e,...n)}else{if(t==="self")return r;if(t.endsWith("Assign")&&ko.has(t.slice(0,t.length-6))){const i=ko.get(t.slice(0,t.length-6));return r.isStackNode?(...n)=>e.assign(n[0],i(...n)):(...n)=>e.assign(i(e,...n))}else{if(/^[xyzwrgbastpq]{1,4}$/.test(t)===!0)return t=Yy(t),at(new L_(e,t));if(/^set[XYZWRGBASTPQ]{1,4}$/.test(t)===!0)return t=F_(t.slice(3).toLowerCase()),i=>at(new fC(r,t,i));if(/^flip[XYZWRGBASTPQ]{1,4}$/.test(t)===!0)return t=F_(t.slice(4).toLowerCase()),()=>at(new pC(at(r),t));if(t==="width"||t==="height"||t==="depth")return t==="width"?t="x":t==="height"?t="y":t==="depth"&&(t="z"),at(new L_(r,t));if(/^\d+$/.test(t)===!0)return at(new Pl(e,new Es(Number(t),"uint")))}}}return Reflect.get(r,t,e)},set(r,t,e,i){return typeof t=="string"&&r[t]===void 0&&(/^[xyzwrgbastpq]{1,4}$/.test(t)===!0||t==="width"||t==="height"||t==="depth"||/^\d+$/.test(t)===!0)?(i[t].assign(e),!0):Reflect.set(r,t,e,i)}},ud=new WeakMap,U_=new WeakMap,mC=function(r,t=null){const e=wh(r);if(e==="node"){let i=ud.get(r);return i===void 0&&(i=new Proxy(r,jy),ud.set(r,i),ud.set(i,i)),i}else{if(t===null&&(e==="float"||e==="boolean")||e&&e!=="shader"&&e!=="string")return at(ap(r,t));if(e==="shader")return pt(r)}return r},gC=function(r,t=null){for(const e in r)r[e]=at(r[e],t);return r},_C=function(r,t=null){const e=r.length;for(let i=0;i<e;i++)r[i]=at(r[i],t);return r},xC=function(r,t=null,e=null,i=null){const n=s=>at(i!==null?Object.assign(s,i):s);return t===null?(...s)=>n(new r(...Jo(s))):e!==null?(e=at(e),(...s)=>n(new r(t,...Jo(s),e))):(...s)=>n(new r(t,...Jo(s)))},yC=function(r,...t){return at(new r(...Jo(t)))};class vC extends Xt{constructor(t,e){super(),this.shaderNode=t,this.inputNodes=e}getNodeType(t){return this.shaderNode.nodeType||this.getOutputNode(t).getNodeType(t)}call(t){const{shaderNode:e,inputNodes:i}=this,n=t.getNodeProperties(e);if(n.onceOutput)return n.onceOutput;let s=null;if(e.layout){let o=U_.get(t.constructor);o===void 0&&(o=new WeakMap,U_.set(t.constructor,o));let a=o.get(e);a===void 0&&(a=at(t.buildFunctionNode(e)),o.set(e,a)),t.currentFunctionNode!==null&&t.currentFunctionNode.includes.push(a),s=at(a.call(i))}else{const o=e.jsFunc,a=i!==null?o(i,t):o(t);s=at(a)}return e.once&&(n.onceOutput=s),s}getOutputNode(t){const e=t.getNodeProperties(this);return e.outputNode===null&&(e.outputNode=this.setupOutput(t)),e.outputNode}setup(t){return this.getOutputNode(t)}setupOutput(t){return t.addStack(),t.stack.outputNode=this.call(t),t.removeStack()}generate(t,e){return this.getOutputNode(t).build(t,e)}}class SC extends Xt{constructor(t,e){super(e),this.jsFunc=t,this.layout=null,this.global=!0,this.once=!1}setLayout(t){return this.layout=t,this}call(t=null){return qh(t),at(new vC(this,t))}setup(){return this.call()}}const MC=[!1,!0],TC=[0,1,2,3],bC=[-1,-2],Ky=[.5,1.5,1/3,1e-6,1e6,Math.PI,Math.PI*2,1/Math.PI,2/Math.PI,1/(Math.PI*2),Math.PI/2],sm=new Map;for(const r of MC)sm.set(r,new Es(r));const rm=new Map;for(const r of TC)rm.set(r,new Es(r,"uint"));const om=new Map([...rm].map(r=>new Es(r.value,"int")));for(const r of bC)om.set(r,new Es(r,"int"));const $h=new Map([...om].map(r=>new Es(r.value)));for(const r of Ky)$h.set(r,new Es(r));for(const r of Ky)$h.set(-r,new Es(-r));const Xh={bool:sm,uint:rm,ints:om,float:$h},I_=new Map([...sm,...$h]),ap=(r,t)=>I_.has(r)?I_.get(r):r.isNode===!0?r:new Es(r,t),EC=r=>{try{return r.getNodeType()}catch{return}},Ke=function(r,t=null){return(...e)=>{if((e.length===0||!["bool","float","int","uint"].includes(r)&&e.every(n=>typeof n!="object"))&&(e=[Xy(r,...e)]),e.length===1&&t!==null&&t.has(e[0]))return at(t.get(e[0]));if(e.length===1){const n=ap(e[0],r);return EC(n)===r?at(n):at(new qy(n,r))}const i=e.map(n=>ap(n));return at(new uC(i,r))}},B_=r=>typeof r=="object"&&r!==null?r.value:r,AC=r=>r!=null?r.nodeType||r.convertTo||(typeof r=="string"?r:null):null;function ah(r,t){return new Proxy(new SC(r,t),jy)}const at=(r,t=null)=>mC(r,t),qh=(r,t=null)=>new gC(r,t),Jo=(r,t=null)=>new _C(r,t),tt=(...r)=>new xC(...r),ut=(...r)=>new yC(...r),pt=(r,t)=>{const e=new ah(r,t),i=(...n)=>{let s;return qh(n),n[0]&&n[0].isNode?s=[...n]:s=n[0],e.call(s)};return i.shaderNode=e,i.setLayout=n=>(e.setLayout(n),i),i.once=()=>(e.once=!0,i),i};j("toGlobal",r=>(r.global=!0,r));const Rh=r=>{da=r},Zy=()=>da,ui=(...r)=>da.If(...r);function wC(r){return da&&da.add(r),r}j("append",wC);const RC=new Ke("color"),Z=new Ke("float",Xh.float),Oe=new Ke("int",Xh.ints),CC=new Ke("uint",Xh.uint),NC=new Ke("bool",Xh.bool),gt=new Ke("vec2"),ns=new Ke("ivec2"),PC=new Ke("uvec2"),DC=new Ke("bvec2"),K=new Ke("vec3"),LC=new Ke("ivec3"),FC=new Ke("uvec3"),UC=new Ke("bvec3"),Vt=new Ke("vec4"),IC=new Ke("ivec4"),BC=new Ke("uvec4"),OC=new Ke("bvec4"),am=new Ke("mat2"),Ai=new Ke("mat3"),ta=new Ke("mat4");j("toColor",RC);j("toFloat",Z);j("toInt",Oe);j("toUint",CC);j("toBool",NC);j("toVec2",gt);j("toIVec2",ns);j("toUVec2",PC);j("toBVec2",DC);j("toVec3",K);j("toIVec3",LC);j("toUVec3",FC);j("toBVec3",UC);j("toVec4",Vt);j("toIVec4",IC);j("toUVec4",BC);j("toBVec4",OC);j("toMat2",am);j("toMat3",Ai);j("toMat4",ta);const zC=tt(Pl),GC=(r,t)=>at(new qy(at(r),t));j("element",zC);j("convert",GC);class Qy extends Xt{static get type(){return"UniformGroupNode"}constructor(t,e=!1,i=1){super("string"),this.name=t,this.version=0,this.shared=e,this.order=i,this.isUniformGroup=!0}set needsUpdate(t){t===!0&&this.version++}serialize(t){super.serialize(t),t.name=this.name,t.version=this.version,t.shared=this.shared}deserialize(t){super.deserialize(t),this.name=t.name,this.version=t.version,this.shared=t.shared}}const kC=r=>new Qy(r),Jy=(r,t=0)=>new Qy(r,!0,t),VC=Jy("frame"),ee=Jy("render"),tv=kC("object");class Dl extends nm{static get type(){return"UniformNode"}constructor(t,e=null){super(t,e),this.isUniformNode=!0,this.name="",this.groupNode=tv}label(t){return this.name=t,this}setGroup(t){return this.groupNode=t,this}getGroup(){return this.groupNode}getUniformHash(t){return this.getHash(t)}onUpdate(t,e){const i=this.getSelf();return t=t.bind(i),super.onUpdate(n=>{const s=t(n,i);s!==void 0&&(this.value=s)},e)}generate(t,e){const i=this.getNodeType(t),n=this.getUniformHash(t);let s=t.getNodeFromHash(n);s===void 0&&(t.setHashNode(this,n),s=this);const o=s.getInputType(t),a=t.getUniformFromNode(s,o,t.shaderStage,this.name||t.context.label),l=t.getPropertyName(a);return t.context.label!==void 0&&delete t.context.label,t.format(l,i,e)}}const Ht=(r,t)=>{const e=AC(t||r),i=r&&r.isNode===!0?r.node&&r.node.value||r.value:r;return at(new Dl(i,e))};class ye extends Xt{static get type(){return"PropertyNode"}constructor(t,e=null,i=!1){super(t),this.name=e,this.varying=i,this.isPropertyNode=!0}getHash(t){return this.name||super.getHash(t)}isGlobal(){return!0}generate(t){let e;return this.varying===!0?(e=t.getVaryingFromNode(this,this.name),e.needsInterpolation=!0):e=t.getVarFromNode(this,this.name),t.getPropertyName(e)}}const Io=(r,t)=>at(new ye(r,t)),Ch=(r,t)=>at(new ye(r,t,!0)),fe=ut(ye,"vec4","DiffuseColor"),O_=ut(ye,"vec3","EmissiveColor"),ls=ut(ye,"float","Roughness"),Nh=ut(ye,"float","Metalness"),lp=ut(ye,"float","Clearcoat"),Ph=ut(ye,"float","ClearcoatRoughness"),Vo=ut(ye,"vec3","Sheen"),lm=ut(ye,"float","SheenRoughness"),cm=ut(ye,"float","Iridescence"),ev=ut(ye,"float","IridescenceIOR"),iv=ut(ye,"float","IridescenceThickness"),cp=ut(ye,"float","AlphaT"),Er=ut(ye,"float","Anisotropy"),lh=ut(ye,"vec3","AnisotropyT"),ea=ut(ye,"vec3","AnisotropyB"),$i=ut(ye,"color","SpecularColor"),Dh=ut(ye,"float","SpecularF90"),hp=ut(ye,"float","Shininess"),HC=ut(ye,"vec4","Output"),dd=ut(ye,"float","dashSize"),z_=ut(ye,"float","gapSize"),ch=ut(ye,"float","IOR"),up=ut(ye,"float","Transmission"),nv=ut(ye,"float","Thickness"),sv=ut(ye,"float","AttenuationDistance"),rv=ut(ye,"color","AttenuationColor"),ov=ut(ye,"float","Dispersion");class WC extends je{static get type(){return"AssignNode"}constructor(t,e){super(),this.targetNode=t,this.sourceNode=e}hasDependencies(){return!1}getNodeType(t,e){return e!=="void"?this.targetNode.getNodeType(t):"void"}needsSplitAssign(t){const{targetNode:e}=this;if(t.isAvailable("swizzleAssign")===!1&&e.isSplitNode&&e.components.length>1){const i=t.getTypeLength(e.node.getNodeType(t));return Ma.join("").slice(0,i)!==e.components}return!1}generate(t,e){const{targetNode:i,sourceNode:n}=this,s=this.needsSplitAssign(t),o=i.getNodeType(t),a=i.context({assign:!0}).build(t),l=n.build(t,o),c=n.getNodeType(t),h=t.getDataFromNode(this);let u;if(h.initialized===!0)e!=="void"&&(u=a);else if(s){const d=t.getVarFromNode(this,null,o),f=t.getPropertyName(d);t.addLineFlowCode(`${f} = ${l}`,this);const p=i.node.context({assign:!0}).build(t);for(let _=0;_<i.components.length;_++){const g=i.components[_];t.addLineFlowCode(`${p}.${g} = ${f}[ ${_} ]`,this)}e!=="void"&&(u=a)}else u=`${a} = ${l}`,(e==="void"||c==="void")&&(t.addLineFlowCode(u,this),e!=="void"&&(u=a));return h.initialized=!0,t.format(u,o,e)}}const $C=tt(WC);j("assign",$C);class XC extends je{static get type(){return"FunctionCallNode"}constructor(t=null,e={}){super(),this.functionNode=t,this.parameters=e}setParameters(t){return this.parameters=t,this}getParameters(){return this.parameters}getNodeType(t){return this.functionNode.getNodeType(t)}generate(t){const e=[],i=this.functionNode,n=i.getInputs(t),s=this.parameters,o=(l,c)=>{const h=c.type,u=h==="pointer";let d;return u?d="&"+l.build(t):d=l.build(t,h),d};if(Array.isArray(s))for(let l=0;l<s.length;l++)e.push(o(s[l],n[l]));else for(const l of n){const c=s[l.name];if(c!==void 0)e.push(o(c,l));else throw new Error(`FunctionCallNode: Input '${l.name}' not found in FunctionNode.`)}return`${i.build(t,"property")}( ${e.join(", ")} )`}}const qC=(r,...t)=>(t=t.length>1||t[0]&&t[0].isNode===!0?Jo(t):qh(t[0]),at(new XC(at(r),t)));j("call",qC);class Le extends je{static get type(){return"OperatorNode"}constructor(t,e,i,...n){if(super(),n.length>0){let s=new Le(t,e,i);for(let o=0;o<n.length-1;o++)s=new Le(t,s,n[o]);e=s,i=n[n.length-1]}this.op=t,this.aNode=e,this.bNode=i}getNodeType(t,e){const i=this.op,n=this.aNode,s=this.bNode,o=n.getNodeType(t),a=typeof s<"u"?s.getNodeType(t):null;if(o==="void"||a==="void")return"void";if(i==="%")return o;if(i==="~"||i==="&"||i==="|"||i==="^"||i===">>"||i==="<<")return t.getIntegerType(o);if(i==="!"||i==="=="||i==="&&"||i==="||"||i==="^^")return"bool";if(i==="<"||i===">"||i==="<="||i===">="){const l=e?t.getTypeLength(e):Math.max(t.getTypeLength(o),t.getTypeLength(a));return l>1?`bvec${l}`:"bool"}else return o==="float"&&t.isMatrix(a)?a:t.isMatrix(o)&&t.isVector(a)?t.getVectorFromMatrix(o):t.isVector(o)&&t.isMatrix(a)?t.getVectorFromMatrix(a):t.getTypeLength(a)>t.getTypeLength(o)?a:o}generate(t,e){const i=this.op,n=this.aNode,s=this.bNode,o=this.getNodeType(t,e);let a=null,l=null;o!=="void"?(a=n.getNodeType(t),l=typeof s<"u"?s.getNodeType(t):null,i==="<"||i===">"||i==="<="||i===">="||i==="=="?t.isVector(a)?l=a:a!==l&&(a=l="float"):i===">>"||i==="<<"?(a=o,l=t.changeComponentType(l,"uint")):t.isMatrix(a)&&t.isVector(l)?l=t.getVectorFromMatrix(a):t.isVector(a)&&t.isMatrix(l)?a=t.getVectorFromMatrix(l):a=l=o):a=l=o;const c=n.build(t,a),h=typeof s<"u"?s.build(t,l):null,u=t.getTypeLength(e),d=t.getFunctionOperator(i);if(e!=="void")return i==="<"&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("lessThan",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} < ${h} )`,o,e):i==="<="&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("lessThanEqual",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} <= ${h} )`,o,e):i===">"&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("greaterThan",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} > ${h} )`,o,e):i===">="&&u>1?t.useComparisonMethod?t.format(`${t.getMethod("greaterThanEqual",e)}( ${c}, ${h} )`,o,e):t.format(`( ${c} >= ${h} )`,o,e):i==="!"||i==="~"?t.format(`(${i}${c})`,a,e):d?t.format(`${d}( ${c}, ${h} )`,o,e):t.format(`( ${c} ${i} ${h} )`,o,e);if(a!=="void")return d?t.format(`${d}( ${c}, ${h} )`,o,e):t.format(`${c} ${i} ${h}`,o,e)}serialize(t){super.serialize(t),t.op=this.op}deserialize(t){super.deserialize(t),this.op=t.op}}const wi=tt(Le,"+"),Xi=tt(Le,"-"),Jt=tt(Le,"*"),ar=tt(Le,"/"),av=tt(Le,"%"),YC=tt(Le,"=="),jC=tt(Le,"!="),KC=tt(Le,"<"),ZC=tt(Le,">"),QC=tt(Le,"<="),JC=tt(Le,">="),tN=tt(Le,"&&"),eN=tt(Le,"||"),iN=tt(Le,"!"),nN=tt(Le,"^^"),sN=tt(Le,"&"),rN=tt(Le,"~"),oN=tt(Le,"|"),aN=tt(Le,"^"),lN=tt(Le,"<<"),cN=tt(Le,">>");j("add",wi);j("sub",Xi);j("mul",Jt);j("div",ar);j("modInt",av);j("equal",YC);j("notEqual",jC);j("lessThan",KC);j("greaterThan",ZC);j("lessThanEqual",QC);j("greaterThanEqual",JC);j("and",tN);j("or",eN);j("not",iN);j("xor",nN);j("bitAnd",sN);j("bitNot",rN);j("bitOr",oN);j("bitXor",aN);j("shiftLeft",lN);j("shiftRight",cN);const hN=(...r)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),av(...r));j("remainder",hN);class F extends je{static get type(){return"MathNode"}constructor(t,e,i=null,n=null){super(),this.method=t,this.aNode=e,this.bNode=i,this.cNode=n}getInputType(t){const e=this.aNode.getNodeType(t),i=this.bNode?this.bNode.getNodeType(t):null,n=this.cNode?this.cNode.getNodeType(t):null,s=t.isMatrix(e)?0:t.getTypeLength(e),o=t.isMatrix(i)?0:t.getTypeLength(i),a=t.isMatrix(n)?0:t.getTypeLength(n);return s>o&&s>a?e:o>a?i:a>s?n:e}getNodeType(t){const e=this.method;return e===F.LENGTH||e===F.DISTANCE||e===F.DOT?"float":e===F.CROSS?"vec3":e===F.ALL?"bool":e===F.EQUALS?t.changeComponentType(this.aNode.getNodeType(t),"bool"):e===F.MOD?this.aNode.getNodeType(t):this.getInputType(t)}generate(t,e){const i=this.method,n=this.getNodeType(t),s=this.getInputType(t),o=this.aNode,a=this.bNode,l=this.cNode,c=t.renderer.isWebGLRenderer===!0;if(i===F.TRANSFORM_DIRECTION){let h=o,u=a;t.isMatrix(h.getNodeType(t))?u=Vt(K(u),0):h=Vt(K(h),0);const d=Jt(h,u).xyz;return _l(d).build(t,e)}else{if(i===F.NEGATE)return t.format("( - "+o.build(t,s)+" )",n,e);if(i===F.ONE_MINUS)return Xi(1,o).build(t,e);if(i===F.RECIPROCAL)return ar(1,o).build(t,e);if(i===F.DIFFERENCE)return gn(Xi(o,a)).build(t,e);{const h=[];return i===F.CROSS||i===F.MOD?h.push(o.build(t,n),a.build(t,n)):c&&i===F.STEP?h.push(o.build(t,t.getTypeLength(o.getNodeType(t))===1?"float":s),a.build(t,s)):c&&(i===F.MIN||i===F.MAX)||i===F.MOD?h.push(o.build(t,s),a.build(t,t.getTypeLength(a.getNodeType(t))===1?"float":s)):i===F.REFRACT?h.push(o.build(t,s),a.build(t,s),l.build(t,"float")):i===F.MIX?h.push(o.build(t,s),a.build(t,s),l.build(t,t.getTypeLength(l.getNodeType(t))===1?"float":s)):(h.push(o.build(t,s)),a!==null&&h.push(a.build(t,s)),l!==null&&h.push(l.build(t,s))),t.format(`${t.getMethod(i,n)}( ${h.join(", ")} )`,n,e)}}}serialize(t){super.serialize(t),t.method=this.method}deserialize(t){super.deserialize(t),this.method=t.method}}F.ALL="all";F.ANY="any";F.EQUALS="equals";F.RADIANS="radians";F.DEGREES="degrees";F.EXP="exp";F.EXP2="exp2";F.LOG="log";F.LOG2="log2";F.SQRT="sqrt";F.INVERSE_SQRT="inversesqrt";F.FLOOR="floor";F.CEIL="ceil";F.NORMALIZE="normalize";F.FRACT="fract";F.SIN="sin";F.COS="cos";F.TAN="tan";F.ASIN="asin";F.ACOS="acos";F.ATAN="atan";F.ABS="abs";F.SIGN="sign";F.LENGTH="length";F.NEGATE="negate";F.ONE_MINUS="oneMinus";F.DFDX="dFdx";F.DFDY="dFdy";F.ROUND="round";F.RECIPROCAL="reciprocal";F.TRUNC="trunc";F.FWIDTH="fwidth";F.BITCAST="bitcast";F.TRANSPOSE="transpose";F.ATAN2="atan2";F.MIN="min";F.MAX="max";F.MOD="mod";F.STEP="step";F.REFLECT="reflect";F.DISTANCE="distance";F.DIFFERENCE="difference";F.DOT="dot";F.CROSS="cross";F.POW="pow";F.TRANSFORM_DIRECTION="transformDirection";F.MIX="mix";F.CLAMP="clamp";F.REFRACT="refract";F.SMOOTHSTEP="smoothstep";F.FACEFORWARD="faceforward";const uN=Z(1e-6),dN=Z(Math.PI),lv=tt(F,F.ALL),fN=tt(F,F.ANY),pN=tt(F,F.EQUALS),mN=tt(F,F.RADIANS),gN=tt(F,F.DEGREES),cv=tt(F,F.EXP),gl=tt(F,F.EXP2),hv=tt(F,F.LOG),vs=tt(F,F.LOG2),hm=tt(F,F.SQRT),_N=tt(F,F.INVERSE_SQRT),Ir=tt(F,F.FLOOR),um=tt(F,F.CEIL),_l=tt(F,F.NORMALIZE),cr=tt(F,F.FRACT),mn=tt(F,F.SIN),Xs=tt(F,F.COS),xN=tt(F,F.TAN),yN=tt(F,F.ASIN),vN=tt(F,F.ACOS),SN=tt(F,F.ATAN),gn=tt(F,F.ABS),uv=tt(F,F.SIGN),ir=tt(F,F.LENGTH),MN=tt(F,F.NEGATE),TN=tt(F,F.ONE_MINUS),dv=tt(F,F.DFDX),fv=tt(F,F.DFDY),bN=tt(F,F.ROUND),EN=tt(F,F.RECIPROCAL),AN=tt(F,F.TRUNC),wN=tt(F,F.FWIDTH);F.BITCAST;const RN=tt(F,F.TRANSPOSE),CN=tt(F,F.ATAN2),xl=tt(F,F.MIN),nn=tt(F,F.MAX),pv=tt(F,F.MOD),mv=tt(F,F.STEP),NN=tt(F,F.REFLECT),PN=tt(F,F.DISTANCE),DN=tt(F,F.DIFFERENCE),dm=tt(F,F.DOT),gv=tt(F,F.CROSS),Yh=tt(F,F.POW),_v=tt(F,F.POW,2),LN=tt(F,F.POW,3),FN=tt(F,F.POW,4),UN=tt(F,F.TRANSFORM_DIRECTION),IN=r=>Jt(uv(r),Yh(gn(r),1/3)),BN=r=>dm(r,r),Ce=tt(F,F.MIX),Ms=(r,t=0,e=1)=>at(new F(F.CLAMP,at(r),at(t),at(e))),ON=r=>Ms(r),xv=tt(F,F.REFRACT),Vr=tt(F,F.SMOOTHSTEP),zN=tt(F,F.FACEFORWARD),GN=pt(([r])=>{const i=43758.5453,n=dm(r.xy,gt(12.9898,78.233)),s=pv(n,dN);return cr(mn(s).mul(i))}),kN=(r,t,e)=>Ce(t,e,r),VN=(r,t,e)=>Vr(t,e,r);j("all",lv);j("any",fN);j("equals",pN);j("radians",mN);j("degrees",gN);j("exp",cv);j("exp2",gl);j("log",hv);j("log2",vs);j("sqrt",hm);j("inverseSqrt",_N);j("floor",Ir);j("ceil",um);j("normalize",_l);j("fract",cr);j("sin",mn);j("cos",Xs);j("tan",xN);j("asin",yN);j("acos",vN);j("atan",SN);j("abs",gn);j("sign",uv);j("length",ir);j("lengthSq",BN);j("negate",MN);j("oneMinus",TN);j("dFdx",dv);j("dFdy",fv);j("round",bN);j("reciprocal",EN);j("trunc",AN);j("fwidth",wN);j("atan2",CN);j("min",xl);j("max",nn);j("mod",pv);j("step",mv);j("reflect",NN);j("distance",PN);j("dot",dm);j("cross",gv);j("pow",Yh);j("pow2",_v);j("pow3",LN);j("pow4",FN);j("transformDirection",UN);j("mix",kN);j("clamp",Ms);j("refract",xv);j("smoothstep",VN);j("faceForward",zN);j("difference",DN);j("saturate",ON);j("cbrt",IN);j("transpose",RN);j("rand",GN);class HN extends Xt{static get type(){return"ConditionalNode"}constructor(t,e,i=null){super(),this.condNode=t,this.ifNode=e,this.elseNode=i}getNodeType(t){const e=this.ifNode.getNodeType(t);if(this.elseNode!==null){const i=this.elseNode.getNodeType(t);if(t.getTypeLength(i)>t.getTypeLength(e))return i}return e}setup(t){const e=this.condNode.cache(),i=this.ifNode.cache(),n=this.elseNode?this.elseNode.cache():null,s=t.context.nodeBlock;t.getDataFromNode(i).parentNodeBlock=s,n!==null&&(t.getDataFromNode(n).parentNodeBlock=s);const o=t.getNodeProperties(this);o.condNode=e,o.ifNode=i.context({nodeBlock:i}),o.elseNode=n?n.context({nodeBlock:n}):null}generate(t,e){const i=this.getNodeType(t),n=t.getDataFromNode(this);if(n.nodeProperty!==void 0)return n.nodeProperty;const{condNode:s,ifNode:o,elseNode:a}=t.getNodeProperties(this),l=e!=="void",c=l?Io(i).build(t):"";n.nodeProperty=c;const h=s.build(t,"bool");t.addFlowCode(`
${t.tab}if ( ${h} ) {

`).addFlowTab();let u=o.build(t,i);if(u&&(l?u=c+" = "+u+";":u="return "+u+";"),t.removeFlowTab().addFlowCode(t.tab+"	"+u+`

`+t.tab+"}"),a!==null){t.addFlowCode(` else {

`).addFlowTab();let d=a.build(t,i);d&&(l?d=c+" = "+d+";":d="return "+d+";"),t.removeFlowTab().addFlowCode(t.tab+"	"+d+`

`+t.tab+`}

`)}else t.addFlowCode(`

`);return t.format(c,i,e)}}const Pi=tt(HN);j("select",Pi);const WN=(...r)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),Pi(...r));j("cond",WN);class yv extends Xt{static get type(){return"ContextNode"}constructor(t,e={}){super(),this.isContextNode=!0,this.node=t,this.value=e}getScope(){return this.node.getScope()}getNodeType(t){return this.node.getNodeType(t)}analyze(t){this.node.build(t)}setup(t){const e=t.getContext();t.setContext({...t.context,...this.value});const i=this.node.build(t);return t.setContext(e),i}generate(t,e){const i=t.getContext();t.setContext({...t.context,...this.value});const n=this.node.build(t,e);return t.setContext(i),n}}const fm=tt(yv),$N=(r,t)=>fm(r,{label:t});j("context",fm);j("label",$N);class XN extends Xt{static get type(){return"VarNode"}constructor(t,e=null){super(),this.node=t,this.name=e,this.global=!0,this.isVarNode=!0}getHash(t){return this.name||super.getHash(t)}getNodeType(t){return this.node.getNodeType(t)}generate(t){const{node:e,name:i}=this,n=t.getVarFromNode(this,i,t.getVectorType(this.getNodeType(t))),s=t.getPropertyName(n),o=e.build(t,n.type);return t.addLineFlowCode(`${s} = ${o}`,this),s}}const vv=tt(XN);j("toVar",(...r)=>vv(...r).append());const qN=r=>(console.warn('TSL: "temp" is deprecated. Use ".toVar()" instead.'),vv(r));j("temp",qN);class YN extends Xt{static get type(){return"VaryingNode"}constructor(t,e=null){super(),this.node=t,this.name=e,this.isVaryingNode=!0}isGlobal(){return!0}getHash(t){return this.name||super.getHash(t)}getNodeType(t){return this.node.getNodeType(t)}setupVarying(t){const e=t.getNodeProperties(this);let i=e.varying;if(i===void 0){const n=this.name,s=this.getNodeType(t);e.varying=i=t.getVaryingFromNode(this,n,s),e.node=this.node}return i.needsInterpolation||(i.needsInterpolation=t.shaderStage==="fragment"),i}setup(t){this.setupVarying(t)}analyze(t){return this.setupVarying(t),this.node.analyze(t)}generate(t){const e=t.getNodeProperties(this),i=this.setupVarying(t);if(e.propertyName===void 0){const n=this.getNodeType(t),s=t.getPropertyName(i,N_.VERTEX);t.flowNodeFromShaderStage(N_.VERTEX,this.node,n,s),e.propertyName=s}return t.getPropertyName(i)}}const As=tt(YN);j("varying",As);const jN=pt(([r])=>{const t=r.mul(.9478672986).add(.0521327014).pow(2.4),e=r.mul(.0773993808),i=r.lessThanEqual(.04045);return Ce(t,e,i)}).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),KN=pt(([r])=>{const t=r.pow(.41666).mul(1.055).sub(.055),e=r.mul(12.92),i=r.lessThanEqual(.0031308);return Ce(t,e,i)}).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Ll="WorkingColorSpace",pm="OutputColorSpace";class jh extends je{static get type(){return"ColorSpaceNode"}constructor(t,e,i){super("vec4"),this.colorNode=t,this.source=e,this.target=i}resolveColorSpace(t,e){return e===Ll?We.workingColorSpace:e===pm?t.context.outputColorSpace||t.renderer.outputColorSpace:e}setup(t){const{colorNode:e}=this,i=this.resolveColorSpace(t,this.source),n=this.resolveColorSpace(t,this.target);let s=e;return We.enabled===!1||i===n||!i||!n||(We.getTransfer(i)===fl&&(s=Vt(jN(s.rgb),s.a)),We.getPrimaries(i)!==We.getPrimaries(n)&&(s=Vt(Ai(We._getMatrix(new Bi,i,n)).mul(s.rgb),s.a)),We.getTransfer(n)===fl&&(s=Vt(KN(s.rgb),s.a))),s}}const ZN=r=>at(new jh(at(r),Ll,pm)),QN=r=>at(new jh(at(r),pm,Ll)),JN=(r,t)=>at(new jh(at(r),Ll,t)),Sv=(r,t)=>at(new jh(at(r),t,Ll));j("toOutputColorSpace",ZN);j("toWorkingColorSpace",QN);j("workingToColorSpace",JN);j("colorSpaceToWorking",Sv);let tP=class extends Pl{static get type(){return"ReferenceElementNode"}constructor(t,e){super(t,e),this.referenceNode=t,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(t){const e=super.generate(t),i=this.referenceNode.getNodeType(),n=this.getNodeType();return t.format(e,i,n)}};class Mv extends Xt{static get type(){return"ReferenceBaseNode"}constructor(t,e,i=null,n=null){super(),this.property=t,this.uniformType=e,this.object=i,this.count=n,this.properties=t.split("."),this.reference=i,this.node=null,this.group=null,this.updateType=Zt.OBJECT}setGroup(t){return this.group=t,this}element(t){return at(new tP(this,at(t)))}setNodeType(t){const e=Ht(null,t).getSelf();this.group!==null&&e.setGroup(this.group),this.node=e}getNodeType(t){return this.node===null&&(this.updateReference(t),this.updateValue()),this.node.getNodeType(t)}getValueFromReference(t=this.reference){const{properties:e}=this;let i=t[e[0]];for(let n=1;n<e.length;n++)i=i[e[n]];return i}updateReference(t){return this.reference=this.object!==null?this.object:t.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const t=this.getValueFromReference();Array.isArray(t)?this.node.array=t:this.node.value=t}}const eP=(r,t,e)=>at(new Mv(r,t,e));class iP extends Mv{static get type(){return"RendererReferenceNode"}constructor(t,e,i=null){super(t,e,i),this.renderer=i,this.setGroup(ee)}updateReference(t){return this.reference=this.renderer!==null?this.renderer:t.renderer,this.reference}}const nP=(r,t,e)=>at(new iP(r,t,e));class sP extends je{static get type(){return"ToneMappingNode"}constructor(t,e=oP,i=null){super("vec3"),this.toneMapping=t,this.exposureNode=e,this.colorNode=i}getCacheKey(){return Eh(super.getCacheKey(),this.toneMapping)}setup(t){const e=this.colorNode||t.context.color,i=this.toneMapping;if(i===Ko)return e;let n=null;const s=t.renderer.library.getToneMappingFunction(i);return s!==null?n=Vt(s(e.rgb,this.exposureNode),e.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",i),n=e),n}}const rP=(r,t,e)=>at(new sP(r,at(t),at(e))),oP=nP("toneMappingExposure","float");j("toneMapping",(r,t,e)=>rP(t,e,r));class aP extends nm{static get type(){return"BufferAttributeNode"}constructor(t,e=null,i=0,n=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferStride=i,this.bufferOffset=n,this.usage=bh,this.instanced=!1,this.attribute=null,this.global=!0,t&&t.isBufferAttribute===!0&&(this.attribute=t,this.usage=t.usage,this.instanced=t.isInstancedBufferAttribute)}getHash(t){if(this.bufferStride===0&&this.bufferOffset===0){let e=t.globalCache.getData(this.value);return e===void 0&&(e={node:this},t.globalCache.setData(this.value,e)),e.node.uuid}return this.uuid}getNodeType(t){return this.bufferType===null&&(this.bufferType=t.getTypeFromAttribute(this.attribute)),this.bufferType}setup(t){if(this.attribute!==null)return;const e=this.getNodeType(t),i=this.value,n=t.getTypeLength(e),s=this.bufferStride||n,o=this.bufferOffset,a=i.isInterleavedBuffer===!0?i:new Py(i,s),l=new Zp(a,n,o);a.setUsage(this.usage),this.attribute=l,this.attribute.isInstancedBufferAttribute=this.instanced}generate(t){const e=this.getNodeType(t),i=t.getBufferAttributeFromNode(this,e),n=t.getPropertyName(i);let s=null;return t.shaderStage==="vertex"||t.shaderStage==="compute"?(this.name=n,s=n):s=As(this).build(t,e),s}getInputType(){return"bufferAttribute"}setUsage(t){return this.usage=t,this.attribute&&this.attribute.isBufferAttribute===!0&&(this.attribute.usage=t),this}setInstanced(t){return this.instanced=t,this}}const mm=(r,t,e,i)=>at(new aP(r,t,e,i)),lP=(r,t,e,i)=>mm(r,t,e,i).setUsage(Go),G_=(r,t,e,i)=>mm(r,t,e,i).setInstanced(!0),k_=(r,t,e,i)=>lP(r,t,e,i).setInstanced(!0);j("toAttribute",r=>mm(r.value));class cP extends Xt{static get type(){return"ComputeNode"}constructor(t,e,i=[64]){super("void"),this.isComputeNode=!0,this.computeNode=t,this.count=e,this.workgroupSize=i,this.dispatchCount=0,this.version=1,this.updateBeforeType=Zt.OBJECT,this.onInitFunction=null,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}updateDispatchCount(){const{count:t,workgroupSize:e}=this;let i=e[0];for(let n=1;n<e.length;n++)i*=e[n];this.dispatchCount=Math.ceil(t/i)}onInit(t){return this.onInitFunction=t,this}updateBefore({renderer:t}){t.compute(this)}generate(t){const{shaderStage:e}=t;if(e==="compute"){const i=this.computeNode.build(t,"void");i!==""&&t.addLineFlowCode(i,this)}}}const hP=(r,t,e)=>at(new cP(at(r),t,e));j("compute",hP);class uP extends Xt{static get type(){return"CacheNode"}constructor(t,e=!0){super(),this.node=t,this.parent=e,this.isCacheNode=!0}getNodeType(t){return this.node.getNodeType(t)}build(t,...e){const i=t.getCache(),n=t.getCacheFromNode(this,this.parent);t.setCache(n);const s=this.node.build(t,...e);return t.setCache(i),s}}const hh=(r,...t)=>at(new uP(at(r),...t));j("cache",hh);class dP extends Xt{static get type(){return"BypassNode"}constructor(t,e){super(),this.isBypassNode=!0,this.outputNode=t,this.callNode=e}getNodeType(t){return this.outputNode.getNodeType(t)}generate(t){const e=this.callNode.build(t,"void");return e!==""&&t.addLineFlowCode(e,this),this.outputNode.build(t)}}const fP=tt(dP);j("bypass",fP);class Tv extends Xt{static get type(){return"RemapNode"}constructor(t,e,i,n=Z(0),s=Z(1)){super(),this.node=t,this.inLowNode=e,this.inHighNode=i,this.outLowNode=n,this.outHighNode=s,this.doClamp=!0}setup(){const{node:t,inLowNode:e,inHighNode:i,outLowNode:n,outHighNode:s,doClamp:o}=this;let a=t.sub(e).div(i.sub(e));return o===!0&&(a=a.clamp()),a.mul(s.sub(n)).add(n)}}const pP=tt(Tv,null,null,{doClamp:!1}),mP=tt(Tv);j("remap",pP);j("remapClamp",mP);class gP extends Xt{static get type(){return"ExpressionNode"}constructor(t="",e="void"){super(e),this.snippet=t}generate(t,e){const i=this.getNodeType(t),n=this.snippet;if(i==="void")t.addLineFlowCode(n,this);else return t.format(`( ${n} )`,i,e)}}const yl=tt(gP),_P=r=>(r?Pi(r,yl("discard")):yl("discard")).append();j("discard",_P);class xP extends je{static get type(){return"RenderOutputNode"}constructor(t,e,i){super("vec4"),this.colorNode=t,this.toneMapping=e,this.outputColorSpace=i,this.isRenderOutput=!0}setup({context:t}){let e=this.colorNode||t.color;const i=(this.toneMapping!==null?this.toneMapping:t.toneMapping)||Ko,n=(this.outputColorSpace!==null?this.outputColorSpace:t.outputColorSpace)||zr;return i!==Ko&&(e=e.toneMapping(i)),n!==zr&&n!==We.workingColorSpace&&(e=e.workingToColorSpace(n)),e}}const yP=(r,t=null,e=null)=>at(new xP(at(r),t,e));j("renderOutput",yP);class vP extends Xt{static get type(){return"AttributeNode"}constructor(t,e=null){super(e),this.global=!0,this._attributeName=t}getHash(t){return this.getAttributeName(t)}getNodeType(t){let e=this.nodeType;if(e===null){const i=this.getAttributeName(t);if(t.hasGeometryAttribute(i)){const n=t.geometry.getAttribute(i);e=t.getTypeFromAttribute(n)}else e="float"}return e}setAttributeName(t){return this._attributeName=t,this}getAttributeName(){return this._attributeName}generate(t){const e=this.getAttributeName(t),i=this.getNodeType(t);if(t.hasGeometryAttribute(e)===!0){const s=t.geometry.getAttribute(e),o=t.getTypeFromAttribute(s),a=t.getAttribute(e,o);return t.shaderStage==="vertex"?t.format(a.name,o,i):As(this).build(t,i)}else return console.warn(`AttributeNode: Vertex attribute "${e}" not found on geometry.`),t.generateConst(i)}serialize(t){super.serialize(t),t.global=this.global,t._attributeName=this._attributeName}deserialize(t){super.deserialize(t),this.global=t.global,this._attributeName=t._attributeName}}const Ts=(r,t)=>at(new vP(r,t)),Kh=r=>Ts("uv"+(r>0?r:""),"vec2");class SP extends Xt{static get type(){return"TextureSizeNode"}constructor(t,e=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=t,this.levelNode=e}generate(t,e){const i=this.textureNode.build(t,"property"),n=this.levelNode===null?"0":this.levelNode.build(t,"int");return t.format(`${t.getMethod("textureDimensions")}( ${i}, ${n} )`,this.getNodeType(t),e)}}const ol=tt(SP);class MP extends Dl{static get type(){return"MaxMipLevelNode"}constructor(t){super(0),this._textureNode=t,this.updateType=Zt.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const t=this.texture,e=t.images,i=e&&e.length>0?e[0]&&e[0].image||e[0]:t.image;if(i&&i.width!==void 0){const{width:n,height:s}=i;this.value=Math.log2(Math.max(n,s))}}}const TP=tt(MP);class Fl extends Dl{static get type(){return"TextureNode"}constructor(t,e=null,i=null,n=null){super(t),this.isTextureNode=!0,this.uvNode=e,this.levelNode=i,this.biasNode=n,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=Zt.NONE,this.referenceNode=null,this._value=t,this._matrixUniform=null,this.setUpdateMatrix(e===null)}set value(t){this.referenceNode?this.referenceNode.value=t:this._value=t}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return this.value.isDepthTexture===!0?"float":this.value.type===ai?"uvec4":this.value.type===Ti?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return Kh(this.value.channel)}updateReference(){return this.value}getTransformedUV(t){return this._matrixUniform===null&&(this._matrixUniform=Ht(this.value.matrix)),this._matrixUniform.mul(K(t,1)).xy}setUpdateMatrix(t){return this.updateMatrix=t,this.updateType=t?Zt.FRAME:Zt.NONE,this}setupUV(t,e){const i=this.value;return t.isFlipY()&&(i.isRenderTargetTexture===!0||i.isFramebufferTexture===!0||i.isDepthTexture===!0)&&(this.sampler?e=e.flipY():e=e.setY(Oe(ol(this,this.levelNode).y).sub(e.y).sub(1))),e}setup(t){const e=t.getNodeProperties(this);e.referenceNode=this.referenceNode;let i=this.uvNode;(i===null||t.context.forceUVContext===!0)&&t.context.getUV&&(i=t.context.getUV(this)),i||(i=this.getDefaultUV()),this.updateMatrix===!0&&(i=this.getTransformedUV(i)),i=this.setupUV(t,i);let n=this.levelNode;n===null&&t.context.getTextureLevel&&(n=t.context.getTextureLevel(this)),e.uvNode=i,e.levelNode=n,e.biasNode=this.biasNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e.depthNode=this.depthNode}generateUV(t,e){return e.build(t,this.sampler===!0?"vec2":"ivec2")}generateSnippet(t,e,i,n,s,o,a,l){const c=this.value;let h;return n?h=t.generateTextureLevel(c,e,i,n,o):s?h=t.generateTextureBias(c,e,i,s,o):l?h=t.generateTextureGrad(c,e,i,l,o):a?h=t.generateTextureCompare(c,e,i,a,o):this.sampler===!1?h=t.generateTextureLoad(c,e,i,o):h=t.generateTexture(c,e,i,o),h}generate(t,e){const i=t.getNodeProperties(this),n=this.value;if(!n||n.isTexture!==!0)throw new Error("TextureNode: Need a three.js texture.");const s=super.generate(t,"property");if(e==="sampler")return s+"_sampler";if(t.isReference(e))return s;{const o=t.getDataFromNode(this);let a=o.propertyName;if(a===void 0){const{uvNode:h,levelNode:u,biasNode:d,compareNode:f,depthNode:p,gradNode:_}=i,g=this.generateUV(t,h),m=u?u.build(t,"float"):null,y=d?d.build(t,"float"):null,v=p?p.build(t,"int"):null,x=f?f.build(t,"float"):null,C=_?[_[0].build(t,"vec2"),_[1].build(t,"vec2")]:null,A=t.getVarFromNode(this);a=t.getPropertyName(A);const E=this.generateSnippet(t,s,g,m,y,v,x,C);t.addLineFlowCode(`${a} = ${E}`,this),o.snippet=E,o.propertyName=a}let l=a;const c=this.getNodeType(t);return t.needsToWorkingColorSpace(n)&&(l=Sv(yl(l,c),n.colorSpace).setup(t).build(t,c)),t.format(l,c,e)}}setSampler(t){return this.sampler=t,this}getSampler(){return this.sampler}uv(t){const e=this.clone();return e.uvNode=at(t),e.referenceNode=this.getSelf(),at(e)}blur(t){const e=this.clone();return e.biasNode=at(t).mul(TP(e)),e.referenceNode=this.getSelf(),at(e)}level(t){const e=this.clone();return e.levelNode=at(t),e.referenceNode=this.getSelf(),at(e)}size(t){return ol(this,t)}bias(t){const e=this.clone();return e.biasNode=at(t),e.referenceNode=this.getSelf(),at(e)}compare(t){const e=this.clone();return e.compareNode=at(t),e.referenceNode=this.getSelf(),at(e)}grad(t,e){const i=this.clone();return i.gradNode=[at(t),at(e)],i.referenceNode=this.getSelf(),at(i)}depth(t){const e=this.clone();return e.depthNode=at(t),e.referenceNode=this.getSelf(),at(e)}serialize(t){super.serialize(t),t.value=this.value.toJSON(t.meta).uuid,t.sampler=this.sampler,t.updateMatrix=this.updateMatrix,t.updateType=this.updateType}deserialize(t){super.deserialize(t),this.value=t.meta.textures[t.value],this.sampler=t.sampler,this.updateMatrix=t.updateMatrix,this.updateType=t.updateType}update(){const t=this.value,e=this._matrixUniform;e!==null&&(e.value=t.matrix),t.matrixAutoUpdate===!0&&t.updateMatrix()}clone(){const t=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return t.sampler=this.sampler,t}}const ze=tt(Fl),fn=(...r)=>ze(...r).setSampler(!1),Cr=Ht("float").label("cameraNear").setGroup(ee).onRenderUpdate(({camera:r})=>r.near),Nr=Ht("float").label("cameraFar").setGroup(ee).onRenderUpdate(({camera:r})=>r.far),Lh=Ht("mat4").label("cameraProjectionMatrix").setGroup(ee).onRenderUpdate(({camera:r})=>r.projectionMatrix),ws=Ht("mat4").label("cameraViewMatrix").setGroup(ee).onRenderUpdate(({camera:r})=>r.matrixWorldInverse),bP=Ht(new z).label("cameraPosition").setGroup(ee).onRenderUpdate(({camera:r},t)=>t.value.setFromMatrixPosition(r.matrixWorld));class de extends Xt{static get type(){return"Object3DNode"}constructor(t,e=null){super(),this.scope=t,this.object3d=e,this.updateType=Zt.OBJECT,this._uniformNode=new Dl(null)}getNodeType(){const t=this.scope;if(t===de.WORLD_MATRIX)return"mat4";if(t===de.POSITION||t===de.VIEW_POSITION||t===de.DIRECTION||t===de.SCALE)return"vec3"}update(t){const e=this.object3d,i=this._uniformNode,n=this.scope;if(n===de.WORLD_MATRIX)i.value=e.matrixWorld;else if(n===de.POSITION)i.value=i.value||new z,i.value.setFromMatrixPosition(e.matrixWorld);else if(n===de.SCALE)i.value=i.value||new z,i.value.setFromMatrixScale(e.matrixWorld);else if(n===de.DIRECTION)i.value=i.value||new z,e.getWorldDirection(i.value);else if(n===de.VIEW_POSITION){const s=t.camera;i.value=i.value||new z,i.value.setFromMatrixPosition(e.matrixWorld),i.value.applyMatrix4(s.matrixWorldInverse)}}generate(t){const e=this.scope;return e===de.WORLD_MATRIX?this._uniformNode.nodeType="mat4":(e===de.POSITION||e===de.VIEW_POSITION||e===de.DIRECTION||e===de.SCALE)&&(this._uniformNode.nodeType="vec3"),this._uniformNode.build(t)}serialize(t){super.serialize(t),t.scope=this.scope}deserialize(t){super.deserialize(t),this.scope=t.scope}}de.WORLD_MATRIX="worldMatrix";de.POSITION="position";de.SCALE="scale";de.VIEW_POSITION="viewPosition";de.DIRECTION="direction";de.DIRECTION;de.WORLD_MATRIX;de.POSITION;de.SCALE;de.VIEW_POSITION;class In extends de{static get type(){return"ModelNode"}constructor(t){super(t)}update(t){this.object3d=t.object,super.update(t)}}In.DIRECTION;const Hr=ut(In,In.WORLD_MATRIX);In.POSITION;In.SCALE;In.VIEW_POSITION;const EP=Ht(new Bi).onObjectUpdate(({object:r},t)=>t.value.getNormalMatrix(r.matrixWorld)),Zh=ws.mul(Hr).toVar("modelViewMatrix"),bv=Ts("position","vec3"),di=bv.varying("positionLocal"),V_=bv.varying("positionPrevious"),dp=Hr.mul(di).xyz.varying("v_positionWorld"),Ev=di.transformDirection(Hr).varying("v_positionWorldDirection").normalize().toVar("positionWorldDirection"),hi=Zh.mul(di).xyz.varying("v_positionView"),Ue=hi.negate().varying("v_positionViewDirection").normalize().toVar("positionViewDirection");class AP extends Xt{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(t){const{renderer:e,material:i}=t;return e.coordinateSystem===vn&&i.side===Tn?"false":t.getFrontFacing()}}const wP=ut(AP),Qh=Z(wP).mul(2).sub(1),Av=Ts("normal","vec3"),Bn=pt(r=>r.geometry.hasAttribute("normal")===!1?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),K(0,1,0)):Av,"vec3").once()().toVar("normalLocal"),RP=hi.dFdx().cross(hi.dFdy()).normalize().toVar("normalFlat"),En=pt(r=>{let t;return r.material.flatShading===!0?t=RP:t=As(Rv(Bn),"v_normalView").normalize(),t},"vec3").once()().toVar("normalView"),wv=As(En.transformDirection(ws),"v_normalWorld").normalize().toVar("normalWorld"),Xe=pt(r=>r.context.setupNormal(),"vec3").once()().mul(Qh).toVar("transformedNormalView"),gm=Xe.transformDirection(ws).toVar("transformedNormalWorld"),ja=pt(r=>r.context.setupClearcoatNormal(),"vec3").once()().mul(Qh).toVar("transformedClearcoatNormalView"),CP=pt(([r,t=Hr])=>{const e=Ai(t),i=r.div(K(e[0].dot(e[0]),e[1].dot(e[1]),e[2].dot(e[2])));return e.mul(i).xyz}),Rv=pt(([r],t)=>{const e=t.renderer.nodes.modelNormalViewMatrix;if(e!==null)return e.transformDirection(r);const i=EP.mul(r);return ws.transformDirection(i)}),NP=Ht(0).onReference(({material:r})=>r).onRenderUpdate(({material:r})=>r.refractionRatio),PP=Ue.negate().reflect(Xe),DP=Ue.negate().refract(Xe,NP),LP=PP.transformDirection(ws).toVar("reflectVector"),FP=DP.transformDirection(ws).toVar("reflectVector");class UP extends Fl{static get type(){return"CubeTextureNode"}constructor(t,e=null,i=null,n=null){super(t,e,i,n),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const t=this.value;return t.mapping===Or?LP:t.mapping===ha?FP:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',t.mapping),K(0,0,0))}setUpdateMatrix(){}setupUV(t,e){const i=this.value;return t.renderer.coordinateSystem===Gr||!i.isRenderTargetTexture?K(e.x.negate(),e.yz):e}generateUV(t,e){return e.build(t,"vec3")}}const vl=tt(UP);class Cv extends Dl{static get type(){return"BufferNode"}constructor(t,e,i=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferCount=i}getElementType(t){return this.getNodeType(t)}getInputType(){return"buffer"}}const _m=(r,t,e)=>at(new Cv(r,t,e));class IP extends Pl{static get type(){return"UniformArrayElementNode"}constructor(t,e){super(t,e),this.isArrayBufferElementNode=!0}generate(t){const e=super.generate(t),i=this.getNodeType();return t.format(e,"vec4",i)}}class BP extends Cv{static get type(){return"UniformArrayNode"}constructor(t,e=null){super(null,"vec4"),this.array=t,this.elementType=e,this._elementType=null,this._elementLength=0,this.updateType=Zt.RENDER,this.isArrayBufferNode=!0}getElementType(){return this.elementType||this._elementType}getElementLength(){return this._elementLength}update(){const{array:t,value:e}=this,i=this.getElementLength(),n=this.getElementType();if(i===1)for(let s=0;s<t.length;s++){const o=s*4;e[o]=t[s]}else if(n==="color")for(let s=0;s<t.length;s++){const o=s*4,a=t[s];e[o]=a.r,e[o+1]=a.g,e[o+2]=a.b||0}else for(let s=0;s<t.length;s++){const o=s*4,a=t[s];e[o]=a.x,e[o+1]=a.y,e[o+2]=a.z||0,e[o+3]=a.w||0}}setup(t){const e=this.array.length;this._elementType=this.elementType===null?wh(this.array[0]):this.elementType,this._elementLength=t.getTypeLength(this._elementType);let i=Float32Array;return this._elementType.charAt(0)==="i"?i=Int32Array:this._elementType.charAt(0)==="u"&&(i=Uint32Array),this.value=new i(e*4),this.bufferCount=e,this.bufferType=t.changeComponentType("vec4",t.getComponentType(this._elementType)),super.setup(t)}element(t){return at(new IP(this,at(t)))}}const Sl=(r,t)=>at(new BP(r,t));class OP extends Pl{static get type(){return"ReferenceElementNode"}constructor(t,e){super(t,e),this.referenceNode=t,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(t){const e=super.generate(t),i=this.referenceNode.getNodeType(),n=this.getNodeType();return t.format(e,i,n)}}class xm extends Xt{static get type(){return"ReferenceNode"}constructor(t,e,i=null,n=null){super(),this.property=t,this.uniformType=e,this.object=i,this.count=n,this.properties=t.split("."),this.reference=i,this.node=null,this.group=null,this.name=null,this.updateType=Zt.OBJECT}element(t){return at(new OP(this,at(t)))}setGroup(t){return this.group=t,this}label(t){return this.name=t,this}setNodeType(t){let e=null;this.count!==null?e=_m(null,t,this.count):Array.isArray(this.getValueFromReference())?e=Sl(null,t):t==="texture"?e=ze(null):t==="cubeTexture"?e=vl(null):e=Ht(null,t),this.group!==null&&e.setGroup(this.group),this.name!==null&&e.label(this.name),this.node=e.getSelf()}getNodeType(t){return this.node===null&&(this.updateReference(t),this.updateValue()),this.node.getNodeType(t)}getValueFromReference(t=this.reference){const{properties:e}=this;let i=t[e[0]];for(let n=1;n<e.length;n++)i=i[e[n]];return i}updateReference(t){return this.reference=this.object!==null?this.object:t.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const t=this.getValueFromReference();Array.isArray(t)?this.node.array=t:this.node.value=t}}const Ie=(r,t,e)=>at(new xm(r,t,e)),H_=(r,t,e,i)=>at(new xm(r,t,i,e));class zP extends xm{static get type(){return"MaterialReferenceNode"}constructor(t,e,i=null){super(t,e,i),this.material=i,this.isMaterialReferenceNode=!0}updateReference(t){return this.reference=this.material!==null?this.material:t.material,this.reference}}const js=(r,t,e)=>at(new zP(r,t,e)),Nv=pt(r=>(r.geometry.hasAttribute("tangent")===!1&&r.geometry.computeTangents(),Ts("tangent","vec4")))(),ym=Nv.xyz.toVar("tangentLocal"),Pv=Zh.mul(Vt(ym,0)).xyz.varying("v_tangentView").normalize().toVar("tangentView"),GP=r=>r.mul(Nv.w).xyz,kP=As(GP(En.cross(Pv)),"v_bitangentView").normalize().toVar("bitangentView"),Ka=Ai(Pv,kP,En),VP=(()=>{let r=ea.cross(Ue);return r=r.cross(ea).normalize(),r=Ce(r,Xe,Er.mul(ls.oneMinus()).oneMinus().pow2().pow2()).normalize(),r})(),HP=pt(r=>{const{eye_pos:t,surf_norm:e,mapN:i,uv:n}=r,s=t.dFdx(),o=t.dFdy(),a=n.dFdx(),l=n.dFdy(),c=e,h=o.cross(c),u=c.cross(s),d=h.mul(a.x).add(u.mul(l.x)),f=h.mul(a.y).add(u.mul(l.y)),p=d.dot(d).max(f.dot(f)),_=Qh.mul(p.inverseSqrt());return wi(d.mul(i.x,_),f.mul(i.y,_),c.mul(i.z)).normalize()});class WP extends je{static get type(){return"NormalMapNode"}constructor(t,e=null){super("vec3"),this.node=t,this.scaleNode=e,this.normalMapType=or}setup(t){const{normalMapType:e,scaleNode:i}=this;let n=this.node.mul(2).sub(1);i!==null&&(n=K(n.xy.mul(i),n.z));let s=null;return e===O1?s=Rv(n):e===or&&(t.hasGeometryAttribute("tangent")===!0?s=Ka.mul(n).normalize():s=HP({eye_pos:hi,surf_norm:En,mapN:n,uv:Kh()})),s}}const W_=tt(WP),$P=pt(({textureNode:r,bumpScale:t})=>{const e=n=>r.cache().context({getUV:s=>n(s.uvNode||Kh()),forceUVContext:!0}),i=Z(e(n=>n));return gt(Z(e(n=>n.add(n.dFdx()))).sub(i),Z(e(n=>n.add(n.dFdy()))).sub(i)).mul(t)}),XP=pt(r=>{const{surf_pos:t,surf_norm:e,dHdxy:i}=r,n=t.dFdx().normalize(),s=t.dFdy().normalize(),o=e,a=s.cross(o),l=o.cross(n),c=n.dot(a).mul(Qh),h=c.sign().mul(i.x.mul(a).add(i.y.mul(l)));return c.abs().mul(e).sub(h).normalize()});class qP extends je{static get type(){return"BumpMapNode"}constructor(t,e=null){super("vec3"),this.textureNode=t,this.scaleNode=e}setup(){const t=this.scaleNode!==null?this.scaleNode:1,e=$P({textureNode:this.textureNode,bumpScale:t});return XP({surf_pos:hi,surf_norm:En,dHdxy:e})}}const YP=tt(qP),$_=new Map;class X extends Xt{static get type(){return"MaterialNode"}constructor(t){super(),this.scope=t}getCache(t,e){let i=$_.get(t);return i===void 0&&(i=js(t,e),$_.set(t,i)),i}getFloat(t){return this.getCache(t,"float")}getColor(t){return this.getCache(t,"color")}getTexture(t){return this.getCache(t==="map"?"map":t+"Map","texture")}setup(t){const e=t.context.material,i=this.scope;let n=null;if(i===X.COLOR){const s=e.color!==void 0?this.getColor(i):K();e.map&&e.map.isTexture===!0?n=s.mul(this.getTexture("map")):n=s}else if(i===X.OPACITY){const s=this.getFloat(i);e.alphaMap&&e.alphaMap.isTexture===!0?n=s.mul(this.getTexture("alpha")):n=s}else if(i===X.SPECULAR_STRENGTH)e.specularMap&&e.specularMap.isTexture===!0?n=this.getTexture("specular").r:n=Z(1);else if(i===X.SPECULAR_INTENSITY){const s=this.getFloat(i);e.specularMap?n=s.mul(this.getTexture(i).a):n=s}else if(i===X.SPECULAR_COLOR){const s=this.getColor(i);e.specularColorMap&&e.specularColorMap.isTexture===!0?n=s.mul(this.getTexture(i).rgb):n=s}else if(i===X.ROUGHNESS){const s=this.getFloat(i);e.roughnessMap&&e.roughnessMap.isTexture===!0?n=s.mul(this.getTexture(i).g):n=s}else if(i===X.METALNESS){const s=this.getFloat(i);e.metalnessMap&&e.metalnessMap.isTexture===!0?n=s.mul(this.getTexture(i).b):n=s}else if(i===X.EMISSIVE){const s=this.getFloat("emissiveIntensity"),o=this.getColor(i).mul(s);e.emissiveMap&&e.emissiveMap.isTexture===!0?n=o.mul(this.getTexture(i)):n=o}else if(i===X.NORMAL)e.normalMap?(n=W_(this.getTexture("normal"),this.getCache("normalScale","vec2")),n.normalMapType=e.normalMapType):e.bumpMap?n=YP(this.getTexture("bump").r,this.getFloat("bumpScale")):n=En;else if(i===X.CLEARCOAT){const s=this.getFloat(i);e.clearcoatMap&&e.clearcoatMap.isTexture===!0?n=s.mul(this.getTexture(i).r):n=s}else if(i===X.CLEARCOAT_ROUGHNESS){const s=this.getFloat(i);e.clearcoatRoughnessMap&&e.clearcoatRoughnessMap.isTexture===!0?n=s.mul(this.getTexture(i).r):n=s}else if(i===X.CLEARCOAT_NORMAL)e.clearcoatNormalMap?n=W_(this.getTexture(i),this.getCache(i+"Scale","vec2")):n=En;else if(i===X.SHEEN){const s=this.getColor("sheenColor").mul(this.getFloat("sheen"));e.sheenColorMap&&e.sheenColorMap.isTexture===!0?n=s.mul(this.getTexture("sheenColor").rgb):n=s}else if(i===X.SHEEN_ROUGHNESS){const s=this.getFloat(i);e.sheenRoughnessMap&&e.sheenRoughnessMap.isTexture===!0?n=s.mul(this.getTexture(i).a):n=s,n=n.clamp(.07,1)}else if(i===X.ANISOTROPY)if(e.anisotropyMap&&e.anisotropyMap.isTexture===!0){const s=this.getTexture(i);n=am(za.x,za.y,za.y.negate(),za.x).mul(s.rg.mul(2).sub(gt(1)).normalize().mul(s.b))}else n=za;else if(i===X.IRIDESCENCE_THICKNESS){const s=Ie("1","float",e.iridescenceThicknessRange);if(e.iridescenceThicknessMap){const o=Ie("0","float",e.iridescenceThicknessRange);n=s.sub(o).mul(this.getTexture(i).g).add(o)}else n=s}else if(i===X.TRANSMISSION){const s=this.getFloat(i);e.transmissionMap?n=s.mul(this.getTexture(i).r):n=s}else if(i===X.THICKNESS){const s=this.getFloat(i);e.thicknessMap?n=s.mul(this.getTexture(i).g):n=s}else if(i===X.IOR)n=this.getFloat(i);else if(i===X.LIGHT_MAP)n=this.getTexture(i).rgb.mul(this.getFloat("lightMapIntensity"));else if(i===X.AO_MAP)n=this.getTexture(i).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const s=this.getNodeType(t);n=this.getCache(i,s)}return n}}X.ALPHA_TEST="alphaTest";X.COLOR="color";X.OPACITY="opacity";X.SHININESS="shininess";X.SPECULAR="specular";X.SPECULAR_STRENGTH="specularStrength";X.SPECULAR_INTENSITY="specularIntensity";X.SPECULAR_COLOR="specularColor";X.REFLECTIVITY="reflectivity";X.ROUGHNESS="roughness";X.METALNESS="metalness";X.NORMAL="normal";X.CLEARCOAT="clearcoat";X.CLEARCOAT_ROUGHNESS="clearcoatRoughness";X.CLEARCOAT_NORMAL="clearcoatNormal";X.EMISSIVE="emissive";X.ROTATION="rotation";X.SHEEN="sheen";X.SHEEN_ROUGHNESS="sheenRoughness";X.ANISOTROPY="anisotropy";X.IRIDESCENCE="iridescence";X.IRIDESCENCE_IOR="iridescenceIOR";X.IRIDESCENCE_THICKNESS="iridescenceThickness";X.IOR="ior";X.TRANSMISSION="transmission";X.THICKNESS="thickness";X.ATTENUATION_DISTANCE="attenuationDistance";X.ATTENUATION_COLOR="attenuationColor";X.LINE_SCALE="scale";X.LINE_DASH_SIZE="dashSize";X.LINE_GAP_SIZE="gapSize";X.LINE_WIDTH="linewidth";X.LINE_DASH_OFFSET="dashOffset";X.POINT_WIDTH="pointWidth";X.DISPERSION="dispersion";X.LIGHT_MAP="light";X.AO_MAP="ao";const jP=ut(X,X.ALPHA_TEST),KP=ut(X,X.COLOR),ZP=ut(X,X.SHININESS),QP=ut(X,X.EMISSIVE),Dv=ut(X,X.OPACITY),JP=ut(X,X.SPECULAR),X_=ut(X,X.SPECULAR_INTENSITY),tD=ut(X,X.SPECULAR_COLOR),uh=ut(X,X.SPECULAR_STRENGTH),fd=ut(X,X.REFLECTIVITY),eD=ut(X,X.ROUGHNESS),iD=ut(X,X.METALNESS),nD=ut(X,X.NORMAL).context({getUV:null}),sD=ut(X,X.CLEARCOAT),rD=ut(X,X.CLEARCOAT_ROUGHNESS),oD=ut(X,X.CLEARCOAT_NORMAL).context({getUV:null}),aD=ut(X,X.ROTATION),lD=ut(X,X.SHEEN),cD=ut(X,X.SHEEN_ROUGHNESS),hD=ut(X,X.ANISOTROPY),uD=ut(X,X.IRIDESCENCE),dD=ut(X,X.IRIDESCENCE_IOR),fD=ut(X,X.IRIDESCENCE_THICKNESS),pD=ut(X,X.TRANSMISSION),mD=ut(X,X.THICKNESS),gD=ut(X,X.IOR),_D=ut(X,X.ATTENUATION_DISTANCE),xD=ut(X,X.ATTENUATION_COLOR),yD=ut(X,X.LINE_SCALE),vD=ut(X,X.LINE_DASH_SIZE),SD=ut(X,X.LINE_GAP_SIZE);X.LINE_WIDTH;X.LINE_DASH_OFFSET;X.POINT_WIDTH;const MD=ut(X,X.DISPERSION),Lv=ut(X,X.LIGHT_MAP),TD=ut(X,X.AO_MAP),za=Ht(new oe).onReference(function(r){return r.material}).onRenderUpdate(function({material:r}){this.value.set(r.anisotropy*Math.cos(r.anisotropyRotation),r.anisotropy*Math.sin(r.anisotropyRotation))});class bD extends je{static get type(){return"ModelViewProjectionNode"}constructor(t=null){super("vec4"),this.positionNode=t}setup(t){if(t.shaderStage==="fragment")return As(t.context.mvp);const e=this.positionNode||di,i=t.renderer.nodes.modelViewMatrix||Zh;return Lh.mul(i).mul(e)}}const fp=tt(bD);class Ne extends Xt{static get type(){return"IndexNode"}constructor(t){super("uint"),this.scope=t,this.isInstanceIndexNode=!0}generate(t){const e=this.getNodeType(t),i=this.scope;let n;if(i===Ne.VERTEX)n=t.getVertexIndex();else if(i===Ne.INSTANCE)n=t.getInstanceIndex();else if(i===Ne.DRAW)n=t.getDrawIndex();else if(i===Ne.INVOCATION_LOCAL)n=t.getInvocationLocalIndex();else if(i===Ne.INVOCATION_SUBGROUP)n=t.getInvocationSubgroupIndex();else if(i===Ne.SUBGROUP)n=t.getSubgroupIndex();else throw new Error("THREE.IndexNode: Unknown scope: "+i);let s;return t.shaderStage==="vertex"||t.shaderStage==="compute"?s=n:s=As(this).build(t,e),s}}Ne.VERTEX="vertex";Ne.INSTANCE="instance";Ne.SUBGROUP="subgroup";Ne.INVOCATION_LOCAL="invocationLocal";Ne.INVOCATION_SUBGROUP="invocationSubgroup";Ne.DRAW="draw";const ED=ut(Ne,Ne.VERTEX),vm=ut(Ne,Ne.INSTANCE);Ne.SUBGROUP;Ne.INVOCATION_SUBGROUP;Ne.INVOCATION_LOCAL;const AD=ut(Ne,Ne.DRAW);class wD extends Xt{static get type(){return"InstanceNode"}constructor(t){super("void"),this.instanceMesh=t,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=Zt.FRAME,this.buffer=null,this.bufferColor=null}setup(t){let e=this.instanceMatrixNode,i=this.instanceColorNode;const n=this.instanceMesh;if(e===null){const a=n.instanceMatrix;if(n.count<=1e3)e=_m(a.array,"mat4",Math.max(n.count,1)).element(vm);else{const l=new nC(a.array,16,1);this.buffer=l;const c=a.usage===Go?k_:G_,h=[c(l,"vec4",16,0),c(l,"vec4",16,4),c(l,"vec4",16,8),c(l,"vec4",16,12)];e=ta(...h)}this.instanceMatrixNode=e}const s=n.instanceColor;if(s&&i===null){const a=new HR(s.array,3),l=s.usage===Go?k_:G_;this.bufferColor=a,i=K(l(a,"vec3",3,0)),this.instanceColorNode=i}const o=e.mul(di).xyz;if(di.assign(o),t.hasGeometryAttribute("normal")){const a=CP(Bn,e);Bn.assign(a)}this.instanceColorNode!==null&&Ch("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMesh.instanceMatrix.usage!==Go&&this.buffer!=null&&this.instanceMesh.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMesh.instanceMatrix.version),this.instanceMesh.instanceColor&&this.instanceMesh.instanceColor.usage!==Go&&this.bufferColor!=null&&this.instanceMesh.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceMesh.instanceColor.version)}}const RD=tt(wD);class CD extends Xt{static get type(){return"BatchNode"}constructor(t){super("void"),this.batchMesh=t,this.batchingIdNode=null}setup(t){this.batchingIdNode===null&&(t.getDrawIndex()===null?this.batchingIdNode=vm:this.batchingIdNode=AD);const i=pt(([p])=>{const _=ol(fn(this.batchMesh._indirectTexture),0),g=Oe(p).modInt(Oe(_)),m=Oe(p).div(Oe(_));return fn(this.batchMesh._indirectTexture,ns(g,m)).x}).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]})(Oe(this.batchingIdNode)),n=this.batchMesh._matricesTexture,s=ol(fn(n),0),o=Z(i).mul(4).toInt().toVar(),a=o.modInt(s),l=o.div(Oe(s)),c=ta(fn(n,ns(a,l)),fn(n,ns(a.add(1),l)),fn(n,ns(a.add(2),l)),fn(n,ns(a.add(3),l))),h=this.batchMesh._colorsTexture;if(h!==null){const _=pt(([g])=>{const m=ol(fn(h),0).x,y=g,v=y.modInt(m),x=y.div(m);return fn(h,ns(v,x)).rgb}).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]})(i);Ch("vec3","vBatchColor").assign(_)}const u=Ai(c);di.assign(c.mul(di));const d=Bn.div(K(u[0].dot(u[0]),u[1].dot(u[1]),u[2].dot(u[2]))),f=u.mul(d).xyz;Bn.assign(f),t.hasGeometryAttribute("tangent")&&ym.mulAssign(u)}}const ND=tt(CD),q_=new WeakMap;class PD extends Xt{static get type(){return"SkinningNode"}constructor(t,e=!1){super("void"),this.skinnedMesh=t,this.useReference=e,this.updateType=Zt.OBJECT,this.skinIndexNode=Ts("skinIndex","uvec4"),this.skinWeightNode=Ts("skinWeight","vec4");let i,n,s;e?(i=Ie("bindMatrix","mat4"),n=Ie("bindMatrixInverse","mat4"),s=H_("skeleton.boneMatrices","mat4",t.skeleton.bones.length)):(i=Ht(t.bindMatrix,"mat4"),n=Ht(t.bindMatrixInverse,"mat4"),s=_m(t.skeleton.boneMatrices,"mat4",t.skeleton.bones.length)),this.bindMatrixNode=i,this.bindMatrixInverseNode=n,this.boneMatricesNode=s,this.previousBoneMatricesNode=null}getSkinnedPosition(t=this.boneMatricesNode,e=di){const{skinIndexNode:i,skinWeightNode:n,bindMatrixNode:s,bindMatrixInverseNode:o}=this,a=t.element(i.x),l=t.element(i.y),c=t.element(i.z),h=t.element(i.w),u=s.mul(e),d=wi(a.mul(n.x).mul(u),l.mul(n.y).mul(u),c.mul(n.z).mul(u),h.mul(n.w).mul(u));return o.mul(d).xyz}getSkinnedNormal(t=this.boneMatricesNode,e=Bn){const{skinIndexNode:i,skinWeightNode:n,bindMatrixNode:s,bindMatrixInverseNode:o}=this,a=t.element(i.x),l=t.element(i.y),c=t.element(i.z),h=t.element(i.w);let u=wi(n.x.mul(a),n.y.mul(l),n.z.mul(c),n.w.mul(h));return u=o.mul(u).mul(s),u.transformDirection(e).xyz}getPreviousSkinnedPosition(t){const e=t.object;return this.previousBoneMatricesNode===null&&(e.skeleton.previousBoneMatrices=new Float32Array(e.skeleton.boneMatrices),this.previousBoneMatricesNode=H_("skeleton.previousBoneMatrices","mat4",e.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,V_)}needsPreviousBoneMatrices(t){const e=t.renderer.getMRT();return e&&e.has("velocity")}setup(t){this.needsPreviousBoneMatrices(t)&&V_.assign(this.getPreviousSkinnedPosition(t));const e=this.getSkinnedPosition();if(di.assign(e),t.hasGeometryAttribute("normal")){const i=this.getSkinnedNormal();Bn.assign(i),t.hasGeometryAttribute("tangent")&&ym.assign(i)}}generate(t,e){if(e!=="void")return di.build(t,e)}update(t){const i=(this.useReference?t.object:this.skinnedMesh).skeleton;q_.get(i)!==t.frameId&&(q_.set(i,t.frameId),this.previousBoneMatricesNode!==null&&i.previousBoneMatrices.set(i.boneMatrices),i.update())}}const DD=r=>at(new PD(r,!0));class LD extends Xt{static get type(){return"LoopNode"}constructor(t=[]){super(),this.params=t}getVarName(t){return String.fromCharCode(105+t)}getProperties(t){const e=t.getNodeProperties(this);if(e.stackNode!==void 0)return e;const i={};for(let s=0,o=this.params.length-1;s<o;s++){const a=this.params[s],l=a.isNode!==!0&&a.name||this.getVarName(s),c=a.isNode!==!0&&a.type||"int";i[l]=yl(l,c)}const n=t.addStack();return e.returnsNode=this.params[this.params.length-1](i,n,t),e.stackNode=n,t.removeStack(),e}getNodeType(t){const{returnsNode:e}=this.getProperties(t);return e?e.getNodeType(t):"void"}setup(t){this.getProperties(t)}generate(t){const e=this.getProperties(t),i=this.params,n=e.stackNode;for(let a=0,l=i.length-1;a<l;a++){const c=i[a];let h=null,u=null,d=null,f=null,p=null,_=null;c.isNode?(f="int",d=this.getVarName(a),h="0",u=c.build(t,f),p="<"):(f=c.type||"int",d=c.name||this.getVarName(a),h=c.start,u=c.end,p=c.condition,_=c.update,typeof h=="number"?h=t.generateConst(f,h):h&&h.isNode&&(h=h.build(t,f)),typeof u=="number"?u=t.generateConst(f,u):u&&u.isNode&&(u=u.build(t,f)),h!==void 0&&u===void 0?(h=h+" - 1",u="0",p=">="):u!==void 0&&h===void 0&&(h="0",p="<"),p===void 0&&(Number(h)>Number(u)?p=">=":p="<"));const g={start:h,end:u,condition:p},m=g.start,y=g.end;let v="",x="",C="";_||(f==="int"||f==="uint"?p.includes("<")?_="++":_="--":p.includes("<")?_="+= 1.":_="-= 1."),v+=t.getVar(f,d)+" = "+m,x+=d+" "+p+" "+y,C+=d+" "+_;const A=`for ( ${v}; ${x}; ${C} )`;t.addFlowCode((a===0?`
`:"")+t.tab+A+` {

`).addFlowTab()}const s=n.build(t,"void"),o=e.returnsNode?e.returnsNode.build(t):"";t.removeFlowTab().addFlowCode(`
`+t.tab+s);for(let a=0,l=this.params.length-1;a<l;a++)t.addFlowCode((a===0?"":t.tab)+`}

`).removeFlowTab();return t.addFlowTab(),o}}const Dn=(...r)=>at(new LD(Jo(r,"int"))).append(),FD=()=>yl("break").append(),pd=new WeakMap,Wi=new _e,Y_=pt(({bufferMap:r,influence:t,stride:e,width:i,depth:n,offset:s})=>{const o=Oe(ED).mul(e).add(s),a=o.div(i),l=o.sub(a.mul(i));return fn(r,ns(l,a)).depth(n).mul(t)});function UD(r){const t=r.morphAttributes.position!==void 0,e=r.morphAttributes.normal!==void 0,i=r.morphAttributes.color!==void 0,n=r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color,s=n!==void 0?n.length:0;let o=pd.get(r);if(o===void 0||o.count!==s){let m=function(){_.dispose(),pd.delete(r),r.removeEventListener("dispose",m)};o!==void 0&&o.texture.dispose();const a=r.morphAttributes.position||[],l=r.morphAttributes.normal||[],c=r.morphAttributes.color||[];let h=0;t===!0&&(h=1),e===!0&&(h=2),i===!0&&(h=3);let u=r.attributes.position.count*h,d=1;const f=4096;u>f&&(d=Math.ceil(u/f),u=f);const p=new Float32Array(u*d*4*s),_=new TR(p,u,d,s);_.type=qi,_.needsUpdate=!0;const g=h*4;for(let y=0;y<s;y++){const v=a[y],x=l[y],C=c[y],A=u*d*4*y;for(let E=0;E<v.count;E++){const w=E*g;t===!0&&(Wi.fromBufferAttribute(v,E),p[A+w+0]=Wi.x,p[A+w+1]=Wi.y,p[A+w+2]=Wi.z,p[A+w+3]=0),e===!0&&(Wi.fromBufferAttribute(x,E),p[A+w+4]=Wi.x,p[A+w+5]=Wi.y,p[A+w+6]=Wi.z,p[A+w+7]=0),i===!0&&(Wi.fromBufferAttribute(C,E),p[A+w+8]=Wi.x,p[A+w+9]=Wi.y,p[A+w+10]=Wi.z,p[A+w+11]=C.itemSize===4?Wi.w:1)}}o={count:s,texture:_,stride:h,size:new oe(u,d)},pd.set(r,o),r.addEventListener("dispose",m)}return o}class ID extends Xt{static get type(){return"MorphNode"}constructor(t){super("void"),this.mesh=t,this.morphBaseInfluence=Ht(1),this.updateType=Zt.OBJECT}setup(t){const{geometry:e}=t,i=e.morphAttributes.position!==void 0,n=e.hasAttribute("normal")&&e.morphAttributes.normal!==void 0,s=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,o=s!==void 0?s.length:0,{texture:a,stride:l,size:c}=UD(e);i===!0&&di.mulAssign(this.morphBaseInfluence),n===!0&&Bn.mulAssign(this.morphBaseInfluence);const h=Oe(c.width);Dn(o,({i:u})=>{const d=Z(0).toVar();this.mesh.count>1&&this.mesh.morphTexture!==null&&this.mesh.morphTexture!==void 0?d.assign(fn(this.mesh.morphTexture,ns(Oe(u).add(1),Oe(vm))).r):d.assign(Ie("morphTargetInfluences","float").element(u).toVar()),i===!0&&di.addAssign(Y_({bufferMap:a,influence:d,stride:l,width:h,depth:u,offset:Oe(0)})),n===!0&&Bn.addAssign(Y_({bufferMap:a,influence:d,stride:l,width:h,depth:u,offset:Oe(1)}))})}update(){const t=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?t.value=1:t.value=1-this.mesh.morphTargetInfluences.reduce((e,i)=>e+i,0)}}const BD=tt(ID);class Ta extends Xt{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}generate(){console.warn("Abstract function.")}}class OD extends Ta{static get type(){return"AONode"}constructor(t=null){super(),this.aoNode=t}setup(t){t.context.ambientOcclusion.mulAssign(this.aoNode)}}class zD extends yv{static get type(){return"LightingContextNode"}constructor(t,e=null,i=null,n=null){super(t),this.lightingModel=e,this.backdropNode=i,this.backdropAlphaNode=n,this._value=null}getContext(){const{backdropNode:t,backdropAlphaNode:e}=this,i=K().toVar("directDiffuse"),n=K().toVar("directSpecular"),s=K().toVar("indirectDiffuse"),o=K().toVar("indirectSpecular"),a={directDiffuse:i,directSpecular:n,indirectDiffuse:s,indirectSpecular:o};return{radiance:K().toVar("radiance"),irradiance:K().toVar("irradiance"),iblIrradiance:K().toVar("iblIrradiance"),ambientOcclusion:Z(1).toVar("ambientOcclusion"),reflectedLight:a,backdrop:t,backdropAlpha:e}}setup(t){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||t.context.lightingModel,super.setup(t)}}const GD=tt(zD);class kD extends Ta{static get type(){return"IrradianceNode"}constructor(t){super(),this.node=t}setup(t){t.context.irradiance.addAssign(this.node)}}let Ga,ka;class $e extends Xt{static get type(){return"ScreenNode"}constructor(t){super(),this.scope=t,this.isViewportNode=!0}getNodeType(){return this.scope===$e.VIEWPORT?"vec4":"vec2"}getUpdateType(){let t=Zt.NONE;return(this.scope===$e.SIZE||this.scope===$e.VIEWPORT)&&(t=Zt.RENDER),this.updateType=t,t}update({renderer:t}){const e=t.getRenderTarget();this.scope===$e.VIEWPORT?e!==null?ka.copy(e.viewport):(t.getViewport(ka),ka.multiplyScalar(t.getPixelRatio())):e!==null?(Ga.width=e.width,Ga.height=e.height):t.getDrawingBufferSize(Ga)}setup(){const t=this.scope;let e=null;return t===$e.SIZE?e=Ht(Ga||(Ga=new oe)):t===$e.VIEWPORT?e=Ht(ka||(ka=new _e)):e=gt(Jh.div(pp)),e}generate(t){if(this.scope===$e.COORDINATE){let e=t.getFragCoord();if(t.isFlipY()){const i=t.getNodeProperties(pp).outputNode.build(t);e=`${t.getType("vec2")}( ${e}.x, ${i}.y - ${e}.y )`}return e}return super.generate(t)}}$e.COORDINATE="coordinate";$e.VIEWPORT="viewport";$e.SIZE="size";$e.UV="uv";const Ml=ut($e,$e.UV),pp=ut($e,$e.SIZE),Jh=ut($e,$e.COORDINATE),Fv=ut($e,$e.VIEWPORT);Fv.zw;Fv.xy;const Va=new oe;class Uv extends Fl{static get type(){return"ViewportTextureNode"}constructor(t=Ml,e=null,i=null){i===null&&(i=new XR,i.minFilter=ms),super(i,t,e),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=Zt.FRAME}updateBefore(t){const e=t.renderer;e.getDrawingBufferSize(Va);const i=this.value;(i.image.width!==Va.width||i.image.height!==Va.height)&&(i.image.width=Va.width,i.image.height=Va.height,i.needsUpdate=!0);const n=i.generateMipmaps;i.generateMipmaps=this.generateMipmaps,e.copyFramebufferToTexture(i),i.generateMipmaps=n}clone(){const t=new this.constructor(this.uvNode,this.levelNode,this.value);return t.generateMipmaps=this.generateMipmaps,t}}const Iv=tt(Uv,null,null,{generateMipmaps:!0});let md=null;class VD extends Uv{static get type(){return"ViewportDepthTextureNode"}constructor(t=Ml,e=null){md===null&&(md=new Sa),super(t,e,md)}}const HD=tt(VD);class Di extends Xt{static get type(){return"ViewportDepthNode"}constructor(t,e=null){super("float"),this.scope=t,this.valueNode=e,this.isViewportDepthNode=!0}generate(t){const{scope:e}=this;return e===Di.DEPTH_BASE?t.getFragDepth():super.generate(t)}setup({camera:t}){const{scope:e}=this,i=this.valueNode;let n=null;if(e===Di.DEPTH_BASE)i!==null&&(n=zv().assign(i));else if(e===Di.DEPTH)t.isPerspectiveCamera?n=WD(hi.z,Cr,Nr):n=al(hi.z,Cr,Nr);else if(e===Di.LINEAR_DEPTH)if(i!==null)if(t.isPerspectiveCamera){const s=Bv(i,Cr,Nr);n=al(s,Cr,Nr)}else n=i;else n=al(hi.z,Cr,Nr);return n}}Di.DEPTH_BASE="depthBase";Di.DEPTH="depth";Di.LINEAR_DEPTH="linearDepth";const al=(r,t,e)=>r.add(t).div(t.sub(e)),WD=(r,t,e)=>t.add(r).mul(e).div(e.sub(t).mul(r)),Bv=(r,t,e)=>t.mul(e).div(e.sub(t).mul(r).sub(e)),Ov=(r,t,e)=>{t=t.max(1e-6).toVar();const i=vs(r.div(t).add(1)),n=vs(e.div(t).add(1));return i.div(n)},zv=tt(Di,Di.DEPTH_BASE),Gv=ut(Di,Di.DEPTH),$D=tt(Di,Di.LINEAR_DEPTH);HD();Gv.assign=r=>zv(r);class lr extends Xt{static get type(){return"ClippingNode"}constructor(t=lr.DEFAULT){super(),this.scope=t}setup(t){super.setup(t);const e=t.clippingContext,{localClipIntersection:i,localClippingCount:n,globalClippingCount:s}=e,o=s+n,a=i?o-n:o;return this.scope===lr.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(e.planes,o,a):this.setupDefault(e.planes,o,a)}setupAlphaToCoverage(t,e,i){return pt(()=>{const n=Sl(t),s=Io("float","distanceToPlane"),o=Io("float","distanceToGradient"),a=Io("float","clipOpacity");a.assign(1);let l;if(Dn(i,({i:c})=>{l=n.element(c),s.assign(hi.dot(l.xyz).negate().add(l.w)),o.assign(s.fwidth().div(2)),a.mulAssign(Vr(o.negate(),o,s)),a.equal(0).discard()}),i<e){const c=Io("float","unionclipOpacity");c.assign(1),Dn({start:i,end:e},({i:h})=>{l=n.element(h),s.assign(hi.dot(l.xyz).negate().add(l.w)),o.assign(s.fwidth().div(2)),c.mulAssign(Vr(o.negate(),o,s).oneMinus())}),a.mulAssign(c.oneMinus())}fe.a.mulAssign(a),fe.a.equal(0).discard()})()}setupDefault(t,e,i){return pt(()=>{const n=Sl(t);let s;if(Dn(i,({i:o})=>{s=n.element(o),hi.dot(s.xyz).greaterThan(s.w).discard()}),i<e){const o=Io("bool","clipped");o.assign(!0),Dn({start:i,end:e},({i:a})=>{s=n.element(a),o.assign(hi.dot(s.xyz).greaterThan(s.w).and(o))}),o.discard()}})()}}lr.ALPHA_TO_COVERAGE="alphaToCoverage";lr.DEFAULT="default";const XD=()=>at(new lr),qD=()=>at(new lr(lr.ALPHA_TO_COVERAGE)),YD=.05,j_=pt(([r])=>cr(Jt(1e4,mn(Jt(17,r.x).add(Jt(.1,r.y)))).mul(wi(.1,gn(mn(Jt(13,r.y).add(r.x))))))),K_=pt(([r])=>j_(gt(j_(r.xy),r.z))),jD=pt(([r])=>{const t=nn(ir(dv(r.xyz)),ir(fv(r.xyz))).toVar("maxDeriv"),e=Z(1).div(Z(YD).mul(t)).toVar("pixScale"),i=gt(gl(Ir(vs(e))),gl(um(vs(e)))).toVar("pixScales"),n=gt(K_(Ir(i.x.mul(r.xyz))),K_(Ir(i.y.mul(r.xyz)))).toVar("alpha"),s=cr(vs(e)).toVar("lerpFactor"),o=wi(Jt(s.oneMinus(),n.x),Jt(s,n.y)).toVar("x"),a=xl(s,s.oneMinus()).toVar("a"),l=K(o.mul(o).div(Jt(2,a).mul(Xi(1,a))),o.sub(Jt(.5,a)).div(Xi(1,a)),Xi(1,Xi(1,o).mul(Xi(1,o)).div(Jt(2,a).mul(Xi(1,a))))).toVar("cases"),c=o.lessThan(a.oneMinus()).select(o.lessThan(a).select(l.x,l.y),l.z);return Ms(c,1e-6,1)});class Ye extends Ii{static get type(){return"NodeMaterial"}constructor(){super(),this.isNodeMaterial=!0,this.type=this.constructor.type,this.forceSinglePass=!1,this.fog=!0,this.lights=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.positionNode=null,this.geometryNode=null,this.depthNode=null,this.shadowNode=null,this.shadowPositionNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null}customProgramCacheKey(){return this.type+$y(this)}build(t){this.setup(t)}setupObserver(t){return new rC(t)}setup(t){t.context.setupNormal=()=>this.setupNormal(t),t.addStack(),t.stack.outputNode=this.vertexNode||this.setupPosition(t),this.geometryNode!==null&&(t.stack.outputNode=t.stack.outputNode.bypass(this.geometryNode)),t.addFlow("vertex",t.removeStack()),t.addStack();let e;const i=this.setupClipping(t);if(this.depthWrite===!0&&this.setupDepth(t),this.fragmentNode===null){this.setupDiffuseColor(t),this.setupVariants(t);const n=this.setupLighting(t);i!==null&&t.stack.add(i);const s=Vt(n,fe.a).max(0);if(e=this.setupOutput(t,s),HC.assign(e),this.outputNode!==null&&(e=this.outputNode),t.renderer.getRenderTarget()!==null){const a=t.renderer.getMRT(),l=this.mrtNode;a!==null?(e=a,l!==null&&(e=a.merge(l))):l!==null&&(e=l)}}else{let n=this.fragmentNode;n.isOutputStructNode!==!0&&(n=Vt(n)),e=this.setupOutput(t,n)}t.stack.outputNode=e,t.addFlow("fragment",t.removeStack()),t.monitor=this.setupObserver(t)}setupClipping(t){if(t.clippingContext===null)return null;const{globalClippingCount:e,localClippingCount:i}=t.clippingContext;let n=null;if(e||i){const s=t.renderer.samples;this.alphaToCoverage&&s>1?n=qD():t.stack.add(XD())}return n}setupDepth(t){const{renderer:e,camera:i}=t;let n=this.depthNode;if(n===null){const s=e.getMRT();s&&s.has("depth")?n=s.get("depth"):e.logarithmicDepthBuffer===!0&&(i.isPerspectiveCamera?n=Ov(fp().w,Cr,Nr):n=al(hi.z,Cr,Nr))}n!==null&&Gv.assign(n).append()}setupPosition(t){const{object:e}=t,i=e.geometry;if(t.addStack(),(i.morphAttributes.position||i.morphAttributes.normal||i.morphAttributes.color)&&BD(e).append(),e.isSkinnedMesh===!0&&DD(e).append(),this.displacementMap){const s=js("displacementMap","texture"),o=js("displacementScale","float"),a=js("displacementBias","float");di.addAssign(Bn.normalize().mul(s.x.mul(o).add(a)))}e.isBatchedMesh&&ND(e).append(),e.instanceMatrix&&e.instanceMatrix.isInstancedBufferAttribute===!0&&RD(e).append(),this.positionNode!==null&&di.assign(this.positionNode);const n=fp();return t.context.vertex=t.removeStack(),t.context.mvp=n,n}setupDiffuseColor({object:t,geometry:e}){let i=this.colorNode?Vt(this.colorNode):KP;this.vertexColors===!0&&e.hasAttribute("color")&&(i=Vt(i.xyz.mul(Ts("color","vec3")),i.a)),t.instanceColor&&(i=Ch("vec3","vInstanceColor").mul(i)),t.isBatchedMesh&&t._colorsTexture&&(i=Ch("vec3","vBatchColor").mul(i)),fe.assign(i);const n=this.opacityNode?Z(this.opacityNode):Dv;if(fe.a.assign(fe.a.mul(n)),this.alphaTestNode!==null||this.alphaTest>0){const s=this.alphaTestNode!==null?Z(this.alphaTestNode):jP;fe.a.lessThanEqual(s).discard()}this.alphaHash===!0&&fe.a.lessThan(jD(di)).discard(),this.transparent===!1&&this.blending===Js&&this.alphaToCoverage===!1&&fe.a.assign(1)}setupVariants(){}setupOutgoingLight(){return this.lights===!0?K(0):fe.rgb}setupNormal(){return this.normalNode?K(this.normalNode):nD}setupEnvironment(){let t=null;return this.envNode?t=this.envNode:this.envMap&&(t=this.envMap.isCubeTexture?js("envMap","cubeTexture"):js("envMap","texture")),t}setupLightMap(t){let e=null;return t.material.lightMap&&(e=new kD(Lv)),e}setupLights(t){const e=[],i=this.setupEnvironment(t);i&&i.isLightingNode&&e.push(i);const n=this.setupLightMap(t);if(n&&n.isLightingNode&&e.push(n),this.aoNode!==null||t.material.aoMap){const o=this.aoNode!==null?this.aoNode:TD;e.push(new OD(o))}let s=this.lightsNode||t.lightsNode;return e.length>0&&(s=t.renderer.lighting.createNode([...s.getLights(),...e])),s}setupLightingModel(){}setupLighting(t){const{material:e}=t,{backdropNode:i,backdropAlphaNode:n,emissiveNode:s}=this,a=this.lights===!0||this.lightsNode!==null?this.setupLights(t):null;let l=this.setupOutgoingLight(t);if(a&&a.getScope().hasLights){const c=this.setupLightingModel(t);l=GD(a,c,i,n)}else i!==null&&(l=K(n!==null?Ce(l,i,n):i));return(s&&s.isNode===!0||e.emissive&&e.emissive.isColor===!0)&&(O_.assign(K(s||QP)),l=l.add(O_)),l}setupOutput(t,e){if(this.fog===!0){const i=t.fogNode;i&&(e=Vt(i.mix(e.rgb,i.colorNode),e.a))}return e}setDefaultValues(t){for(const i in t){const n=t[i];this[i]===void 0&&(this[i]=n,n&&n.clone&&(this[i]=n.clone()))}const e=Object.getOwnPropertyDescriptors(t.constructor.prototype);for(const i in e)Object.getOwnPropertyDescriptor(this.constructor.prototype,i)===void 0&&e[i].get!==void 0&&Object.defineProperty(this.constructor.prototype,i,e[i])}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{},nodes:{}});const i=Ii.prototype.toJSON.call(this,t),n=Ah(this);i.inputNodes={};for(const{property:o,childNode:a}of n)i.inputNodes[o]=a.toJSON(t).uuid;function s(o){const a=[];for(const l in o){const c=o[l];delete c.metadata,a.push(c)}return a}if(e){const o=s(t.textures),a=s(t.images),l=s(t.nodes);o.length>0&&(i.textures=o),a.length>0&&(i.images=a),l.length>0&&(i.nodes=l)}return i}copy(t){return this.lightsNode=t.lightsNode,this.envNode=t.envNode,this.colorNode=t.colorNode,this.normalNode=t.normalNode,this.opacityNode=t.opacityNode,this.backdropNode=t.backdropNode,this.backdropAlphaNode=t.backdropAlphaNode,this.alphaTestNode=t.alphaTestNode,this.positionNode=t.positionNode,this.geometryNode=t.geometryNode,this.depthNode=t.depthNode,this.shadowNode=t.shadowNode,this.shadowPositionNode=t.shadowPositionNode,this.outputNode=t.outputNode,this.mrtNode=t.mrtNode,this.fragmentNode=t.fragmentNode,this.vertexNode=t.vertexNode,super.copy(t)}}const KD=new Qp;class ZD extends Ye{static get type(){return"LineBasicNodeMaterial"}constructor(t){super(),this.isLineBasicNodeMaterial=!0,this.lights=!1,this.setDefaultValues(KD),this.setValues(t)}}const QD=new Vy;class JD extends Ye{static get type(){return"LineDashedNodeMaterial"}constructor(t){super(),this.isLineDashedNodeMaterial=!0,this.lights=!1,this.setDefaultValues(QD),this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(t)}setupVariants(){const t=this.offsetNode,e=this.dashScaleNode?Z(this.dashScaleNode):yD,i=this.dashSizeNode?Z(this.dashSizeNode):vD,n=this.dashSizeNode?Z(this.dashGapNode):SD;dd.assign(i),z_.assign(n);const s=As(Ts("lineDistance").mul(e));(t?s.add(t):s).mod(dd.add(z_)).greaterThan(dd).discard()}}const t2=r=>at(r).mul(.5).add(.5),e2=new zy;class i2 extends Ye{static get type(){return"MeshNormalNodeMaterial"}constructor(t){super(),this.lights=!1,this.isMeshNormalNodeMaterial=!0,this.setDefaultValues(e2),this.setValues(t)}setupDiffuseColor(){const t=this.opacityNode?Z(this.opacityNode):Dv;fe.assign(Vt(t2(Xe),t))}}class n2 extends je{static get type(){return"EquirectUVNode"}constructor(t=Ev){super("vec2"),this.dirNode=t}setup(){const t=this.dirNode,e=t.z.atan2(t.x).mul(1/(Math.PI*2)).add(.5),i=t.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return gt(e,i)}}const kv=tt(n2);class Vv extends kR{constructor(t=1,e={}){super(t,e),this.isCubeRenderTarget=!0}fromEquirectangularTexture(t,e){const i=e.minFilter,n=e.generateMipmaps;e.generateMipmaps=!0,this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const s=new Nl(5,5,5),o=kv(Ev),a=new Ye;a.colorNode=ze(e,o,0),a.side=Tn,a.blending=ca;const l=new kr(s,a),c=new Ny;c.add(l),e.minFilter===ms&&(e.minFilter=Yi);const h=new Cy(1,10,this),u=t.getMRT();return t.setMRT(null),h.update(t,c),t.setMRT(u),e.minFilter=i,e.currentGenerateMipmaps=n,l.geometry.dispose(),l.material.dispose(),this}}const ll=new WeakMap;class s2 extends je{static get type(){return"CubeMapNode"}constructor(t){super("vec3"),this.envNode=t,this._cubeTexture=null,this._cubeTextureNode=vl();const e=new Kp;e.isRenderTargetTexture=!0,this._defaultTexture=e,this.updateBeforeType=Zt.RENDER}updateBefore(t){const{renderer:e,material:i}=t,n=this.envNode;if(n.isTextureNode||n.isMaterialReferenceNode){const s=n.isTextureNode?n.value:i[n.property];if(s&&s.isTexture){const o=s.mapping;if(o===El||o===Al){if(ll.has(s)){const a=ll.get(s);Z_(a,s.mapping),this._cubeTexture=a}else{const a=s.image;if(r2(a)){const l=new Vv(a.height);l.fromEquirectangularTexture(e,s),Z_(l.texture,s.mapping),this._cubeTexture=l.texture,ll.set(s,l.texture),s.addEventListener("dispose",Hv)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(t){return this.updateBefore(t),this._cubeTextureNode}}function r2(r){return r==null?!1:r.height>0}function Hv(r){const t=r.target;t.removeEventListener("dispose",Hv);const e=ll.get(t);e!==void 0&&(ll.delete(t),e.dispose())}function Z_(r,t){t===El?r.mapping=Or:t===Al&&(r.mapping=ha)}const Wv=tt(s2);class Sm extends Ta{static get type(){return"BasicEnvironmentNode"}constructor(t=null){super(),this.envNode=t}setup(t){t.context.environment=Wv(this.envNode)}}class o2 extends Ta{static get type(){return"BasicLightMapNode"}constructor(t=null){super(),this.lightMapNode=t}setup(t){const e=Z(1/Math.PI);t.context.irradianceLightMap=this.lightMapNode.mul(e)}}class tu{start(){}finish(){}direct(){}directRectArea(){}indirect(){}ambientOcclusion(){}}class $v extends tu{constructor(){super()}indirect(t,e,i){const n=t.ambientOcclusion,s=t.reflectedLight,o=i.context.irradianceLightMap;s.indirectDiffuse.assign(Vt(0)),o?s.indirectDiffuse.addAssign(o):s.indirectDiffuse.addAssign(Vt(1,1,1,0)),s.indirectDiffuse.mulAssign(n),s.indirectDiffuse.mulAssign(fe.rgb)}finish(t,e,i){const n=i.material,s=t.outgoingLight,o=i.context.environment;if(o)switch(n.combine){case Hh:s.rgb.assign(Ce(s.rgb,s.rgb.mul(o.rgb),uh.mul(fd)));break;case T1:s.rgb.assign(Ce(s.rgb,o.rgb,uh.mul(fd)));break;case b1:s.rgb.addAssign(o.rgb.mul(uh.mul(fd)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",n.combine);break}}}const a2=new Wh;class l2 extends Ye{static get type(){return"MeshBasicNodeMaterial"}constructor(t){super(),this.isMeshBasicNodeMaterial=!0,this.lights=!0,this.setDefaultValues(a2),this.setValues(t)}setupNormal(){return En}setupEnvironment(t){const e=super.setupEnvironment(t);return e?new Sm(e):null}setupLightMap(t){let e=null;return t.material.lightMap&&(e=new o2(Lv)),e}setupOutgoingLight(){return fe.rgb}setupLightingModel(){return new $v}}const Tl=pt(({f0:r,f90:t,dotVH:e})=>{const i=e.mul(-5.55473).sub(6.98316).mul(e).exp2();return r.mul(i.oneMinus()).add(t.mul(i))}),fa=pt(r=>r.diffuseColor.mul(1/Math.PI)),c2=()=>Z(.25),h2=pt(({dotNH:r})=>hp.mul(Z(.5)).add(1).mul(Z(1/Math.PI)).mul(r.pow(hp))),u2=pt(({lightDirection:r})=>{const t=r.add(Ue).normalize(),e=Xe.dot(t).clamp(),i=Ue.dot(t).clamp(),n=Tl({f0:$i,f90:1,dotVH:i}),s=c2(),o=h2({dotNH:e});return n.mul(s).mul(o)});class Xv extends $v{constructor(t=!0){super(),this.specular=t}direct({lightDirection:t,lightColor:e,reflectedLight:i}){const s=Xe.dot(t).clamp().mul(e);i.directDiffuse.addAssign(s.mul(fa({diffuseColor:fe.rgb}))),this.specular===!0&&i.directSpecular.addAssign(s.mul(u2({lightDirection:t})).mul(uh))}indirect({ambientOcclusion:t,irradiance:e,reflectedLight:i}){i.indirectDiffuse.addAssign(e.mul(fa({diffuseColor:fe}))),i.indirectDiffuse.mulAssign(t)}}const d2=new Gy;class f2 extends Ye{static get type(){return"MeshLambertNodeMaterial"}constructor(t){super(),this.isMeshLambertNodeMaterial=!0,this.lights=!0,this.setDefaultValues(d2),this.setValues(t)}setupEnvironment(t){const e=super.setupEnvironment(t);return e?new Sm(e):null}setupLightingModel(){return new Xv(!1)}}const p2=new By;class m2 extends Ye{static get type(){return"MeshPhongNodeMaterial"}constructor(t){super(),this.isMeshPhongNodeMaterial=!0,this.lights=!0,this.shininessNode=null,this.specularNode=null,this.setDefaultValues(p2),this.setValues(t)}setupEnvironment(t){const e=super.setupEnvironment(t);return e?new Sm(e):null}setupLightingModel(){return new Xv}setupVariants(){const t=(this.shininessNode?Z(this.shininessNode):ZP).max(1e-4);hp.assign(t);const e=this.specularNode||JP;$i.assign(e)}copy(t){return this.shininessNode=t.shininessNode,this.specularNode=t.specularNode,super.copy(t)}}const g2=pt(r=>{if(r.geometry.hasAttribute("normal")===!1)return Z(0);const t=En.dFdx().abs().max(En.dFdy().abs());return t.x.max(t.y).max(t.z)}),qv=pt(r=>{const{roughness:t}=r,e=g2();let i=t.max(.0525);return i=i.add(e),i=i.min(1),i}),_2=pt(({alpha:r,dotNL:t,dotNV:e})=>{const i=r.pow2(),n=t.mul(i.add(i.oneMinus().mul(e.pow2())).sqrt()),s=e.mul(i.add(i.oneMinus().mul(t.pow2())).sqrt());return ar(.5,n.add(s).max(uN))}).setLayout({name:"V_GGX_SmithCorrelated",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNL",type:"float"},{name:"dotNV",type:"float"}]}),x2=pt(({alphaT:r,alphaB:t,dotTV:e,dotBV:i,dotTL:n,dotBL:s,dotNV:o,dotNL:a})=>{const l=a.mul(K(r.mul(e),t.mul(i),o).length()),c=o.mul(K(r.mul(n),t.mul(s),a).length());return ar(.5,l.add(c)).saturate()}).setLayout({name:"V_GGX_SmithCorrelated_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotTV",type:"float",qualifier:"in"},{name:"dotBV",type:"float",qualifier:"in"},{name:"dotTL",type:"float",qualifier:"in"},{name:"dotBL",type:"float",qualifier:"in"},{name:"dotNV",type:"float",qualifier:"in"},{name:"dotNL",type:"float",qualifier:"in"}]}),y2=pt(({alpha:r,dotNH:t})=>{const e=r.pow2(),i=t.pow2().mul(e.oneMinus()).oneMinus();return e.div(i.pow2()).mul(1/Math.PI)}).setLayout({name:"D_GGX",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNH",type:"float"}]}),v2=Z(1/Math.PI),S2=pt(({alphaT:r,alphaB:t,dotNH:e,dotTH:i,dotBH:n})=>{const s=r.mul(t),o=K(t.mul(i),r.mul(n),s.mul(e)),a=o.dot(o),l=s.div(a);return v2.mul(s.mul(l.pow2()))}).setLayout({name:"D_GGX_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotNH",type:"float",qualifier:"in"},{name:"dotTH",type:"float",qualifier:"in"},{name:"dotBH",type:"float",qualifier:"in"}]}),Q_=pt(r=>{const{lightDirection:t,f0:e,f90:i,roughness:n,f:s,USE_IRIDESCENCE:o,USE_ANISOTROPY:a}=r,l=r.normalView||Xe,c=n.pow2(),h=t.add(Ue).normalize(),u=l.dot(t).clamp(),d=l.dot(Ue).clamp(),f=l.dot(h).clamp(),p=Ue.dot(h).clamp();let _=Tl({f0:e,f90:i,dotVH:p}),g,m;if(B_(o)&&(_=cm.mix(_,s)),B_(a)){const y=lh.dot(t),v=lh.dot(Ue),x=lh.dot(h),C=ea.dot(t),A=ea.dot(Ue),E=ea.dot(h);g=x2({alphaT:cp,alphaB:c,dotTV:v,dotBV:A,dotTL:y,dotBL:C,dotNV:d,dotNL:u}),m=S2({alphaT:cp,alphaB:c,dotNH:f,dotTH:x,dotBH:E})}else g=_2({alpha:c,dotNL:u,dotNV:d}),m=y2({alpha:c,dotNH:f});return _.mul(g).mul(m)}),Yv=pt(({roughness:r,dotNV:t})=>{const e=Vt(-1,-.0275,-.572,.022),i=Vt(1,.0425,1.04,-.04),n=r.mul(e).add(i),s=n.x.mul(n.x).min(t.mul(-9.28).exp2()).mul(n.x).add(n.y);return gt(-1.04,1.04).mul(s).add(n.zw)}).setLayout({name:"DFGApprox",type:"vec2",inputs:[{name:"roughness",type:"float"},{name:"dotNV",type:"vec3"}]}),jv=pt(r=>{const{dotNV:t,specularColor:e,specularF90:i,roughness:n}=r,s=Yv({dotNV:t,roughness:n});return e.mul(s.x).add(i.mul(s.y))}),M2=pt(({f:r,f90:t,dotVH:e})=>{const i=e.oneMinus().saturate(),n=i.mul(i),s=i.mul(n,n).clamp(0,.9999);return r.sub(K(t).mul(s)).div(s.oneMinus())}).setLayout({name:"Schlick_to_F0",type:"vec3",inputs:[{name:"f",type:"vec3"},{name:"f90",type:"float"},{name:"dotVH",type:"float"}]}),T2=pt(({roughness:r,dotNH:t})=>{const e=r.pow2(),i=Z(1).div(e),s=t.pow2().oneMinus().max(.0078125);return Z(2).add(i).mul(s.pow(i.mul(.5))).div(2*Math.PI)}).setLayout({name:"D_Charlie",type:"float",inputs:[{name:"roughness",type:"float"},{name:"dotNH",type:"float"}]}),b2=pt(({dotNV:r,dotNL:t})=>Z(1).div(Z(4).mul(t.add(r).sub(t.mul(r))))).setLayout({name:"V_Neubelt",type:"float",inputs:[{name:"dotNV",type:"float"},{name:"dotNL",type:"float"}]}),E2=pt(({lightDirection:r})=>{const t=r.add(Ue).normalize(),e=Xe.dot(r).clamp(),i=Xe.dot(Ue).clamp(),n=Xe.dot(t).clamp(),s=T2({roughness:lm,dotNH:n}),o=b2({dotNV:i,dotNL:e});return Vo.mul(s).mul(o)}),A2=pt(({N:r,V:t,roughness:e})=>{const s=.0078125,o=r.dot(t).saturate(),a=gt(e,o.oneMinus().sqrt());return a.assign(a.mul(.984375).add(s)),a}).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),w2=pt(({f:r})=>{const t=r.length();return nn(t.mul(t).add(r.z).div(t.add(1)),0)}).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),Nc=pt(({v1:r,v2:t})=>{const e=r.dot(t),i=e.abs().toVar(),n=i.mul(.0145206).add(.4965155).mul(i).add(.8543985).toVar(),s=i.add(4.1616724).mul(i).add(3.417594).toVar(),o=n.div(s),a=e.greaterThan(0).select(o,nn(e.mul(e).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(o));return r.cross(t).mul(a)}).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),J_=pt(({N:r,V:t,P:e,mInv:i,p0:n,p1:s,p2:o,p3:a})=>{const l=s.sub(n).toVar(),c=a.sub(n).toVar(),h=l.cross(c),u=K().toVar();return ui(h.dot(e.sub(n)).greaterThanEqual(0),()=>{const d=t.sub(r.mul(t.dot(r))).normalize(),f=r.cross(d).negate(),p=i.mul(Ai(d,f,r).transpose()).toVar(),_=p.mul(n.sub(e)).normalize().toVar(),g=p.mul(s.sub(e)).normalize().toVar(),m=p.mul(o.sub(e)).normalize().toVar(),y=p.mul(a.sub(e)).normalize().toVar(),v=K(0).toVar();v.addAssign(Nc({v1:_,v2:g})),v.addAssign(Nc({v1:g,v2:m})),v.addAssign(Nc({v1:m,v2:y})),v.addAssign(Nc({v1:y,v2:_})),u.assign(K(w2({f:v})))}),u}).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),eu=1/6,Kv=r=>Jt(eu,Jt(r,Jt(r,r.negate().add(3)).sub(3)).add(1)),mp=r=>Jt(eu,Jt(r,Jt(r,Jt(3,r).sub(6))).add(4)),Zv=r=>Jt(eu,Jt(r,Jt(r,Jt(-3,r).add(3)).add(3)).add(1)),gp=r=>Jt(eu,Yh(r,3)),tx=r=>Kv(r).add(mp(r)),ex=r=>Zv(r).add(gp(r)),ix=r=>wi(-1,mp(r).div(Kv(r).add(mp(r)))),nx=r=>wi(1,gp(r).div(Zv(r).add(gp(r)))),sx=(r,t,e)=>{const i=r.uvNode,n=Jt(i,t.zw).add(.5),s=Ir(n),o=cr(n),a=tx(o.x),l=ex(o.x),c=ix(o.x),h=nx(o.x),u=ix(o.y),d=nx(o.y),f=gt(s.x.add(c),s.y.add(u)).sub(.5).mul(t.xy),p=gt(s.x.add(h),s.y.add(u)).sub(.5).mul(t.xy),_=gt(s.x.add(c),s.y.add(d)).sub(.5).mul(t.xy),g=gt(s.x.add(h),s.y.add(d)).sub(.5).mul(t.xy),m=tx(o.y).mul(wi(a.mul(r.uv(f).level(e)),l.mul(r.uv(p).level(e)))),y=ex(o.y).mul(wi(a.mul(r.uv(_).level(e)),l.mul(r.uv(g).level(e))));return m.add(y)},R2=pt(([r,t=Z(3)])=>{const e=gt(r.size(Oe(t))),i=gt(r.size(Oe(t.add(1)))),n=ar(1,e),s=ar(1,i),o=sx(r,Vt(n,e),Ir(t)),a=sx(r,Vt(s,i),um(t));return cr(t).mix(o,a)}),rx=pt(([r,t,e,i,n])=>{const s=K(xv(t.negate(),_l(r),ar(1,i))),o=K(ir(n[0].xyz),ir(n[1].xyz),ir(n[2].xyz));return _l(s).mul(e.mul(o))}).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),C2=pt(([r,t])=>r.mul(Ms(t.mul(2).sub(2),0,1))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),N2=Iv(),P2=Iv(),ox=pt(([r,t,e],{material:i})=>{const s=(i.side==Tn?N2:P2).uv(r),o=vs(pp.x).mul(C2(t,e));return R2(s,o)}),ax=pt(([r,t,e])=>(ui(e.notEqual(0),()=>{const i=hv(t).negate().div(e);return cv(i.negate().mul(r))}),K(1))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),D2=pt(([r,t,e,i,n,s,o,a,l,c,h,u,d,f,p])=>{let _,g;if(p){_=Vt().toVar(),g=K().toVar();const C=h.sub(1).mul(p.mul(.025)),A=K(h.sub(C),h,h.add(C));Dn({start:0,end:3},({i:E})=>{const w=A.element(E),T=rx(r,t,u,w,a),S=o.add(T),N=c.mul(l.mul(Vt(S,1))),G=gt(N.xy.div(N.w)).toVar();G.addAssign(1),G.divAssign(2),G.assign(gt(G.x,G.y.oneMinus()));const B=ox(G,e,w);_.element(E).assign(B.element(E)),_.a.addAssign(B.a),g.element(E).assign(i.element(E).mul(ax(ir(T),d,f).element(E)))}),_.a.divAssign(3)}else{const C=rx(r,t,u,h,a),A=o.add(C),E=c.mul(l.mul(Vt(A,1))),w=gt(E.xy.div(E.w)).toVar();w.addAssign(1),w.divAssign(2),w.assign(gt(w.x,w.y.oneMinus())),_=ox(w,e,h),g=i.mul(ax(ir(C),d,f))}const m=g.rgb.mul(_.rgb),y=r.dot(t).clamp(),v=K(jv({dotNV:y,specularColor:n,specularF90:s,roughness:e})),x=g.r.add(g.g,g.b).div(3);return Vt(v.oneMinus().mul(m),_.a.oneMinus().mul(x).oneMinus())}),L2=Ai(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),F2=r=>{const t=r.sqrt();return K(1).add(t).div(K(1).sub(t))},lx=(r,t)=>r.sub(t).div(r.add(t)).pow2(),U2=(r,t)=>{const e=r.mul(2*Math.PI*1e-9),i=K(54856e-17,44201e-17,52481e-17),n=K(1681e3,1795300,2208400),s=K(43278e5,93046e5,66121e5),o=Z(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(e.mul(2239900).add(t.x).cos()).mul(e.pow2().mul(-45282e5).exp());let a=i.mul(s.mul(2*Math.PI).sqrt()).mul(n.mul(e).add(t).cos()).mul(e.pow2().negate().mul(s).exp());return a=K(a.x.add(o),a.y,a.z).div(10685e-11),L2.mul(a)},I2=pt(({outsideIOR:r,eta2:t,cosTheta1:e,thinFilmThickness:i,baseF0:n})=>{const s=Ce(r,t,Vr(0,.03,i)),a=r.div(s).pow2().mul(e.pow2().oneMinus()).oneMinus();ui(a.lessThan(0),()=>K(1));const l=a.sqrt(),c=lx(s,r),h=Tl({f0:c,f90:1,dotVH:e}),u=h.oneMinus(),d=s.lessThan(r).select(Math.PI,0),f=Z(Math.PI).sub(d),p=F2(n.clamp(0,.9999)),_=lx(p,s.toVec3()),g=Tl({f0:_,f90:1,dotVH:l}),m=K(p.x.lessThan(s).select(Math.PI,0),p.y.lessThan(s).select(Math.PI,0),p.z.lessThan(s).select(Math.PI,0)),y=s.mul(i,l,2),v=K(f).add(m),x=h.mul(g).clamp(1e-5,.9999),C=x.sqrt(),A=u.pow2().mul(g).div(K(1).sub(x)),w=h.add(A).toVar(),T=A.sub(u).toVar();return Dn({start:1,end:2,condition:"<=",name:"m"},({m:S})=>{T.mulAssign(C);const N=U2(Z(S).mul(y),Z(S).mul(v)).mul(2);w.addAssign(T.mul(N))}),w.max(K(0))}).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),B2=pt(({normal:r,viewDir:t,roughness:e})=>{const i=r.dot(t).saturate(),n=e.pow2(),s=Pi(e.lessThan(.25),Z(-339.2).mul(n).add(Z(161.4).mul(e)).sub(25.9),Z(-8.48).mul(n).add(Z(14.3).mul(e)).sub(9.95)),o=Pi(e.lessThan(.25),Z(44).mul(n).sub(Z(23.7).mul(e)).add(3.26),Z(1.97).mul(n).sub(Z(3.27).mul(e)).add(.72));return Pi(e.lessThan(.25),0,Z(.1).mul(e).sub(.025)).add(s.mul(i).add(o).exp()).mul(1/Math.PI).saturate()}),gd=K(.04),_d=Z(1);class Qv extends tu{constructor(t=!1,e=!1,i=!1,n=!1,s=!1,o=!1){super(),this.clearcoat=t,this.sheen=e,this.iridescence=i,this.anisotropy=n,this.transmission=s,this.dispersion=o,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(t){if(this.clearcoat===!0&&(this.clearcoatRadiance=K().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=K().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=K().toVar("clearcoatSpecularIndirect")),this.sheen===!0&&(this.sheenSpecularDirect=K().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=K().toVar("sheenSpecularIndirect")),this.iridescence===!0){const e=Xe.dot(Ue).clamp();this.iridescenceFresnel=I2({outsideIOR:Z(1),eta2:ev,cosTheta1:e,thinFilmThickness:iv,baseF0:$i}),this.iridescenceF0=M2({f:this.iridescenceFresnel,f90:1,dotVH:e})}if(this.transmission===!0){const e=dp,i=bP.sub(dp).normalize(),n=gm;t.backdrop=D2(n,i,ls,fe,$i,Dh,e,Hr,ws,Lh,ch,nv,rv,sv,this.dispersion?ov:null),t.backdropAlpha=up,fe.a.mulAssign(Ce(1,t.backdrop.a,up))}}computeMultiscattering(t,e,i){const n=Xe.dot(Ue).clamp(),s=Yv({roughness:ls,dotNV:n}),a=(this.iridescenceF0?cm.mix($i,this.iridescenceF0):$i).mul(s.x).add(i.mul(s.y)),c=s.x.add(s.y).oneMinus(),h=$i.add($i.oneMinus().mul(.047619)),u=a.mul(h).div(c.mul(h).oneMinus());t.addAssign(a),e.addAssign(u.mul(c))}direct({lightDirection:t,lightColor:e,reflectedLight:i}){const s=Xe.dot(t).clamp().mul(e);if(this.sheen===!0&&this.sheenSpecularDirect.addAssign(s.mul(E2({lightDirection:t}))),this.clearcoat===!0){const a=ja.dot(t).clamp().mul(e);this.clearcoatSpecularDirect.addAssign(a.mul(Q_({lightDirection:t,f0:gd,f90:_d,roughness:Ph,normalView:ja})))}i.directDiffuse.addAssign(s.mul(fa({diffuseColor:fe.rgb}))),i.directSpecular.addAssign(s.mul(Q_({lightDirection:t,f0:$i,f90:1,roughness:ls,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:t,lightPosition:e,halfWidth:i,halfHeight:n,reflectedLight:s,ltc_1:o,ltc_2:a}){const l=e.add(i).sub(n),c=e.sub(i).sub(n),h=e.sub(i).add(n),u=e.add(i).add(n),d=Xe,f=Ue,p=hi.toVar(),_=A2({N:d,V:f,roughness:ls}),g=o.uv(_).toVar(),m=a.uv(_).toVar(),y=Ai(K(g.x,0,g.y),K(0,1,0),K(g.z,0,g.w)).toVar(),v=$i.mul(m.x).add($i.oneMinus().mul(m.y)).toVar();s.directSpecular.addAssign(t.mul(v).mul(J_({N:d,V:f,P:p,mInv:y,p0:l,p1:c,p2:h,p3:u}))),s.directDiffuse.addAssign(t.mul(fe).mul(J_({N:d,V:f,P:p,mInv:Ai(1,0,0,0,1,0,0,0,1),p0:l,p1:c,p2:h,p3:u})))}indirect(t,e,i){this.indirectDiffuse(t,e,i),this.indirectSpecular(t,e,i),this.ambientOcclusion(t,e,i)}indirectDiffuse({irradiance:t,reflectedLight:e}){e.indirectDiffuse.addAssign(t.mul(fa({diffuseColor:fe})))}indirectSpecular({radiance:t,iblIrradiance:e,reflectedLight:i}){if(this.sheen===!0&&this.sheenSpecularIndirect.addAssign(e.mul(Vo,B2({normal:Xe,viewDir:Ue,roughness:lm}))),this.clearcoat===!0){const c=ja.dot(Ue).clamp(),h=jv({dotNV:c,specularColor:gd,specularF90:_d,roughness:Ph});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(h))}const n=K().toVar("singleScattering"),s=K().toVar("multiScattering"),o=e.mul(1/Math.PI);this.computeMultiscattering(n,s,Dh);const a=n.add(s),l=fe.mul(a.r.max(a.g).max(a.b).oneMinus());i.indirectSpecular.addAssign(t.mul(n)),i.indirectSpecular.addAssign(s.mul(o)),i.indirectDiffuse.addAssign(l.mul(o))}ambientOcclusion({ambientOcclusion:t,reflectedLight:e}){const n=Xe.dot(Ue).clamp().add(t),s=ls.mul(-16).oneMinus().negate().exp2(),o=t.sub(n.pow(s).oneMinus()).clamp();this.clearcoat===!0&&this.clearcoatSpecularIndirect.mulAssign(t),this.sheen===!0&&this.sheenSpecularIndirect.mulAssign(t),e.indirectDiffuse.mulAssign(t),e.indirectSpecular.mulAssign(o)}finish(t){const{outgoingLight:e}=t;if(this.clearcoat===!0){const i=ja.dot(Ue).clamp(),n=Tl({dotVH:i,f0:gd,f90:_d}),s=e.mul(lp.mul(n).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(lp));e.assign(s)}if(this.sheen===!0){const i=Vo.r.max(Vo.g).max(Vo.b).mul(.157).oneMinus(),n=e.mul(i).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);e.assign(n)}}}const cx=Z(1),_p=Z(-2),Pc=Z(.8),xd=Z(-1),Dc=Z(.4),yd=Z(2),Lc=Z(.305),vd=Z(3),hx=Z(.21),O2=Z(4),ux=Z(4),z2=Z(16),G2=pt(([r])=>{const t=K(gn(r)).toVar(),e=Z(-1).toVar();return ui(t.x.greaterThan(t.z),()=>{ui(t.x.greaterThan(t.y),()=>{e.assign(Pi(r.x.greaterThan(0),0,3))}).Else(()=>{e.assign(Pi(r.y.greaterThan(0),1,4))})}).Else(()=>{ui(t.z.greaterThan(t.y),()=>{e.assign(Pi(r.z.greaterThan(0),2,5))}).Else(()=>{e.assign(Pi(r.y.greaterThan(0),1,4))})}),e}).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),k2=pt(([r,t])=>{const e=gt().toVar();return ui(t.equal(0),()=>{e.assign(gt(r.z,r.y).div(gn(r.x)))}).ElseIf(t.equal(1),()=>{e.assign(gt(r.x.negate(),r.z.negate()).div(gn(r.y)))}).ElseIf(t.equal(2),()=>{e.assign(gt(r.x.negate(),r.y).div(gn(r.z)))}).ElseIf(t.equal(3),()=>{e.assign(gt(r.z.negate(),r.y).div(gn(r.x)))}).ElseIf(t.equal(4),()=>{e.assign(gt(r.x.negate(),r.z).div(gn(r.y)))}).Else(()=>{e.assign(gt(r.x,r.y).div(gn(r.z)))}),Jt(.5,e.add(1))}).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),V2=pt(([r])=>{const t=Z(0).toVar();return ui(r.greaterThanEqual(Pc),()=>{t.assign(cx.sub(r).mul(xd.sub(_p)).div(cx.sub(Pc)).add(_p))}).ElseIf(r.greaterThanEqual(Dc),()=>{t.assign(Pc.sub(r).mul(yd.sub(xd)).div(Pc.sub(Dc)).add(xd))}).ElseIf(r.greaterThanEqual(Lc),()=>{t.assign(Dc.sub(r).mul(vd.sub(yd)).div(Dc.sub(Lc)).add(yd))}).ElseIf(r.greaterThanEqual(hx),()=>{t.assign(Lc.sub(r).mul(O2.sub(vd)).div(Lc.sub(hx)).add(vd))}).Else(()=>{t.assign(Z(-2).mul(vs(Jt(1.16,r))))}),t}).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),H2=pt(([r,t])=>{const e=r.toVar();e.assign(Jt(2,e).sub(1));const i=K(e,1).toVar();return ui(t.equal(0),()=>{i.assign(i.zyx)}).ElseIf(t.equal(1),()=>{i.assign(i.xzy),i.xz.mulAssign(-1)}).ElseIf(t.equal(2),()=>{i.x.mulAssign(-1)}).ElseIf(t.equal(3),()=>{i.assign(i.zyx),i.xz.mulAssign(-1)}).ElseIf(t.equal(4),()=>{i.assign(i.xzy),i.xy.mulAssign(-1)}).ElseIf(t.equal(5),()=>{i.z.mulAssign(-1)}),i}).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),W2=pt(([r,t,e,i,n,s])=>{const o=Z(e),a=K(t),l=Ms(V2(o),_p,s),c=cr(l),h=Ir(l),u=K(xp(r,a,h,i,n,s)).toVar();return ui(c.notEqual(0),()=>{const d=K(xp(r,a,h.add(1),i,n,s)).toVar();u.assign(Ce(u,d,c))}),u}),xp=pt(([r,t,e,i,n,s])=>{const o=Z(e).toVar(),a=K(t),l=Z(G2(a)).toVar(),c=Z(nn(ux.sub(o),0)).toVar();o.assign(nn(o,ux));const h=Z(gl(o)).toVar(),u=gt(k2(a,l).mul(h.sub(2)).add(1)).toVar();return ui(l.greaterThan(2),()=>{u.y.addAssign(h),l.subAssign(3)}),u.x.addAssign(l.mul(h)),u.x.addAssign(c.mul(Jt(3,z2))),u.y.addAssign(Jt(4,gl(s).sub(h))),u.x.mulAssign(i),u.y.mulAssign(n),r.uv(u).grad(gt(),gt())}),Sd=pt(({envMap:r,mipInt:t,outputDirection:e,theta:i,axis:n,CUBEUV_TEXEL_WIDTH:s,CUBEUV_TEXEL_HEIGHT:o,CUBEUV_MAX_MIP:a})=>{const l=Xs(i),c=e.mul(l).add(n.cross(e).mul(mn(i))).add(n.mul(n.dot(e).mul(l.oneMinus())));return xp(r,c,t,s,o,a)}),$2=pt(({n:r,latitudinal:t,poleAxis:e,outputDirection:i,weights:n,samples:s,dTheta:o,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:u})=>{const d=K(Pi(t,e,gv(e,i))).toVar();ui(lv(d.equals(K(0))),()=>{d.assign(K(i.z,0,i.x.negate()))}),d.assign(_l(d));const f=K().toVar();return f.addAssign(n.element(Oe(0)).mul(Sd({theta:0,axis:d,outputDirection:i,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:u}))),Dn({start:Oe(1),end:r},({i:p})=>{ui(p.greaterThanEqual(s),()=>{FD()});const _=Z(o.mul(Z(p))).toVar();f.addAssign(n.element(p).mul(Sd({theta:_.mul(-1),axis:d,outputDirection:i,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:u}))),f.addAssign(n.element(p).mul(Sd({theta:_,axis:d,outputDirection:i,mipInt:a,envMap:l,CUBEUV_TEXEL_WIDTH:c,CUBEUV_TEXEL_HEIGHT:h,CUBEUV_MAX_MIP:u})))}),Vt(f,1)});let Fh=null;const dx=new WeakMap;function X2(r){const t=Math.log2(r)-2,e=1/r;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:e,maxMip:t}}function q2(r){let t=dx.get(r);if((t!==void 0?t.pmremVersion:-1)!==r.pmremVersion){const i=r.image;if(r.isCubeTexture)if(j2(i))t=Fh.fromCubemap(r,t);else return null;else if(K2(i))t=Fh.fromEquirectangular(r,t);else return null;t.pmremVersion=r.pmremVersion,dx.set(r,t)}return t.texture}class Y2 extends je{static get type(){return"PMREMNode"}constructor(t,e=null,i=null){super("vec3"),this._value=t,this._pmrem=null,this.uvNode=e,this.levelNode=i,this._generator=null;const n=new Ei;n.isRenderTargetTexture=!0,this._texture=ze(n),this._width=Ht(0),this._height=Ht(0),this._maxMip=Ht(0),this.updateBeforeType=Zt.RENDER}set value(t){this._value=t,this._pmrem=null}get value(){return this._value}updateFromTexture(t){const e=X2(t.image.height);this._texture.value=t,this._width.value=e.texelWidth,this._height.value=e.texelHeight,this._maxMip.value=e.maxMip}updateBefore(){let t=this._pmrem;const e=t?t.pmremVersion:-1,i=this._value;e!==i.pmremVersion&&(i.isPMREMTexture===!0?t=i:t=q2(i),t!==null&&(this._pmrem=t,this.updateFromTexture(t)))}setup(t){Fh===null&&(Fh=t.createPMREMGenerator()),this.updateBefore(t);let e=this.uvNode;e===null&&t.context.getUV&&(e=t.context.getUV(this));const i=this.value;t.renderer.coordinateSystem===vn&&i.isPMREMTexture!==!0&&i.isRenderTargetTexture===!0&&(e=K(e.x.negate(),e.yz));let n=this.levelNode;return n===null&&t.context.getTextureLevel&&(n=t.context.getTextureLevel(this)),W2(this._texture,e,n,this._width,this._height,this._maxMip)}}function j2(r){if(r==null)return!1;let t=0;const e=6;for(let i=0;i<e;i++)r[i]!==void 0&&t++;return t===e}function K2(r){return r==null?!1:r.height>0}const Jv=tt(Y2),fx=new WeakMap;class Z2 extends Ta{static get type(){return"EnvironmentNode"}constructor(t=null){super(),this.envNode=t}setup(t){const{material:e}=t;let i=this.envNode;if(i.isTextureNode||i.isMaterialReferenceNode){const f=i.isTextureNode?i.value:e[i.property];let p=fx.get(f);p===void 0&&(p=Jv(f),fx.set(f,p)),i=p}const s=e.envMap?Ie("envMapIntensity","float",t.material):Ie("environmentIntensity","float",t.scene),a=e.useAnisotropy===!0||e.anisotropy>0?VP:Xe,l=i.context(px(ls,a)).mul(s),c=i.context(Q2(gm)).mul(Math.PI).mul(s),h=hh(l),u=hh(c);t.context.radiance.addAssign(h),t.context.iblIrradiance.addAssign(u);const d=t.context.lightingModel.clearcoatRadiance;if(d){const f=i.context(px(Ph,ja)).mul(s),p=hh(f);d.addAssign(p)}}}const px=(r,t)=>{let e=null;return{getUV:()=>(e===null&&(e=Ue.negate().reflect(t),e=r.mul(r).mix(e,t).normalize(),e=e.transformDirection(ws)),e),getTextureLevel:()=>r}},Q2=r=>({getUV:()=>r,getTextureLevel:()=>Z(1)}),J2=new tm;class tS extends Ye{static get type(){return"MeshStandardNodeMaterial"}constructor(t){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(J2),this.setValues(t)}setupEnvironment(t){let e=super.setupEnvironment(t);return e===null&&t.environmentNode&&(e=t.environmentNode),e?new Z2(e):null}setupLightingModel(){return new Qv}setupSpecular(){const t=Ce(K(.04),fe.rgb,Nh);$i.assign(t),Dh.assign(1)}setupVariants(){const t=this.metalnessNode?Z(this.metalnessNode):iD;Nh.assign(t);let e=this.roughnessNode?Z(this.roughnessNode):eD;e=qv({roughness:e}),ls.assign(e),this.setupSpecular(),fe.assign(Vt(fe.rgb.mul(t.oneMinus()),fe.a))}copy(t){return this.emissiveNode=t.emissiveNode,this.metalnessNode=t.metalnessNode,this.roughnessNode=t.roughnessNode,super.copy(t)}}const tL=new Iy;class eL extends tS{static get type(){return"MeshPhysicalNodeMaterial"}constructor(t){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues(tL),this.setValues(t)}get useClearcoat(){return this.clearcoat>0||this.clearcoatNode!==null}get useIridescence(){return this.iridescence>0||this.iridescenceNode!==null}get useSheen(){return this.sheen>0||this.sheenNode!==null}get useAnisotropy(){return this.anisotropy>0||this.anisotropyNode!==null}get useTransmission(){return this.transmission>0||this.transmissionNode!==null}get useDispersion(){return this.dispersion>0||this.dispersionNode!==null}setupSpecular(){const t=this.iorNode?Z(this.iorNode):gD;ch.assign(t),$i.assign(Ce(xl(_v(ch.sub(1).div(ch.add(1))).mul(tD),K(1)).mul(X_),fe.rgb,Nh)),Dh.assign(Ce(X_,1,Nh))}setupLightingModel(){return new Qv(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(t){if(super.setupVariants(t),this.useClearcoat){const e=this.clearcoatNode?Z(this.clearcoatNode):sD,i=this.clearcoatRoughnessNode?Z(this.clearcoatRoughnessNode):rD;lp.assign(e),Ph.assign(qv({roughness:i}))}if(this.useSheen){const e=this.sheenNode?K(this.sheenNode):lD,i=this.sheenRoughnessNode?Z(this.sheenRoughnessNode):cD;Vo.assign(e),lm.assign(i)}if(this.useIridescence){const e=this.iridescenceNode?Z(this.iridescenceNode):uD,i=this.iridescenceIORNode?Z(this.iridescenceIORNode):dD,n=this.iridescenceThicknessNode?Z(this.iridescenceThicknessNode):fD;cm.assign(e),ev.assign(i),iv.assign(n)}if(this.useAnisotropy){const e=(this.anisotropyNode?gt(this.anisotropyNode):hD).toVar();Er.assign(e.length()),ui(Er.equal(0),()=>{e.assign(gt(1,0))}).Else(()=>{e.divAssign(gt(Er)),Er.assign(Er.saturate())}),cp.assign(Er.pow2().mix(ls.pow2(),1)),lh.assign(Ka[0].mul(e.x).add(Ka[1].mul(e.y))),ea.assign(Ka[1].mul(e.x).sub(Ka[0].mul(e.y)))}if(this.useTransmission){const e=this.transmissionNode?Z(this.transmissionNode):pD,i=this.thicknessNode?Z(this.thicknessNode):mD,n=this.attenuationDistanceNode?Z(this.attenuationDistanceNode):_D,s=this.attenuationColorNode?K(this.attenuationColorNode):xD;if(up.assign(e),nv.assign(i),sv.assign(n),rv.assign(s),this.useDispersion){const o=this.dispersionNode?Z(this.dispersionNode):MD;ov.assign(o)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?K(this.clearcoatNormalNode):oD}setup(t){t.context.setupClearcoatNormal=()=>this.setupClearcoatNormal(t),super.setup(t)}copy(t){return this.clearcoatNode=t.clearcoatNode,this.clearcoatRoughnessNode=t.clearcoatRoughnessNode,this.clearcoatNormalNode=t.clearcoatNormalNode,this.sheenNode=t.sheenNode,this.sheenRoughnessNode=t.sheenRoughnessNode,this.iridescenceNode=t.iridescenceNode,this.iridescenceIORNode=t.iridescenceIORNode,this.iridescenceThicknessNode=t.iridescenceThicknessNode,this.specularIntensityNode=t.specularIntensityNode,this.specularColorNode=t.specularColorNode,this.transmissionNode=t.transmissionNode,this.thicknessNode=t.thicknessNode,this.attenuationDistanceNode=t.attenuationDistanceNode,this.attenuationColorNode=t.attenuationColorNode,this.dispersionNode=t.dispersionNode,this.anisotropyNode=t.anisotropyNode,super.copy(t)}}const iL=pt(({normal:r,lightDirection:t,builder:e})=>{const i=r.dot(t),n=gt(i.mul(.5).add(.5),0);if(e.material.gradientMap){const s=js("gradientMap","texture").context({getUV:()=>n});return K(s.r)}else{const s=n.fwidth().mul(.5);return Ce(K(.7),K(1),Vr(Z(.7).sub(s.x),Z(.7).add(s.x),n.x))}});class nL extends tu{direct({lightDirection:t,lightColor:e,reflectedLight:i},n,s){const o=iL({normal:Av,lightDirection:t,builder:s}).mul(e);i.directDiffuse.addAssign(o.mul(fa({diffuseColor:fe.rgb})))}indirect({ambientOcclusion:t,irradiance:e,reflectedLight:i}){i.indirectDiffuse.addAssign(e.mul(fa({diffuseColor:fe}))),i.indirectDiffuse.mulAssign(t)}}const sL=new Oy;class rL extends Ye{static get type(){return"MeshToonNodeMaterial"}constructor(t){super(),this.isMeshToonNodeMaterial=!0,this.lights=!0,this.setDefaultValues(sL),this.setValues(t)}setupLightingModel(){return new nL}}class oL extends je{static get type(){return"MatcapUVNode"}constructor(){super("vec2")}setup(){const t=K(Ue.z,0,Ue.x.negate()).normalize(),e=Ue.cross(t);return gt(t.dot(Xe),e.dot(Xe)).mul(.495).add(.5)}}const aL=ut(oL),lL=new ky;class cL extends Ye{static get type(){return"MeshMatcapNodeMaterial"}constructor(t){super(),this.lights=!1,this.isMeshMatcapNodeMaterial=!0,this.setDefaultValues(lL),this.setValues(t)}setupVariants(t){const e=aL;let i;t.material.matcap?i=js("matcap","texture").context({getUV:()=>e}):i=K(Ce(.2,.8,e.y)),fe.rgb.mulAssign(i.rgb)}}const hL=new Fy;class uL extends Ye{static get type(){return"PointsNodeMaterial"}constructor(t){super(),this.isPointsNodeMaterial=!0,this.lights=!1,this.transparent=!0,this.sizeNode=null,this.setDefaultValues(hL),this.setValues(t)}copy(t){return this.sizeNode=t.sizeNode,super.copy(t)}}class dL extends je{static get type(){return"RotateNode"}constructor(t,e){super(),this.positionNode=t,this.rotationNode=e}getNodeType(t){return this.positionNode.getNodeType(t)}setup(t){const{rotationNode:e,positionNode:i}=this;if(this.getNodeType(t)==="vec2"){const s=e.cos(),o=e.sin();return am(s,o,o.negate(),s).mul(i)}else{const s=e,o=ta(Vt(1,0,0,0),Vt(0,Xs(s.x),mn(s.x).negate(),0),Vt(0,mn(s.x),Xs(s.x),0),Vt(0,0,0,1)),a=ta(Vt(Xs(s.y),0,mn(s.y),0),Vt(0,1,0,0),Vt(mn(s.y).negate(),0,Xs(s.y),0),Vt(0,0,0,1)),l=ta(Vt(Xs(s.z),mn(s.z).negate(),0,0),Vt(mn(s.z),Xs(s.z),0,0),Vt(0,0,1,0),Vt(0,0,0,1));return o.mul(a).mul(l).mul(Vt(i,1)).xyz}}}const fL=tt(dL),pL=new Dy;class mL extends Ye{static get type(){return"SpriteNodeMaterial"}constructor(t){super(),this.isSpriteNodeMaterial=!0,this.lights=!1,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.setDefaultValues(pL),this.setValues(t)}setupPosition({object:t,camera:e,context:i}){const n=this.sizeAttenuation,{positionNode:s,rotationNode:o,scaleNode:a}=this,l=di;let c=Zh.mul(K(s||0)),h=gt(Hr[0].xyz.length(),Hr[1].xyz.length());if(a!==null&&(h=h.mul(a)),!n)if(e.isPerspectiveCamera)h=h.mul(c.z.negate());else{const _=Z(2).div(Lh.element(1).element(1));h=h.mul(_.mul(2))}let u=l.xy;if(t.center&&t.center.isVector2===!0){const _=eP("center","vec2");u=u.sub(_.sub(.5))}u=u.mul(h);const d=Z(o||aD),f=fL(u,d);c=Vt(c.xy.add(f),c.zw);const p=Lh.mul(c);return i.vertex=l,p}copy(t){return this.positionNode=t.positionNode,this.rotationNode=t.rotationNode,this.scaleNode=t.scaleNode,super.copy(t)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(t){this._useSizeAttenuation!==t&&(this._useSizeAttenuation=t,this.needsUpdate=!0)}}class gL extends tu{constructor(){super(),this.shadowNode=Z(1).toVar("shadowMask")}direct({shadowMask:t}){this.shadowNode.mulAssign(t)}finish(t){fe.a.mulAssign(this.shadowNode.oneMinus()),t.outgoingLight.rgb.assign(fe.rgb)}}const _L=new Uy;class xL extends Ye{static get type(){return"ShadowNodeMaterial"}constructor(t){super(),this.isShadowNodeMaterial=!0,this.lights=!0,this.setDefaultValues(_L),this.setValues(t)}setupLightingModel(){return new gL}}pt(({texture:r,uv:t})=>{const i=K().toVar();return ui(t.x.lessThan(1e-4),()=>{i.assign(K(1,0,0))}).ElseIf(t.y.lessThan(1e-4),()=>{i.assign(K(0,1,0))}).ElseIf(t.z.lessThan(1e-4),()=>{i.assign(K(0,0,1))}).ElseIf(t.x.greaterThan(1-1e-4),()=>{i.assign(K(-1,0,0))}).ElseIf(t.y.greaterThan(1-1e-4),()=>{i.assign(K(0,-1,0))}).ElseIf(t.z.greaterThan(1-1e-4),()=>{i.assign(K(0,0,-1))}).Else(()=>{const s=r.uv(t.add(K(-.01,0,0))).r.sub(r.uv(t.add(K(.01,0,0))).r),o=r.uv(t.add(K(0,-.01,0))).r.sub(r.uv(t.add(K(0,.01,0))).r),a=r.uv(t.add(K(0,0,-.01))).r.sub(r.uv(t.add(K(0,0,.01))).r);i.assign(K(s,o,a))}),i.normalize()});class yL{constructor(t,e){this.nodes=t,this.info=e,this.animationLoop=null,this.requestId=null,this._init()}_init(){const t=(e,i)=>{this.requestId=self.requestAnimationFrame(t),this.info.autoReset===!0&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,this.animationLoop!==null&&this.animationLoop(e,i)};t()}dispose(){self.cancelAnimationFrame(this.requestId),this.requestId=null}setAnimationLoop(t){this.animationLoop=t}}class On{constructor(){this.weakMap=new WeakMap}get(t){let e=this.weakMap;for(let i=0;i<t.length;i++)if(e=e.get(t[i]),e===void 0)return;return e.get(t[t.length-1])}set(t,e){let i=this.weakMap;for(let n=0;n<t.length;n++){const s=t[n];i.has(s)===!1&&i.set(s,new WeakMap),i=i.get(s)}return i.set(t[t.length-1],e)}delete(t){let e=this.weakMap;for(let i=0;i<t.length;i++)if(e=e.get(t[i]),e===void 0)return!1;return e.delete(t[t.length-1])}}const Md=new $s;class yp{constructor(){this.version=0,this.globalClippingCount=0,this.localClippingCount=0,this.localClippingEnabled=!1,this.localClipIntersection=!1,this.planes=[],this.parentVersion=0,this.viewNormalMatrix=new Bi,this.cacheKey=0}projectPlanes(t,e){const i=t.length,n=this.planes;for(let s=0;s<i;s++){Md.copy(t[s]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const o=n[e+s],a=Md.normal;o.x=-a.x,o.y=-a.y,o.z=-a.z,o.w=Md.constant}}updateGlobal(t,e){const i=t.clippingPlanes;this.viewMatrix=e.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix);let n=!1;if(Array.isArray(i)&&i.length!==0){const s=i.length;if(s!==this.globalClippingCount){const o=[];for(let a=0;a<s;a++)o.push(new _e);this.globalClippingCount=s,this.planes=o,n=!0}this.projectPlanes(i,0)}else this.globalClippingCount!==0&&(this.globalClippingCount=0,this.planes=[],n=!0);t.localClippingEnabled!==this.localClippingEnabled&&(this.localClippingEnabled=t.localClippingEnabled,n=!0),n&&(this.version++,this.cacheKey=Eh(this.globalClippingCount,this.localClippingEnabled===!0?1:0))}update(t,e){let i=!1;if(this!==t&&t.version!==this.parentVersion&&(this.globalClippingCount=e.isShadowNodeMaterial?0:t.globalClippingCount,this.localClippingEnabled=t.localClippingEnabled,this.planes=Array.from(t.planes),this.parentVersion=t.version,this.viewMatrix=t.viewMatrix,this.viewNormalMatrix=t.viewNormalMatrix,i=!0),this.localClippingEnabled){const n=e.clippingPlanes;if(Array.isArray(n)&&n.length!==0){const s=n.length,o=this.planes,a=this.globalClippingCount;if(i||s!==this.localClippingCount){o.length=a+s;for(let l=0;l<s;l++)o[a+l]=new _e;this.localClippingCount=s,i=!0}this.projectPlanes(n,a)}else this.localClippingCount!==0&&(this.localClippingCount=0,i=!0);this.localClipIntersection!==e.clipIntersection&&(this.localClipIntersection=e.clipIntersection,i=!0)}i&&(this.version+=t.version,this.cacheKey=Eh(t.cacheKey,this.localClippingCount,this.localClipIntersection===!0?1:0))}}let vL=0;function SL(r){const t=Object.keys(r);let e=Object.getPrototypeOf(r);for(;e;){const i=Object.getOwnPropertyDescriptors(e);for(const n in i)if(i[n]!==void 0){const s=i[n];s&&typeof s.get=="function"&&t.push(n)}e=Object.getPrototypeOf(e)}return t}class ML{constructor(t,e,i,n,s,o,a,l,c){this._nodes=t,this._geometries=e,this.id=vL++,this.renderer=i,this.object=n,this.material=s,this.scene=o,this.camera=a,this.lightsNode=l,this.context=c,this.geometry=n.geometry,this.version=s.version,this.drawRange=null,this.attributes=null,this.pipeline=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.updateClipping(c.clippingContext),this.clippingContextVersion=this.clippingContext.version,this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.material.addEventListener("dispose",this.onMaterialDispose)}updateClipping(t){const e=this.material;let i=this.clippingContext;Array.isArray(e.clippingPlanes)?((i===t||!i)&&(i=new yp,this.clippingContext=i),i.update(t,e)):this.clippingContext!==t&&(this.clippingContext=t)}get clippingNeedsUpdate(){return this.clippingContext.version===this.clippingContextVersion?!1:(this.clippingContextVersion=this.clippingContext.version,!0)}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().monitor)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getIndex(){return this._geometries.getIndex(this)}getIndirect(){return this._geometries.getIndirect(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}getAttributes(){if(this.attributes!==null)return this.attributes;const t=this.getNodeBuilderState().nodeAttributes,e=this.geometry,i=[],n=new Set;for(const s of t){const o=s.node&&s.node.attribute?s.node.attribute:e.getAttribute(s.name);if(o===void 0)continue;i.push(o);const a=o.isInterleavedBufferAttribute?o.data:o;n.add(a)}return this.attributes=i,this.vertexBuffers=Array.from(n.values()),i}getVertexBuffers(){return this.vertexBuffers===null&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:t,material:e,geometry:i,group:n,drawRange:s}=this,o=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),a=this.getIndex(),l=a!==null,c=i.isInstancedBufferGeometry?i.instanceCount:t.count>1?t.count:1;if(c===0)return null;if(o.instanceCount=c,t.isBatchedMesh===!0)return o;let h=1;e.wireframe===!0&&!t.isPoints&&!t.isLineSegments&&!t.isLine&&!t.isLineLoop&&(h=2);let u=s.start*h,d=(s.start+s.count)*h;n!==null&&(u=Math.max(u,n.start*h),d=Math.min(d,(n.start+n.count)*h));const f=i.attributes.position;let p=1/0;l?p=a.count:f!=null&&(p=f.count),u=Math.max(u,0),d=Math.min(d,p);const _=d-u;return _<0||_===1/0?null:(o.vertexCount=_,o.firstVertex=u,o)}getGeometryCacheKey(){const{geometry:t}=this;let e="";for(const i of Object.keys(t.attributes).sort()){const n=t.attributes[i];e+=i+",",n.data&&(e+=n.data.stride+","),n.offset&&(e+=n.offset+","),n.itemSize&&(e+=n.itemSize+","),n.normalized&&(e+="n,")}return t.index&&(e+="index,"),e}getMaterialCacheKey(){const{object:t,material:e}=this;let i=e.customProgramCacheKey();for(const n of SL(e)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(n))continue;const s=e[n];let o;if(s!==null){const a=typeof s;a==="number"?o=s!==0?"1":"0":a==="object"?(o="{",s.isTexture&&(o+=s.mapping),o+="}"):o=String(s)}else o=String(s);i+=o+","}return i+=this.clippingContext.cacheKey+",",t.geometry&&(i+=this.getGeometryCacheKey()),t.skeleton&&(i+=t.skeleton.bones.length+","),t.morphTargetInfluences&&(i+=t.morphTargetInfluences.length+","),t.isBatchedMesh&&(i+=t._matricesTexture.uuid+",",t._colorsTexture!==null&&(i+=t._colorsTexture.uuid+",")),t.count>1&&(i+=t.uuid+","),oC(i)}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let t=this._nodes.getCacheKey(this.scene,this.lightsNode);return this.object.receiveShadow&&(t+=1),t}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.onDispose()}}const Ro=[];class TL{constructor(t,e,i,n,s,o){this.renderer=t,this.nodes=e,this.geometries=i,this.pipelines=n,this.bindings=s,this.info=o,this.chainMaps={}}get(t,e,i,n,s,o,a){const l=this.getChainMap(a);Ro[0]=t,Ro[1]=e,Ro[2]=o,Ro[3]=s;let c=l.get(Ro);return c===void 0?(c=this.createRenderObject(this.nodes,this.geometries,this.renderer,t,e,i,n,s,o,a),l.set(Ro,c)):(c.updateClipping(o.clippingContext),(c.version!==e.version||c.needsUpdate)&&(c.initialCacheKey!==c.getCacheKey()?(c.dispose(),c=this.get(t,e,i,n,s,o,a)):c.version=e.version)),c}getChainMap(t="default"){return this.chainMaps[t]||(this.chainMaps[t]=new On)}dispose(){this.chainMaps={}}createRenderObject(t,e,i,n,s,o,a,l,c,h){const u=this.getChainMap(h),d=new ML(t,e,i,n,s,o,a,l,c);return d.onDispose=()=>{this.pipelines.delete(d),this.bindings.delete(d),this.nodes.delete(d),u.delete(d.getChainArray())},d}}class hr{constructor(){this.data=new WeakMap}get(t){let e=this.data.get(t);return e===void 0&&(e={},this.data.set(t,e)),e}delete(t){let e;return this.data.has(t)&&(e=this.data.get(t),this.data.delete(t)),e}has(t){return this.data.has(t)}dispose(){this.data=new WeakMap}}const Ln={VERTEX:1,INDEX:2,STORAGE:3,INDIRECT:4},Ks=16,bL=211,EL=212;class AL extends hr{constructor(t){super(),this.backend=t}delete(t){const e=super.delete(t);return e!==void 0&&this.backend.destroyAttribute(t),e}update(t,e){const i=this.get(t);if(i.version===void 0)e===Ln.VERTEX?this.backend.createAttribute(t):e===Ln.INDEX?this.backend.createIndexAttribute(t):e===Ln.STORAGE?this.backend.createStorageAttribute(t):e===Ln.INDIRECT&&this.backend.createIndirectStorageAttribute(t),i.version=this._getBufferAttribute(t).version;else{const n=this._getBufferAttribute(t);(i.version<n.version||n.usage===Go)&&(this.backend.updateAttribute(t),i.version=n.version)}}_getBufferAttribute(t){return t.isInterleavedBufferAttribute&&(t=t.data),t}}function wL(r){for(let t=r.length-1;t>=0;--t)if(r[t]>=65535)return!0;return!1}function eS(r){return r.index!==null?r.index.version:r.attributes.position.version}function mx(r){const t=[],e=r.index,i=r.attributes.position;if(e!==null){const s=e.array;for(let o=0,a=s.length;o<a;o+=3){const l=s[o+0],c=s[o+1],h=s[o+2];t.push(l,c,c,h,h,l)}}else{const s=i.array;for(let o=0,a=s.length/3-1;o<a;o+=3){const l=o+0,c=o+1,h=o+2;t.push(l,c,c,h,h,l)}}const n=new(wL(t)?Ey:by)(t,1);return n.version=eS(r),n}class RL extends hr{constructor(t,e){super(),this.attributes=t,this.info=e,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(t){const e=t.geometry;return super.has(e)&&this.get(e).initialized===!0}updateForRender(t){this.has(t)===!1&&this.initGeometry(t),this.updateAttributes(t)}initGeometry(t){const e=t.geometry,i=this.get(e);i.initialized=!0,this.info.memory.geometries++;const n=()=>{this.info.memory.geometries--;const s=e.index,o=t.getAttributes();s!==null&&this.attributes.delete(s);for(const l of o)this.attributes.delete(l);const a=this.wireframes.get(e);a!==void 0&&this.attributes.delete(a),e.removeEventListener("dispose",n)};e.addEventListener("dispose",n)}updateAttributes(t){const e=t.getAttributes();for(const s of e)s.isStorageBufferAttribute||s.isStorageInstancedBufferAttribute?this.updateAttribute(s,Ln.STORAGE):this.updateAttribute(s,Ln.VERTEX);const i=this.getIndex(t);i!==null&&this.updateAttribute(i,Ln.INDEX);const n=t.geometry.indirect;n!==null&&this.updateAttribute(n,Ln.INDIRECT)}updateAttribute(t,e){const i=this.info.render.calls;t.isInterleavedBufferAttribute?this.attributeCall.get(t)===void 0?(this.attributes.update(t,e),this.attributeCall.set(t,i)):this.attributeCall.get(t.data)!==i&&(this.attributes.update(t,e),this.attributeCall.set(t.data,i),this.attributeCall.set(t,i)):this.attributeCall.get(t)!==i&&(this.attributes.update(t,e),this.attributeCall.set(t,i))}getIndirect(t){return t.geometry.indirect}getIndex(t){const{geometry:e,material:i}=t;let n=e.index;if(i.wireframe===!0){const s=this.wireframes;let o=s.get(e);o===void 0?(o=mx(e),s.set(e,o)):o.version!==eS(e)&&(this.attributes.delete(o),o=mx(e),s.set(e,o)),n=o}return n}}class CL{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.compute={calls:0,frameCalls:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.memory={geometries:0,textures:0}}update(t,e,i){this.render.drawCalls++,t.isMesh||t.isSprite?this.render.triangles+=i*(e/3):t.isPoints?this.render.points+=i*e:t.isLineSegments?this.render.lines+=i*(e/2):t.isLine?this.render.lines+=i*(e-1):console.error("THREE.WebGPUInfo: Unknown object type.")}updateTimestamp(t,e){this[t].timestampCalls===0&&(this[t].timestamp=0),this[t].timestamp+=e,this[t].timestampCalls++,this[t].timestampCalls>=this[t].previousFrameCalls&&(this[t].timestampCalls=0)}reset(){const t=this.render.frameCalls;this.render.previousFrameCalls=t;const e=this.compute.frameCalls;this.compute.previousFrameCalls=e,this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class iS{constructor(t){this.cacheKey=t,this.usedTimes=0}}class NL extends iS{constructor(t,e,i){super(t),this.vertexProgram=e,this.fragmentProgram=i}}class PL extends iS{constructor(t,e){super(t),this.computeProgram=e,this.isComputePipeline=!0}}let DL=0;class Td{constructor(t,e,i=null,n=null){this.id=DL++,this.code=t,this.stage=e,this.transforms=i,this.attributes=n,this.usedTimes=0}}class LL extends hr{constructor(t,e){super(),this.backend=t,this.nodes=e,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(t,e){const{backend:i}=this,n=this.get(t);if(this._needsComputeUpdate(t)){const s=n.pipeline;s&&(s.usedTimes--,s.computeProgram.usedTimes--);const o=this.nodes.getForCompute(t);let a=this.programs.compute.get(o.computeShader);a===void 0&&(s&&s.computeProgram.usedTimes===0&&this._releaseProgram(s.computeProgram),a=new Td(o.computeShader,"compute",o.transforms,o.nodeAttributes),this.programs.compute.set(o.computeShader,a),i.createProgram(a));const l=this._getComputeCacheKey(t,a);let c=this.caches.get(l);c===void 0&&(s&&s.usedTimes===0&&this._releasePipeline(s),c=this._getComputePipeline(t,a,l,e)),c.usedTimes++,a.usedTimes++,n.version=t.version,n.pipeline=c}return n.pipeline}getForRender(t,e=null){const{backend:i}=this,n=this.get(t);if(this._needsRenderUpdate(t)){const s=n.pipeline;s&&(s.usedTimes--,s.vertexProgram.usedTimes--,s.fragmentProgram.usedTimes--);const o=t.getNodeBuilderState();let a=this.programs.vertex.get(o.vertexShader);a===void 0&&(s&&s.vertexProgram.usedTimes===0&&this._releaseProgram(s.vertexProgram),a=new Td(o.vertexShader,"vertex"),this.programs.vertex.set(o.vertexShader,a),i.createProgram(a));let l=this.programs.fragment.get(o.fragmentShader);l===void 0&&(s&&s.fragmentProgram.usedTimes===0&&this._releaseProgram(s.fragmentProgram),l=new Td(o.fragmentShader,"fragment"),this.programs.fragment.set(o.fragmentShader,l),i.createProgram(l));const c=this._getRenderCacheKey(t,a,l);let h=this.caches.get(c);h===void 0?(s&&s.usedTimes===0&&this._releasePipeline(s),h=this._getRenderPipeline(t,a,l,c,e)):t.pipeline=h,h.usedTimes++,a.usedTimes++,l.usedTimes++,n.pipeline=h}return n.pipeline}delete(t){const e=this.get(t).pipeline;return e&&(e.usedTimes--,e.usedTimes===0&&this._releasePipeline(e),e.isComputePipeline?(e.computeProgram.usedTimes--,e.computeProgram.usedTimes===0&&this._releaseProgram(e.computeProgram)):(e.fragmentProgram.usedTimes--,e.vertexProgram.usedTimes--,e.vertexProgram.usedTimes===0&&this._releaseProgram(e.vertexProgram),e.fragmentProgram.usedTimes===0&&this._releaseProgram(e.fragmentProgram))),super.delete(t)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(t){this.getForRender(t)}_getComputePipeline(t,e,i,n){i=i||this._getComputeCacheKey(t,e);let s=this.caches.get(i);return s===void 0&&(s=new PL(i,e),this.caches.set(i,s),this.backend.createComputePipeline(s,n)),s}_getRenderPipeline(t,e,i,n,s){n=n||this._getRenderCacheKey(t,e,i);let o=this.caches.get(n);return o===void 0&&(o=new NL(n,e,i),this.caches.set(n,o),t.pipeline=o,this.backend.createRenderPipeline(t,s)),o}_getComputeCacheKey(t,e){return t.id+","+e.id}_getRenderCacheKey(t,e,i){return e.id+","+i.id+","+this.backend.getRenderCacheKey(t)}_releasePipeline(t){this.caches.delete(t.cacheKey)}_releaseProgram(t){const e=t.code,i=t.stage;this.programs[i].delete(e)}_needsComputeUpdate(t){const e=this.get(t);return e.pipeline===void 0||e.version!==t.version}_needsRenderUpdate(t){return this.get(t).pipeline===void 0||this.backend.needsRenderUpdate(t)}}class FL extends hr{constructor(t,e,i,n,s,o){super(),this.backend=t,this.textures=i,this.pipelines=s,this.attributes=n,this.nodes=e,this.info=o,this.pipelines.bindings=this}getForRender(t){const e=t.getBindings();for(const i of e){const n=this.get(i);n.bindGroup===void 0&&(this._init(i),this.backend.createBindings(i,e),n.bindGroup=i)}return e}getForCompute(t){const e=this.nodes.getForCompute(t).bindings;for(const i of e){const n=this.get(i);n.bindGroup===void 0&&(this._init(i),this.backend.createBindings(i,e),n.bindGroup=i)}return e}updateForCompute(t){this._updateBindings(this.getForCompute(t))}updateForRender(t){this._updateBindings(this.getForRender(t))}_updateBindings(t){for(const e of t)this._update(e,t)}_init(t){for(const e of t.bindings)if(e.isSampledTexture)this.textures.updateTexture(e.texture);else if(e.isStorageBuffer){const i=e.attribute,n=i.isIndirectStorageBufferAttribute?Ln.INDIRECT:Ln.STORAGE;this.attributes.update(i,n)}}_update(t,e){const{backend:i}=this;let n=!1;for(const s of t.bindings)if(!(s.isNodeUniformsGroup&&!this.nodes.updateGroup(s))){if(s.isUniformBuffer)s.update()&&i.updateBinding(s);else if(s.isSampler)s.update();else if(s.isSampledTexture){s.needsBindingsUpdate(this.textures.get(s.texture).generation)&&(n=!0);const o=s.update(),a=s.texture;o&&this.textures.updateTexture(a);const l=i.get(a);if(i.isWebGPUBackend===!0&&l.texture===void 0&&l.externalTexture===void 0&&(console.error("Bindings._update: binding should be available:",s,o,a,s.textureNode.value,n),this.textures.updateTexture(a),n=!0),a.isStorageTexture===!0){const c=this.get(a);s.store===!0?c.needsMipmap=!0:this.textures.needsMipmaps(a)&&c.needsMipmap===!0&&(this.backend.generateMipmaps(a),c.needsMipmap=!1)}}}n===!0&&this.backend.updateBindings(t,e)}}function UL(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.material.id!==t.material.id?r.material.id-t.material.id:r.z!==t.z?r.z-t.z:r.id-t.id}function gx(r,t){return r.groupOrder!==t.groupOrder?r.groupOrder-t.groupOrder:r.renderOrder!==t.renderOrder?r.renderOrder-t.renderOrder:r.z!==t.z?t.z-r.z:r.id-t.id}function _x(r){return(r.transmission>0||r.transmissionNode)&&r.side===jo&&r.forceSinglePass===!1}class IL{constructor(t,e,i){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparentDoublePass=[],this.transparent=[],this.bundles=[],this.lightsNode=t.getNode(e,i),this.lightsArray=[],this.scene=e,this.camera=i,this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparentDoublePass.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(t,e,i,n,s,o){let a=this.renderItems[this.renderItemsIndex];return a===void 0?(a={id:t.id,object:t,geometry:e,material:i,groupOrder:n,renderOrder:t.renderOrder,z:s,group:o},this.renderItems[this.renderItemsIndex]=a):(a.id=t.id,a.object=t,a.geometry=e,a.material=i,a.groupOrder=n,a.renderOrder=t.renderOrder,a.z=s,a.group=o),this.renderItemsIndex++,a}push(t,e,i,n,s,o){const a=this.getNextRenderItem(t,e,i,n,s,o);t.occlusionTest===!0&&this.occlusionQueryCount++,i.transparent===!0||i.transmission>0?(_x(i)&&this.transparentDoublePass.push(a),this.transparent.push(a)):this.opaque.push(a)}unshift(t,e,i,n,s,o){const a=this.getNextRenderItem(t,e,i,n,s,o);i.transparent===!0||i.transmission>0?(_x(i)&&this.transparentDoublePass.unshift(a),this.transparent.unshift(a)):this.opaque.unshift(a)}pushBundle(t){this.bundles.push(t)}pushLight(t){this.lightsArray.push(t)}sort(t,e){this.opaque.length>1&&this.opaque.sort(t||UL),this.transparentDoublePass.length>1&&this.transparentDoublePass.sort(e||gx),this.transparent.length>1&&this.transparent.sort(e||gx)}finish(){this.lightsNode.setLights(this.lightsArray);for(let t=this.renderItemsIndex,e=this.renderItems.length;t<e;t++){const i=this.renderItems[t];if(i.id===null)break;i.id=null,i.object=null,i.geometry=null,i.material=null,i.groupOrder=null,i.renderOrder=null,i.z=null,i.group=null}}}class BL{constructor(t){this.lighting=t,this.lists=new On}get(t,e){const i=this.lists,n=[t,e];let s=i.get(n);return s===void 0&&(s=new IL(this.lighting,t,e),i.set(n,s)),s}dispose(){this.lists=new On}}let OL=0;class zL{constructor(){this.id=OL++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new _e,this.scissor=!1,this.scissorValue=new _e,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.sampleCount=1,this.width=0,this.height=0,this.isRenderContext=!0}getCacheKey(){return nS(this)}}function nS(r){const{textures:t,activeCubeFace:e}=r,i=[e];for(const n of t)i.push(n.id);return Wy(i)}class GL{constructor(){this.chainMaps={}}get(t,e,i=null){const n=[t,e];let s;if(i===null)s="default";else{const l=i.texture.format;s=`${i.textures.length}:${l}:${i.samples}:${i.depthBuffer}:${i.stencilBuffer}`}const o=this.getChainMap(s);let a=o.get(n);return a===void 0&&(a=new zL,o.set(n,a)),i!==null&&(a.sampleCount=i.samples===0?1:i.samples),a}getChainMap(t){return this.chainMaps[t]||(this.chainMaps[t]=new On)}dispose(){this.chainMaps={}}}const kL=new z;class VL extends hr{constructor(t,e,i){super(),this.renderer=t,this.backend=e,this.info=i}updateRenderTarget(t,e=0){const i=this.get(t),n=t.samples===0?1:t.samples,s=i.depthTextureMips||(i.depthTextureMips={}),o=t.textures,a=this.getSize(o[0]),l=a.width>>e,c=a.height>>e;let h=t.depthTexture||s[e];const u=t.depthBuffer===!0||t.stencilBuffer===!0;let d=!1;h===void 0&&u&&(h=new Sa,h.format=t.stencilBuffer?ua:Ur,h.type=t.stencilBuffer?wl:ai,h.image.width=l,h.image.height=c,s[e]=h),(i.width!==a.width||a.height!==i.height)&&(d=!0,h&&(h.needsUpdate=!0,h.image.width=l,h.image.height=c)),i.width=a.width,i.height=a.height,i.textures=o,i.depthTexture=h||null,i.depth=t.depthBuffer,i.stencil=t.stencilBuffer,i.renderTarget=t,i.sampleCount!==n&&(d=!0,h&&(h.needsUpdate=!0),i.sampleCount=n);const f={sampleCount:n};for(let p=0;p<o.length;p++){const _=o[p];d&&(_.needsUpdate=!0),this.updateTexture(_,f)}if(h&&this.updateTexture(h,f),i.initialized!==!0){i.initialized=!0;const p=()=>{t.removeEventListener("dispose",p);for(let _=0;_<o.length;_++)this._destroyTexture(o[_]);h&&this._destroyTexture(h),this.delete(t)};t.addEventListener("dispose",p)}}updateTexture(t,e={}){const i=this.get(t);if(i.initialized===!0&&i.version===t.version)return;const n=t.isRenderTargetTexture||t.isDepthTexture||t.isFramebufferTexture,s=this.backend;if(n&&i.initialized===!0&&(s.destroySampler(t),s.destroyTexture(t)),t.isFramebufferTexture){const c=this.renderer.getRenderTarget();c?t.type=c.texture.type:t.type=tr}const{width:o,height:a,depth:l}=this.getSize(t);if(e.width=o,e.height=a,e.depth=l,e.needsMipmaps=this.needsMipmaps(t),e.levels=e.needsMipmaps?this.getMipLevels(t,o,a):1,n||t.isStorageTexture===!0)s.createSampler(t),s.createTexture(t,e),i.generation=t.version;else if(i.initialized!==!0&&s.createSampler(t),t.version>0){const h=t.image;if(h===void 0)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(h.complete===!1)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(t.images){const u=[];for(const d of t.images)u.push(d);e.images=u}else e.image=h;(i.isDefaultTexture===void 0||i.isDefaultTexture===!0)&&(s.createTexture(t,e),i.isDefaultTexture=!1,i.generation=t.version),t.source.dataReady===!0&&s.updateTexture(t,e),e.needsMipmaps&&t.mipmaps.length===0&&s.generateMipmaps(t)}}else s.createDefaultTexture(t),i.isDefaultTexture=!0,i.generation=t.version;if(i.initialized!==!0){i.initialized=!0,i.generation=t.version,this.info.memory.textures++;const c=()=>{t.removeEventListener("dispose",c),this._destroyTexture(t),this.info.memory.textures--};t.addEventListener("dispose",c)}i.version=t.version}getSize(t,e=kL){let i=t.images?t.images[0]:t.image;return i?(i.image!==void 0&&(i=i.image),e.width=i.width,e.height=i.height,e.depth=t.isCubeTexture?6:i.depth||1):e.width=e.height=e.depth=1,e}getMipLevels(t,e,i){let n;return t.isCompressedTexture?n=t.mipmaps.length:n=Math.floor(Math.log2(Math.max(e,i)))+1,n}needsMipmaps(t){return this.isEnvironmentTexture(t)||t.isCompressedTexture===!0||t.generateMipmaps}isEnvironmentTexture(t){const e=t.mapping;return e===El||e===Al||e===Or||e===ha}_destroyTexture(t){this.backend.destroySampler(t),this.backend.destroyTexture(t),this.delete(t)}}class Mm extends xe{constructor(t,e,i,n=1){super(t,e,i),this.a=n}set(t,e,i,n=1){return this.a=n,super.set(t,e,i)}copy(t){return t.a!==void 0&&(this.a=t.a),super.copy(t)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}class HL extends ye{static get type(){return"ParameterNode"}constructor(t,e=null){super(t,e),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}class WL extends Xt{static get type(){return"StackNode"}constructor(t=null){super(),this.nodes=[],this.outputNode=null,this.parent=t,this._currentCond=null,this.isStackNode=!0}getNodeType(t){return this.outputNode?this.outputNode.getNodeType(t):"void"}add(t){return this.nodes.push(t),this}If(t,e){const i=new ah(e);return this._currentCond=Pi(t,i),this.add(this._currentCond)}ElseIf(t,e){const i=new ah(e),n=Pi(t,i);return this._currentCond.elseNode=n,this._currentCond=n,this}Else(t){return this._currentCond.elseNode=new ah(t),this}build(t,...e){const i=Zy();Rh(this);for(const n of this.nodes)n.build(t,"void");return Rh(i),this.outputNode?this.outputNode.build(t,...e):super.build(t,...e)}else(...t){return console.warn("TSL.StackNode: .else() has been renamed to .Else()."),this.Else(...t)}elseif(...t){return console.warn("TSL.StackNode: .elseif() has been renamed to .ElseIf()."),this.ElseIf(...t)}}const bd=tt(WL);new $s;new z;new z;new z;new De;new z(0,0,-1);new _e;new z;new z;new _e;new oe;const $L=new va;Ml.flipX();$L.depthTexture=new Sa(1,1);const Ed=new im(-1,1,1,-1,0,1);class XL extends Xr{constructor(t=!1){super();const e=t===!1?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new ys([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new ys(e,2))}}const qL=new XL;class sS extends kr{constructor(t=null){super(qL,t),this.camera=Ed,this.isQuadMesh=!0}renderAsync(t){return t.renderAsync(this,Ed)}render(t){t.render(this,Ed)}}const Ha=new bn,Ad=new De;class Li extends Xt{static get type(){return"SceneNode"}constructor(t=Li.BACKGROUND_BLURRINESS,e=null){super(),this.scope=t,this.scene=e}setup(t){const e=this.scope,i=this.scene!==null?this.scene:t.scene;let n;return e===Li.BACKGROUND_BLURRINESS?n=Ie("backgroundBlurriness","float",i):e===Li.BACKGROUND_INTENSITY?n=Ie("backgroundIntensity","float",i):e===Li.BACKGROUND_ROTATION?n=Ht("mat4").label("backgroundRotation").setGroup(ee).onRenderUpdate(()=>{const s=i.background;return s!==null&&s.isTexture&&s.mapping!==kp?(Ha.copy(i.backgroundRotation),Ha.x*=-1,Ha.y*=-1,Ha.z*=-1,Ad.makeRotationFromEuler(Ha)):Ad.identity(),Ad}):console.error("THREE.SceneNode: Unknown scope:",e),n}}Li.BACKGROUND_BLURRINESS="backgroundBlurriness";Li.BACKGROUND_INTENSITY="backgroundIntensity";Li.BACKGROUND_ROTATION="backgroundRotation";const YL=ut(Li,Li.BACKGROUND_BLURRINESS),xx=ut(Li,Li.BACKGROUND_INTENSITY),jL=ut(Li,Li.BACKGROUND_ROTATION),Ho={PointList:"point-list",LineList:"line-list",LineStrip:"line-strip",TriangleList:"triangle-list",TriangleStrip:"triangle-strip"},ri={Never:"never",Less:"less",Equal:"equal",LessEqual:"less-equal",Greater:"greater",NotEqual:"not-equal",GreaterEqual:"greater-equal",Always:"always"},oi={Store:"store",Discard:"discard"},He={Load:"load",Clear:"clear"},wd={CCW:"ccw",CW:"cw"},Rd={None:"none",Front:"front",Back:"back"},pa={Uint16:"uint16",Uint32:"uint32"},D={R8Unorm:"r8unorm",R8Snorm:"r8snorm",R8Uint:"r8uint",R8Sint:"r8sint",R16Uint:"r16uint",R16Sint:"r16sint",R16Float:"r16float",RG8Unorm:"rg8unorm",RG8Snorm:"rg8snorm",RG8Uint:"rg8uint",RG8Sint:"rg8sint",R32Uint:"r32uint",R32Sint:"r32sint",R32Float:"r32float",RG16Uint:"rg16uint",RG16Sint:"rg16sint",RG16Float:"rg16float",RGBA8Unorm:"rgba8unorm",RGBA8UnormSRGB:"rgba8unorm-srgb",RGBA8Snorm:"rgba8snorm",RGBA8Uint:"rgba8uint",RGBA8Sint:"rgba8sint",BGRA8Unorm:"bgra8unorm",BGRA8UnormSRGB:"bgra8unorm-srgb",RGB9E5UFloat:"rgb9e5ufloat",RGB10A2Unorm:"rgb10a2unorm",RG11B10uFloat:"rgb10a2unorm",RG32Uint:"rg32uint",RG32Sint:"rg32sint",RG32Float:"rg32float",RGBA16Uint:"rgba16uint",RGBA16Sint:"rgba16sint",RGBA16Float:"rgba16float",RGBA32Uint:"rgba32uint",RGBA32Sint:"rgba32sint",RGBA32Float:"rgba32float",Stencil8:"stencil8",Depth16Unorm:"depth16unorm",Depth24Plus:"depth24plus",Depth24PlusStencil8:"depth24plus-stencil8",Depth32Float:"depth32float",Depth32FloatStencil8:"depth32float-stencil8",BC1RGBAUnorm:"bc1-rgba-unorm",BC1RGBAUnormSRGB:"bc1-rgba-unorm-srgb",BC2RGBAUnorm:"bc2-rgba-unorm",BC2RGBAUnormSRGB:"bc2-rgba-unorm-srgb",BC3RGBAUnorm:"bc3-rgba-unorm",BC3RGBAUnormSRGB:"bc3-rgba-unorm-srgb",BC4RUnorm:"bc4-r-unorm",BC4RSnorm:"bc4-r-snorm",BC5RGUnorm:"bc5-rg-unorm",BC5RGSnorm:"bc5-rg-snorm",BC6HRGBUFloat:"bc6h-rgb-ufloat",BC6HRGBFloat:"bc6h-rgb-float",BC7RGBAUnorm:"bc7-rgba-unorm",BC7RGBAUnormSRGB:"bc7-rgba-srgb",ETC2RGB8Unorm:"etc2-rgb8unorm",ETC2RGB8UnormSRGB:"etc2-rgb8unorm-srgb",ETC2RGB8A1Unorm:"etc2-rgb8a1unorm",ETC2RGB8A1UnormSRGB:"etc2-rgb8a1unorm-srgb",ETC2RGBA8Unorm:"etc2-rgba8unorm",ETC2RGBA8UnormSRGB:"etc2-rgba8unorm-srgb",EACR11Unorm:"eac-r11unorm",EACR11Snorm:"eac-r11snorm",EACRG11Unorm:"eac-rg11unorm",EACRG11Snorm:"eac-rg11snorm",ASTC4x4Unorm:"astc-4x4-unorm",ASTC4x4UnormSRGB:"astc-4x4-unorm-srgb",ASTC5x4Unorm:"astc-5x4-unorm",ASTC5x4UnormSRGB:"astc-5x4-unorm-srgb",ASTC5x5Unorm:"astc-5x5-unorm",ASTC5x5UnormSRGB:"astc-5x5-unorm-srgb",ASTC6x5Unorm:"astc-6x5-unorm",ASTC6x5UnormSRGB:"astc-6x5-unorm-srgb",ASTC6x6Unorm:"astc-6x6-unorm",ASTC6x6UnormSRGB:"astc-6x6-unorm-srgb",ASTC8x5Unorm:"astc-8x5-unorm",ASTC8x5UnormSRGB:"astc-8x5-unorm-srgb",ASTC8x6Unorm:"astc-8x6-unorm",ASTC8x6UnormSRGB:"astc-8x6-unorm-srgb",ASTC8x8Unorm:"astc-8x8-unorm",ASTC8x8UnormSRGB:"astc-8x8-unorm-srgb",ASTC10x5Unorm:"astc-10x5-unorm",ASTC10x5UnormSRGB:"astc-10x5-unorm-srgb",ASTC10x6Unorm:"astc-10x6-unorm",ASTC10x6UnormSRGB:"astc-10x6-unorm-srgb",ASTC10x8Unorm:"astc-10x8-unorm",ASTC10x8UnormSRGB:"astc-10x8-unorm-srgb",ASTC10x10Unorm:"astc-10x10-unorm",ASTC10x10UnormSRGB:"astc-10x10-unorm-srgb",ASTC12x10Unorm:"astc-12x10-unorm",ASTC12x10UnormSRGB:"astc-12x10-unorm-srgb",ASTC12x12Unorm:"astc-12x12-unorm",ASTC12x12UnormSRGB:"astc-12x12-unorm-srgb"},Cd={ClampToEdge:"clamp-to-edge",Repeat:"repeat",MirrorRepeat:"mirror-repeat"},Pr={Linear:"linear",Nearest:"nearest"},zt={Zero:"zero",One:"one",Src:"src",OneMinusSrc:"one-minus-src",SrcAlpha:"src-alpha",OneMinusSrcAlpha:"one-minus-src-alpha",Dst:"dst",OneMinusDstColor:"one-minus-dst",DstAlpha:"dst-alpha",OneMinusDstAlpha:"one-minus-dst-alpha",SrcAlphaSaturated:"src-alpha-saturated",Constant:"constant",OneMinusConstant:"one-minus-constant"},Mr={Add:"add",Subtract:"subtract",ReverseSubtract:"reverse-subtract",Min:"min",Max:"max"},yx={None:0,Red:1,Green:2,Blue:4,Alpha:8,All:15},Vs={Keep:"keep",Zero:"zero",Replace:"replace",Invert:"invert",IncrementClamp:"increment-clamp",DecrementClamp:"decrement-clamp",IncrementWrap:"increment-wrap",DecrementWrap:"decrement-wrap"},vp={Uniform:"uniform",Storage:"storage",ReadOnlyStorage:"read-only-storage"},vx={WriteOnly:"write-only",ReadOnly:"read-only",ReadWrite:"read-write"},Wa={Float:"float",UnfilterableFloat:"unfilterable-float",Depth:"depth",SInt:"sint",UInt:"uint"},Sx={OneD:"1d",TwoD:"2d",ThreeD:"3d"},tn={OneD:"1d",TwoD:"2d",TwoDArray:"2d-array",Cube:"cube",CubeArray:"cube-array",ThreeD:"3d"},KL={All:"all",StencilOnly:"stencil-only",DepthOnly:"depth-only"},Fc={Vertex:"vertex",Instance:"instance"},Sp={DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups"},ZL=new oe;class QL extends Fl{static get type(){return"PassTextureNode"}constructor(t,e){super(e),this.passNode=t,this.setUpdateMatrix(!1)}setup(t){return t.object.isQuadMesh&&this.passNode.build(t),super.setup(t)}clone(){return new this.constructor(this.passNode,this.value)}}class Mx extends QL{static get type(){return"PassMultipleTextureNode"}constructor(t,e,i=!1){super(t,null),this.textureName=e,this.previousTexture=i}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(t){return this.updateTexture(),super.setup(t)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}}class iu extends je{static get type(){return"PassNode"}constructor(t,e,i,n={}){super("vec4"),this.scope=t,this.scene=e,this.camera=i,this.options=n,this._pixelRatio=1,this._width=1,this._height=1;const s=new Sa;s.isRenderTargetTexture=!0,s.name="depth";const o=new va(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:gs,...n});o.texture.name="output",o.depthTexture=s,this.renderTarget=o,this.updateBeforeType=Zt.FRAME,this._textures={output:o.texture,depth:s},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=Ht(0),this._cameraFar=Ht(0),this._mrt=null,this.isPassNode=!0}setMRT(t){return this._mrt=t,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(t){let e=this._textures[t];return e===void 0&&(e=this.renderTarget.texture.clone(),e.isRenderTargetTexture=!0,e.name=t,this._textures[t]=e,this.renderTarget.textures.push(e)),e}getPreviousTexture(t){let e=this._previousTextures[t];return e===void 0&&(e=this.getTexture(t).clone(),e.isRenderTargetTexture=!0,this._previousTextures[t]=e),e}toggleTexture(t){const e=this._previousTextures[t];if(e!==void 0){const i=this._textures[t],n=this.renderTarget.textures.indexOf(i);this.renderTarget.textures[n]=e,this._textures[t]=e,this._previousTextures[t]=i,this._textureNodes[t].updateTexture(),this._previousTextureNodes[t].updateTexture()}}getTextureNode(t="output"){let e=this._textureNodes[t];return e===void 0&&(e=at(new Mx(this,t)),e.updateTexture(),this._textureNodes[t]=e),e}getPreviousTextureNode(t="output"){let e=this._previousTextureNodes[t];return e===void 0&&(this._textureNodes[t]===void 0&&this.getTextureNode(t),e=at(new Mx(this,t,!0)),e.updateTexture(),this._previousTextureNodes[t]=e),e}getViewZNode(t="depth"){let e=this._viewZNodes[t];if(e===void 0){const i=this._cameraNear,n=this._cameraFar;this._viewZNodes[t]=e=Bv(this.getTextureNode(t),i,n)}return e}getLinearDepthNode(t="depth"){let e=this._linearDepthNodes[t];if(e===void 0){const i=this._cameraNear,n=this._cameraFar,s=this.getViewZNode(t);this._linearDepthNodes[t]=e=al(s,i,n)}return e}setup({renderer:t}){return this.renderTarget.samples=this.options.samples===void 0?t.samples:this.options.samples,t.backend.isWebGLBackend===!0&&(this.renderTarget.samples=0),this.renderTarget.depthTexture.isMultisampleRenderTargetTexture=this.renderTarget.samples>1,this.scope===iu.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(t){const{renderer:e}=t,{scene:i,camera:n}=this;this._pixelRatio=e.getPixelRatio();const s=e.getSize(ZL);this.setSize(s.width,s.height);const o=e.getRenderTarget(),a=e.getMRT();this._cameraNear.value=n.near,this._cameraFar.value=n.far;for(const l in this._previousTextures)this.toggleTexture(l);e.setRenderTarget(this.renderTarget),e.setMRT(this._mrt),e.render(i,n),e.setRenderTarget(o),e.setMRT(a)}setSize(t,e){this._width=t,this._height=e;const i=this._width*this._pixelRatio,n=this._height*this._pixelRatio;this.renderTarget.setSize(i,n)}setPixelRatio(t){this._pixelRatio=t,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}iu.COLOR="color";iu.DEPTH="depth";const JL=pt(([r,t])=>r.mul(t).clamp()).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),tF=pt(([r,t])=>(r=r.mul(t),r.div(r.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),eF=pt(([r,t])=>{r=r.mul(t),r=r.sub(.004).max(0);const e=r.mul(r.mul(6.2).add(.5)),i=r.mul(r.mul(6.2).add(1.7)).add(.06);return e.div(i).pow(2.2)}).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),iF=pt(([r])=>{const t=r.mul(r.add(.0245786)).sub(90537e-9),e=r.mul(r.add(.432951).mul(.983729)).add(.238081);return t.div(e)}),nF=pt(([r,t])=>{const e=Ai(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),i=Ai(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return r=r.mul(t).div(.6),r=e.mul(r),r=iF(r),r=i.mul(r),r.clamp()}).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),sF=Ai(K(1.6605,-.1246,-.0182),K(-.5876,1.1329,-.1006),K(-.0728,-.0083,1.1187)),rF=Ai(K(.6274,.0691,.0164),K(.3293,.9195,.088),K(.0433,.0113,.8956)),oF=pt(([r])=>{const t=K(r).toVar(),e=K(t.mul(t)).toVar(),i=K(e.mul(e)).toVar();return Z(15.5).mul(i.mul(e)).sub(Jt(40.14,i.mul(t))).add(Jt(31.96,i).sub(Jt(6.868,e.mul(t))).add(Jt(.4298,e).add(Jt(.1191,t).sub(.00232))))}),aF=pt(([r,t])=>{const e=K(r).toVar(),i=Ai(K(.856627153315983,.137318972929847,.11189821299995),K(.0951212405381588,.761241990602591,.0767994186031903),K(.0482516061458583,.101439036467562,.811302368396859)),n=Ai(K(1.1271005818144368,-.1413297634984383,-.14132976349843826),K(-.11060664309660323,1.157823702216272,-.11060664309660294),K(-.016493938717834573,-.016493938717834257,1.2519364065950405)),s=Z(-12.47393),o=Z(4.026069);return e.mulAssign(t),e.assign(rF.mul(e)),e.assign(i.mul(e)),e.assign(nn(e,1e-10)),e.assign(vs(e)),e.assign(e.sub(s).div(o.sub(s))),e.assign(Ms(e,0,1)),e.assign(oF(e)),e.assign(n.mul(e)),e.assign(Yh(nn(K(0),e),K(2.2))),e.assign(sF.mul(e)),e.assign(Ms(e,0,1)),e}).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),lF=pt(([r,t])=>{const e=Z(.76),i=Z(.15);r=r.mul(t);const n=xl(r.r,xl(r.g,r.b)),s=Pi(n.lessThan(.08),n.sub(Jt(6.25,n.mul(n))),.04);r.subAssign(s);const o=nn(r.r,nn(r.g,r.b));ui(o.lessThan(e),()=>r);const a=Xi(1,e),l=Xi(1,a.mul(a).div(o.add(a.sub(e))));r.mulAssign(l.div(o));const c=Xi(1,ar(1,i.mul(o.sub(l)).add(1)));return Ce(r,K(l),c)}).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});class xi extends Xt{static get type(){return"CodeNode"}constructor(t="",e=[],i=""){super("code"),this.isCodeNode=!0,this.code=t,this.language=i,this.includes=e}isGlobal(){return!0}setIncludes(t){return this.includes=t,this}getIncludes(){return this.includes}generate(t){const e=this.getIncludes(t);for(const n of e)n.build(t);const i=t.getCodeFromNode(this,this.getNodeType(t));return i.code=this.code,i.code}serialize(t){super.serialize(t),t.code=this.code,t.language=this.language}deserialize(t){super.deserialize(t),this.code=t.code,this.language=t.language}}class cF extends xi{static get type(){return"FunctionNode"}constructor(t="",e=[],i=""){super(t,e,i)}getNodeType(t){return this.getNodeFunction(t).type}getInputs(t){return this.getNodeFunction(t).inputs}getNodeFunction(t){const e=t.getDataFromNode(this);let i=e.nodeFunction;return i===void 0&&(i=t.parser.parseFunction(this.code),e.nodeFunction=i),i}generate(t,e){super.generate(t);const i=this.getNodeFunction(t),n=i.name,s=i.type,o=t.getCodeFromNode(this,s);n!==""&&(o.name=n);const a=t.getPropertyName(o),l=this.getNodeFunction(t).getCode(a);return o.code=l+`
`,e==="property"?a:t.format(`${a}()`,s,e)}}class rS extends Xt{static get type(){return"FogNode"}constructor(t,e){super("float"),this.isFogNode=!0,this.colorNode=t,this.factorNode=e}getViewZNode(t){let e;const i=t.context.getViewZ;return i!==void 0&&(e=i(this)),(e||hi.z).negate()}setup(){return this.factorNode}}class hF extends rS{static get type(){return"FogRangeNode"}constructor(t,e,i){super(t),this.isFogRangeNode=!0,this.nearNode=e,this.farNode=i}setup(t){const e=this.getViewZNode(t);return Vr(this.nearNode,this.farNode,e)}}const uF=tt(hF);class dF extends rS{static get type(){return"FogExp2Node"}constructor(t,e){super(t),this.isFogExp2Node=!0,this.densityNode=e}setup(t){const e=this.getViewZNode(t),i=this.densityNode;return i.mul(i,e,e).negate().exp().oneMinus()}}const fF=tt(dF);class pF extends Xt{constructor(t){super(),this.scope=t}generate(t){const{scope:e}=this,{renderer:i}=t;i.backend.isWebGLBackend===!0?t.addFlowCode(`	// ${e}Barrier 
`):t.addLineFlowCode(`${e}Barrier()`,this)}}tt(pF);class zn extends je{static get type(){return"AtomicFunctionNode"}constructor(t,e,i,n=null){super("uint"),this.method=t,this.pointerNode=e,this.valueNode=i,this.storeNode=n}getInputType(t){return this.pointerNode.getNodeType(t)}getNodeType(t){return this.getInputType(t)}generate(t){const e=this.method,i=this.getNodeType(t),n=this.getInputType(t),s=this.pointerNode,o=this.valueNode,a=[];a.push(`&${s.build(t,n)}`),a.push(o.build(t,n));const l=`${t.getMethod(e,i)}( ${a.join(", ")} )`;if(this.storeNode!==null){const c=this.storeNode.build(t,n);t.addLineFlowCode(`${c} = ${l}`,this)}else t.addLineFlowCode(l,this)}}zn.ATOMIC_LOAD="atomicLoad";zn.ATOMIC_STORE="atomicStore";zn.ATOMIC_ADD="atomicAdd";zn.ATOMIC_SUB="atomicSub";zn.ATOMIC_MAX="atomicMax";zn.ATOMIC_MIN="atomicMin";zn.ATOMIC_AND="atomicAnd";zn.ATOMIC_OR="atomicOr";zn.ATOMIC_XOR="atomicXor";tt(zn);let Uc;function Tm(r){Uc=Uc||new WeakMap;let t=Uc.get(r);return t===void 0&&Uc.set(r,t={}),t}function oS(r){const t=Tm(r);return t.position||(t.position=Ht(new z).setGroup(ee).onRenderUpdate((e,i)=>i.value.setFromMatrixPosition(r.matrixWorld)))}function mF(r){const t=Tm(r);return t.targetPosition||(t.targetPosition=Ht(new z).setGroup(ee).onRenderUpdate((e,i)=>i.value.setFromMatrixPosition(r.target.matrixWorld)))}function bm(r){const t=Tm(r);return t.viewPosition||(t.viewPosition=Ht(new z).setGroup(ee).onRenderUpdate(({camera:e},i)=>{i.value=i.value||new z,i.value.setFromMatrixPosition(r.matrixWorld),i.value.applyMatrix4(e.matrixWorldInverse)}))}const aS=r=>ws.transformDirection(oS(r).sub(mF(r))),gF=r=>r.sort((t,e)=>t.id-e.id),_F=(r,t)=>{for(const e of t)if(e.isAnalyticLightNode&&e.light.id===r)return e;return null},Nd=new WeakMap;class lS extends Xt{static get type(){return"LightsNode"}constructor(){super("vec3"),this.totalDiffuseNode=K().toVar("totalDiffuse"),this.totalSpecularNode=K().toVar("totalSpecular"),this.outgoingLightNode=K().toVar("outgoingLight"),this._lights=[],this._lightNodes=null,this._lightNodesHash=null,this.global=!0}getHash(t){if(this._lightNodesHash===null){this._lightNodes===null&&this.setupLightsNode(t);const e=[];for(const i of this._lightNodes)e.push(i.getSelf().getHash());this._lightNodesHash="lights-"+e.join(",")}return this._lightNodesHash}analyze(t){const e=t.getDataFromNode(this);for(const i of e.nodes)i.build(t)}setupLightsNode(t){const e=[],i=this._lightNodes,n=gF(this._lights),s=t.renderer.library;for(const o of n)if(o.isNode)e.push(at(o));else{let a=null;if(i!==null&&(a=_F(o.id,i)),a===null){const l=s.getLightNodeClass(o.constructor);if(l===null){console.warn(`LightsNode.setupNodeLights: Light node not found for ${o.constructor.name}`);continue}let c=null;Nd.has(o)?c=Nd.get(o):(c=at(new l(o)),Nd.set(o,c)),e.push(c)}}this._lightNodes=e}setupLights(t,e){for(const i of e)i.build(t)}setup(t){this._lightNodes===null&&this.setupLightsNode(t);const e=t.context,i=e.lightingModel;let n=this.outgoingLightNode;if(i){const{_lightNodes:s,totalDiffuseNode:o,totalSpecularNode:a}=this;e.outgoingLight=n;const l=t.addStack(),c=t.getDataFromNode(this);c.nodes=l.nodes,i.start(e,l,t),this.setupLights(t,s),i.indirect(e,l,t);const{backdrop:h,backdropAlpha:u}=e,{directDiffuse:d,directSpecular:f,indirectDiffuse:p,indirectSpecular:_}=e.reflectedLight;let g=d.add(p);h!==null&&(u!==null?g=K(u.mix(g,h)):g=K(h),e.material.transparent=!0),o.assign(g),a.assign(f.add(_)),n.assign(o.add(a)),i.finish(e,l,t),n=n.bypass(t.removeStack())}return n}setLights(t){return this._lights=t,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}get hasLights(){return this._lights.length>0}}const xF=pt(({depthTexture:r,shadowCoord:t})=>ze(r,t.xy).compare(t.z)),yF=pt(({depthTexture:r,shadowCoord:t,shadow:e})=>{const i=(_,g)=>ze(r,_).compare(g),n=Ie("mapSize","vec2",e).setGroup(ee),s=Ie("radius","float",e).setGroup(ee),o=gt(1).div(n),a=o.x.negate().mul(s),l=o.y.negate().mul(s),c=o.x.mul(s),h=o.y.mul(s),u=a.div(2),d=l.div(2),f=c.div(2),p=h.div(2);return wi(i(t.xy.add(gt(a,l)),t.z),i(t.xy.add(gt(0,l)),t.z),i(t.xy.add(gt(c,l)),t.z),i(t.xy.add(gt(u,d)),t.z),i(t.xy.add(gt(0,d)),t.z),i(t.xy.add(gt(f,d)),t.z),i(t.xy.add(gt(a,0)),t.z),i(t.xy.add(gt(u,0)),t.z),i(t.xy,t.z),i(t.xy.add(gt(f,0)),t.z),i(t.xy.add(gt(c,0)),t.z),i(t.xy.add(gt(u,p)),t.z),i(t.xy.add(gt(0,p)),t.z),i(t.xy.add(gt(f,p)),t.z),i(t.xy.add(gt(a,h)),t.z),i(t.xy.add(gt(0,h)),t.z),i(t.xy.add(gt(c,h)),t.z)).mul(1/17)}),vF=pt(({depthTexture:r,shadowCoord:t,shadow:e})=>{const i=(h,u)=>ze(r,h).compare(u),n=Ie("mapSize","vec2",e).setGroup(ee),s=gt(1).div(n),o=s.x,a=s.y,l=t.xy,c=cr(l.mul(n).add(.5));return l.subAssign(c.mul(s)),wi(i(l,t.z),i(l.add(gt(o,0)),t.z),i(l.add(gt(0,a)),t.z),i(l.add(s),t.z),Ce(i(l.add(gt(o.negate(),0)),t.z),i(l.add(gt(o.mul(2),0)),t.z),c.x),Ce(i(l.add(gt(o.negate(),a)),t.z),i(l.add(gt(o.mul(2),a)),t.z),c.x),Ce(i(l.add(gt(0,a.negate())),t.z),i(l.add(gt(0,a.mul(2))),t.z),c.y),Ce(i(l.add(gt(o,a.negate())),t.z),i(l.add(gt(o,a.mul(2))),t.z),c.y),Ce(Ce(i(l.add(gt(o.negate(),a.negate())),t.z),i(l.add(gt(o.mul(2),a.negate())),t.z),c.x),Ce(i(l.add(gt(o.negate(),a.mul(2))),t.z),i(l.add(gt(o.mul(2),a.mul(2))),t.z),c.x),c.y)).mul(1/9)}),SF=pt(({depthTexture:r,shadowCoord:t})=>{const e=Z(1).toVar(),i=ze(r).uv(t.xy).rg,n=mv(t.z,i.x);return ui(n.notEqual(Z(1)),()=>{const s=t.z.sub(i.x),o=nn(0,i.y.mul(i.y));let a=o.div(o.add(s.mul(s)));a=Ms(Xi(a,.3).div(.95-.3)),e.assign(Ms(nn(n,a)))}),e}),MF=pt(({samples:r,radius:t,size:e,shadowPass:i})=>{const n=Z(0).toVar(),s=Z(0).toVar(),o=r.lessThanEqual(Z(1)).select(Z(0),Z(2).div(r.sub(1))),a=r.lessThanEqual(Z(1)).select(Z(0),Z(-1));Dn({start:Oe(0),end:Oe(r),type:"int",condition:"<"},({i:c})=>{const h=a.add(Z(c).mul(o)),u=i.uv(wi(Jh.xy,gt(0,h).mul(t)).div(e)).x;n.addAssign(u),s.addAssign(u.mul(u))}),n.divAssign(r),s.divAssign(r);const l=hm(s.sub(n.mul(n)));return gt(n,l)}),TF=pt(({samples:r,radius:t,size:e,shadowPass:i})=>{const n=Z(0).toVar(),s=Z(0).toVar(),o=r.lessThanEqual(Z(1)).select(Z(0),Z(2).div(r.sub(1))),a=r.lessThanEqual(Z(1)).select(Z(0),Z(-1));Dn({start:Oe(0),end:Oe(r),type:"int",condition:"<"},({i:c})=>{const h=a.add(Z(c).mul(o)),u=i.uv(wi(Jh.xy,gt(h,0).mul(t)).div(e));n.addAssign(u.x),s.addAssign(wi(u.y.mul(u.y),u.x.mul(u.x)))}),n.divAssign(r),s.divAssign(r);const l=hm(s.sub(n.mul(n)));return gt(n,l)}),bF=[xF,yF,vF,SF];let Co=null;const Ic=new sS;class EF extends Xt{static get type(){return"ShadowNode"}constructor(t,e=null){super(),this.light=t,this.shadow=e||t.shadow,this.shadowMap=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this.updateBeforeType=Zt.RENDER,this._node=null,this.isShadowNode=!0}setupShadow(t){const{object:e,renderer:i}=t;Co===null&&(Co=new Ye,Co.fragmentNode=Vt(0,0,0,1),Co.isShadowNodeMaterial=!0,Co.name="ShadowMaterial");const n=this.shadow,s=i.shadowMap.type,o=new Sa(n.mapSize.width,n.mapSize.height);o.compareFunction=qp;const a=t.createRenderTarget(n.mapSize.width,n.mapSize.height);if(a.depthTexture=o,n.camera.updateProjectionMatrix(),s===uc){o.compareFunction=null,this.vsmShadowMapVertical=t.createRenderTarget(n.mapSize.width,n.mapSize.height,{format:dl,type:gs}),this.vsmShadowMapHorizontal=t.createRenderTarget(n.mapSize.width,n.mapSize.height,{format:dl,type:gs});const y=ze(o),v=ze(this.vsmShadowMapVertical.texture),x=Ie("blurSamples","float",n).setGroup(ee),C=Ie("radius","float",n).setGroup(ee),A=Ie("mapSize","vec2",n).setGroup(ee);let E=this.vsmMaterialVertical||(this.vsmMaterialVertical=new Ye);E.fragmentNode=MF({samples:x,radius:C,size:A,shadowPass:y}).context(t.getSharedContext()),E.name="VSMVertical",E=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new Ye),E.fragmentNode=TF({samples:x,radius:C,size:A,shadowPass:v}).context(t.getSharedContext()),E.name="VSMHorizontal"}const l=Ie("intensity","float",n).setGroup(ee),c=Ie("bias","float",n).setGroup(ee),h=Ie("normalBias","float",n).setGroup(ee),u=e.material.shadowPositionNode||dp;let d=Ht(n.matrix).setGroup(ee).mul(u.add(gm.mul(h))),f;if(n.camera.isOrthographicCamera||i.logarithmicDepthBuffer!==!0)d=d.xyz.div(d.w),f=d.z,i.coordinateSystem===Gr&&(f=f.mul(2).sub(1));else{const y=d.w;d=d.xy.div(y);const v=Ht("float").onRenderUpdate(()=>n.camera.near),x=Ht("float").onRenderUpdate(()=>n.camera.far);f=Ov(y,v,x)}d=K(d.x,d.y.oneMinus(),f.add(c));const p=d.x.greaterThanEqual(0).and(d.x.lessThanEqual(1)).and(d.y.greaterThanEqual(0)).and(d.y.lessThanEqual(1)).and(d.z.lessThanEqual(1)),_=n.filterNode||bF[i.shadowMap.type]||null;if(_===null)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const g=ze(a.texture,d),m=p.select(_({depthTexture:s===uc?this.vsmShadowMapHorizontal.texture:o,shadowCoord:d,shadow:n}),Z(1));return this.shadowMap=a,this.shadow.map=a,Ce(1,m.rgb.mix(g,1),l.mul(g.a))}setup(t){if(t.renderer.shadowMap.enabled!==!1)return this._node!==null?this._node:this._node=this.setupShadow(t)}updateShadow(t){const{shadowMap:e,light:i,shadow:n}=this,{renderer:s,scene:o,camera:a}=t,l=s.shadowMap.type,c=e.depthTexture.version;this._depthVersionCached=c;const h=o.overrideMaterial;o.overrideMaterial=Co,e.setSize(n.mapSize.width,n.mapSize.height),n.updateMatrices(i),n.camera.layers.mask=a.layers.mask;const u=s.getRenderTarget(),d=s.getRenderObjectFunction();s.setRenderObjectFunction((f,...p)=>{(f.castShadow===!0||f.receiveShadow&&l===uc)&&s.renderObject(f,...p)}),s.setRenderTarget(e),s.render(o,n.camera),s.setRenderObjectFunction(d),i.isPointLight!==!0&&l===uc&&this.vsmPass(s),s.setRenderTarget(u),o.overrideMaterial=h}vsmPass(t){const{shadow:e}=this;this.vsmShadowMapVertical.setSize(e.mapSize.width,e.mapSize.height),this.vsmShadowMapHorizontal.setSize(e.mapSize.width,e.mapSize.height),t.setRenderTarget(this.vsmShadowMapVertical),Ic.material=this.vsmMaterialVertical,Ic.render(t),t.setRenderTarget(this.vsmShadowMapHorizontal),Ic.material=this.vsmMaterialHorizontal,Ic.render(t)}dispose(){this.shadowMap.dispose(),this.shadowMap=null,this.vsmShadowMapVertical!==null&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),this.vsmShadowMapHorizontal!==null&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),this.updateBeforeType=Zt.NONE}updateBefore(t){const{shadow:e}=this;(e.needsUpdate||e.autoUpdate)&&(this.updateShadow(t),this.shadowMap.depthTexture.version===this._depthVersionCached&&(e.needsUpdate=!1))}}const AF=(r,t)=>at(new EF(r,t));class Yr extends Ta{static get type(){return"AnalyticLightNode"}constructor(t=null){super(),this.updateType=Zt.FRAME,this.light=t,this.color=new xe,this.colorNode=Ht(this.color).setGroup(ee),this.baseColorNode=null,this.shadowNode=null,this.shadowColorNode=null,this.isAnalyticLightNode=!0}getCacheKey(){return Eh(super.getCacheKey(),this.light.id,this.light.castShadow?1:0)}getHash(){return this.light.uuid}setupShadow(t){const{renderer:e}=t;if(e.shadowMap.enabled===!1)return;let i=this.shadowColorNode;if(i===null){const n=this.light.shadow.shadowNode;let s;n!==void 0?s=at(n):s=AF(this.light),this.shadowNode=s,this.shadowColorNode=i=this.colorNode.mul(s),this.baseColorNode=this.colorNode}this.colorNode=i}setup(t){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?t.object.receiveShadow&&this.setupShadow(t):this.shadowNode!==null&&this.shadowNode.dispose()}update(){const{light:t}=this;this.color.copy(t.color).multiplyScalar(t.intensity)}}const cS=pt(r=>{const{lightDistance:t,cutoffDistance:e,decayExponent:i}=r,n=t.pow(i).max(.01).reciprocal();return e.greaterThan(0).select(n.mul(t.div(e).pow4().oneMinus().clamp().pow2()),n)}),wF=pt(({color:r,lightViewPosition:t,cutoffDistance:e,decayExponent:i},n)=>{const s=n.context.lightingModel,o=t.sub(hi),a=o.normalize(),l=o.length(),c=cS({lightDistance:l,cutoffDistance:e,decayExponent:i}),h=r.mul(c),u=n.context.reflectedLight;s.direct({lightDirection:a,lightColor:h,reflectedLight:u},n.stack,n)});class RF extends Yr{static get type(){return"PointLightNode"}constructor(t=null){super(t),this.cutoffDistanceNode=Ht(0).setGroup(ee),this.decayExponentNode=Ht(0).setGroup(ee)}update(t){const{light:e}=this;super.update(t),this.cutoffDistanceNode.value=e.distance,this.decayExponentNode.value=e.decay}setup(){wF({color:this.colorNode,lightViewPosition:bm(this.light),cutoffDistance:this.cutoffDistanceNode,decayExponent:this.decayExponentNode}).append()}}const CF=pt(([r,t])=>{const e=r.x,i=r.y,n=r.z;let s=t.element(0).mul(.886227);return s=s.add(t.element(1).mul(2*.511664).mul(i)),s=s.add(t.element(2).mul(2*.511664).mul(n)),s=s.add(t.element(3).mul(2*.511664).mul(e)),s=s.add(t.element(4).mul(2*.429043).mul(e).mul(i)),s=s.add(t.element(5).mul(2*.429043).mul(i).mul(n)),s=s.add(t.element(6).mul(n.mul(n).mul(.743125).sub(.247708))),s=s.add(t.element(7).mul(2*.429043).mul(e).mul(n)),s=s.add(t.element(8).mul(.429043).mul(Jt(e,e).sub(Jt(i,i)))),s}),Qn=new Mm;class NF extends hr{constructor(t,e){super(),this.renderer=t,this.nodes=e}update(t,e,i){const n=this.renderer,s=this.nodes.getBackgroundNode(t)||t.background;let o=!1;if(s===null)n._clearColor.getRGB(Qn,er),Qn.a=n._clearColor.a;else if(s.isColor===!0)s.getRGB(Qn,er),Qn.a=1,o=!0;else if(s.isNode===!0){const a=this.get(t),l=s;Qn.copy(n._clearColor);let c=a.backgroundMesh;if(c===void 0){const u=fm(Vt(l).mul(xx),{getUV:()=>jL.mul(wv),getTextureLevel:()=>YL});let d=fp();d=d.setZ(d.w);const f=new Ye;f.name="Background.material",f.side=Tn,f.depthTest=!1,f.depthWrite=!1,f.fog=!1,f.lights=!1,f.vertexNode=d,f.colorNode=u,a.backgroundMeshNode=u,a.backgroundMesh=c=new kr(new Jp(1,32,32),f),c.frustumCulled=!1,c.name="Background.mesh",c.onBeforeRender=function(p,_,g){this.matrixWorld.copyPosition(g.matrixWorld)}}const h=l.getCacheKey();a.backgroundCacheKey!==h&&(a.backgroundMeshNode.node=Vt(l).mul(xx),a.backgroundMeshNode.needsUpdate=!0,c.material.needsUpdate=!0,a.backgroundCacheKey=h),e.unshift(c,c.geometry,c.material,0,0,null)}else console.error("THREE.Renderer: Unsupported background configuration.",s);if(n.autoClear===!0||o===!0){const a=i.clearColorValue;a.r=Qn.r,a.g=Qn.g,a.b=Qn.b,a.a=Qn.a,(n.backend.isWebGLBackend===!0||n.alpha===!0)&&(a.r*=a.a,a.g*=a.a,a.b*=a.a),i.depthClearValue=n._clearDepth,i.stencilClearValue=n._clearStencil,i.clearColor=n.autoClearColor===!0,i.clearDepth=n.autoClearDepth===!0,i.clearStencil=n.autoClearStencil===!0}else i.clearColor=!1,i.clearDepth=!1,i.clearStencil=!1}}let PF=0;class Mp{constructor(t="",e=[],i=0,n=[]){this.name=t,this.bindings=e,this.index=i,this.bindingsReference=n,this.id=PF++}}class DF{constructor(t,e,i,n,s,o,a,l,c,h=[]){this.vertexShader=t,this.fragmentShader=e,this.computeShader=i,this.transforms=h,this.nodeAttributes=n,this.bindings=s,this.updateNodes=o,this.updateBeforeNodes=a,this.updateAfterNodes=l,this.monitor=c,this.usedTimes=0}createBindings(){const t=[];for(const e of this.bindings)if(e.bindings[0].groupNode.shared!==!0){const n=new Mp(e.name,[],e.index,e);t.push(n);for(const s of e.bindings)n.bindings.push(s.clone())}else t.push(e);return t}}class Tx{constructor(t,e,i=null){this.isNodeAttribute=!0,this.name=t,this.type=e,this.node=i}}class LF{constructor(t,e,i){this.isNodeUniform=!0,this.name=t,this.type=e,this.node=i.getSelf()}get value(){return this.node.value}set value(t){this.node.value=t}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class hS{constructor(t,e){this.isNodeVar=!0,this.name=t,this.type=e}}class FF extends hS{constructor(t,e){super(t,e),this.needsInterpolation=!1,this.isNodeVarying=!0}}class UF{constructor(t,e,i=""){this.name=t,this.type=e,this.code=i,Object.defineProperty(this,"isNodeCode",{value:!0})}}let IF=0;class Pd{constructor(t=null){this.id=IF++,this.nodesData=new WeakMap,this.parent=t}getData(t){let e=this.nodesData.get(t);return e===void 0&&this.parent!==null&&(e=this.parent.getData(t)),e}setData(t,e){this.nodesData.set(t,e)}}class jr{constructor(t,e){this.name=t,this.value=e,this.boundary=0,this.itemSize=0,this.offset=0}setValue(t){this.value=t}getValue(){return this.value}}class BF extends jr{constructor(t,e=0){super(t,e),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class OF extends jr{constructor(t,e=new oe){super(t,e),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class zF extends jr{constructor(t,e=new z){super(t,e),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class GF extends jr{constructor(t,e=new _e){super(t,e),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class kF extends jr{constructor(t,e=new xe){super(t,e),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class VF extends jr{constructor(t,e=new Bi){super(t,e),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class HF extends jr{constructor(t,e=new De){super(t,e),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class WF extends BF{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class $F extends OF{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class XF extends zF{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class qF extends GF{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class YF extends kF{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class jF extends VF{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}class KF extends HF{constructor(t){super(t.name,t.value),this.nodeUniform=t}getValue(){return this.nodeUniform.value}}const Wo=4,bx=[.125,.215,.35,.446,.526,.582],Dr=20,Dd=new im(-1,1,1,-1,0,1),ZF=new is(90,1),Ex=new xe;let Ld=null,Fd=0,Ud=0;const Ar=(1+Math.sqrt(5))/2,No=1/Ar,Ax=[new z(-Ar,No,0),new z(Ar,No,0),new z(-No,0,Ar),new z(No,0,Ar),new z(0,Ar,-No),new z(0,Ar,No),new z(-1,1,-1),new z(1,1,-1),new z(-1,1,1),new z(1,1,1)],QF=[3,1,5,0,4,2],Id=H2(Kh(),Ts("faceIndex")).normalize(),Em=K(Id.x,Id.y.negate(),Id.z);class JF{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}fromScene(t,e=0,i=.1,n=100){Ld=this._renderer.getRenderTarget(),Fd=this._renderer.getActiveCubeFace(),Ud=this._renderer.getActiveMipmapLevel(),this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(t,i,n,s),e>0&&this._blur(s,0,0,e),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}async compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=Rx(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=Cx(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose(),this._backgroundBox!==null&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Ld,Fd,Ud),t.scissorTest=!1,Bc(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===Or||t.mapping===ha?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Ld=this._renderer.getRenderTarget(),Fd=this._renderer.getActiveCubeFace(),Ud=this._renderer.getActiveMipmapLevel();const i=e||this._allocateTargets();return this._textureToCubeUV(t,i),this._applyPMREM(i),this._cleanup(i),i}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,i={magFilter:Yi,minFilter:Yi,generateMipmaps:!1,type:gs,format:xa,colorSpace:er},n=wx(t,e,i);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=wx(t,e,i);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=tU(s)),this._blurMaterial=eU(s,t,e)}return n}async _compileMaterial(t){const e=new kr(this._lodPlanes[0],t);await this._renderer.compile(e,Dd)}_sceneToCubeUV(t,e,i,n){const s=ZF;s.near=e,s.far=i;const o=[-1,1,-1,-1,-1,-1],a=[1,1,1,-1,-1,-1],l=this._renderer,c=l.autoClear;l.getClearColor(Ex),l.autoClear=!1;let h=this._backgroundBox;if(h===null){const f=new Wh({name:"PMREM.Background",side:Tn,depthWrite:!1,depthTest:!1});h=new kr(new Nl,f)}let u=!1;const d=t.background;d?d.isColor&&(h.material.color.copy(d),t.background=null,u=!0):(h.material.color.copy(Ex),u=!0),l.setRenderTarget(n),l.clear(),u&&l.render(h,s);for(let f=0;f<6;f++){const p=f%3;p===0?(s.up.set(0,o[f],0),s.lookAt(a[f],0,0)):p===1?(s.up.set(0,0,o[f]),s.lookAt(0,a[f],0)):(s.up.set(0,o[f],0),s.lookAt(0,0,a[f]));const _=this._cubeSize;Bc(n,p*_,f>2?_:0,_,_),l.render(t,s)}l.autoClear=c,t.background=d}_textureToCubeUV(t,e){const i=this._renderer,n=t.mapping===Or||t.mapping===ha;n?this._cubemapMaterial===null&&(this._cubemapMaterial=Rx(t)):this._equirectMaterial===null&&(this._equirectMaterial=Cx(t));const s=n?this._cubemapMaterial:this._equirectMaterial;s.fragmentNode.value=t;const o=this._lodMeshes[0];o.material=s;const a=this._cubeSize;Bc(e,0,0,3*a,2*a),i.setRenderTarget(e),i.render(o,Dd)}_applyPMREM(t){const e=this._renderer,i=e.autoClear;e.autoClear=!1;const n=this._lodPlanes.length;for(let s=1;s<n;s++){const o=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),a=Ax[(n-s-1)%Ax.length];this._blur(t,s-1,s,o,a)}e.autoClear=i}_blur(t,e,i,n,s){const o=this._pingPongRenderTarget;this._halfBlur(t,o,e,i,n,"latitudinal",s),this._halfBlur(o,t,i,i,n,"longitudinal",s)}_halfBlur(t,e,i,n,s,o,a){const l=this._renderer,c=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,u=this._lodMeshes[n];u.material=c;const d=c.uniforms,f=this._sizeLods[i]-1,p=isFinite(s)?Math.PI/(2*f):2*Math.PI/(2*Dr-1),_=s/p,g=isFinite(s)?1+Math.floor(h*_):Dr;g>Dr&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${g} samples when the maximum is set to ${Dr}`);const m=[];let y=0;for(let E=0;E<Dr;++E){const w=E/_,T=Math.exp(-w*w/2);m.push(T),E===0?y+=T:E<g&&(y+=2*T)}for(let E=0;E<m.length;E++)m[E]=m[E]/y;t.texture.frame=(t.texture.frame||0)+1,d.envMap.value=t.texture,d.samples.value=g,d.weights.array=m,d.latitudinal.value=o==="latitudinal"?1:0,a&&(d.poleAxis.value=a);const{_lodMax:v}=this;d.dTheta.value=p,d.mipInt.value=v-i;const x=this._sizeLods[n],C=3*x*(n>v-Wo?n-v+Wo:0),A=4*(this._cubeSize-x);Bc(e,C,A,3*x,2*x),l.setRenderTarget(e),l.render(u,Dd)}}function tU(r){const t=[],e=[],i=[],n=[];let s=r;const o=r-Wo+1+bx.length;for(let a=0;a<o;a++){const l=Math.pow(2,s);e.push(l);let c=1/l;a>r-Wo?c=bx[a-r+Wo-1]:a===0&&(c=0),i.push(c);const h=1/(l-2),u=-h,d=1+h,f=[u,u,d,u,d,d,u,u,d,d,u,d],p=6,_=6,g=3,m=2,y=1,v=new Float32Array(g*_*p),x=new Float32Array(m*_*p),C=new Float32Array(y*_*p);for(let E=0;E<p;E++){const w=E%3*2/3-1,T=E>2?0:-1,S=[w,T,0,w+2/3,T,0,w+2/3,T+1,0,w,T,0,w+2/3,T+1,0,w,T+1,0],N=QF[E];v.set(S,g*_*N),x.set(f,m*_*N);const G=[N,N,N,N,N,N];C.set(G,y*_*N)}const A=new Xr;A.setAttribute("position",new en(v,g)),A.setAttribute("uv",new en(x,m)),A.setAttribute("faceIndex",new en(C,y)),t.push(A),n.push(new kr(A,null)),s>Wo&&s--}return{lodPlanes:t,sizeLods:e,sigmas:i,lodMeshes:n}}function wx(r,t,e){const i=new va(r,t,e);return i.texture.mapping=Gf,i.texture.name="PMREM.cubeUv",i.texture.isPMREMTexture=!0,i.scissorTest=!0,i}function Bc(r,t,e,i,n){r.viewport.set(t,e,i,n),r.scissor.set(t,e,i,n)}function Am(r){const t=new Ye;return t.depthTest=!1,t.depthWrite=!1,t.blending=ca,t.name=`PMREM_${r}`,t}function eU(r,t,e){const i=Sl(new Array(Dr).fill(0)),n=Ht(new z(0,1,0)),s=Ht(0),o=Z(Dr),a=Ht(0),l=Ht(1),c=ze(null),h=Ht(0),u=Z(1/t),d=Z(1/e),f=Z(r),p={n:o,latitudinal:a,weights:i,poleAxis:n,outputDirection:Em,dTheta:s,samples:l,envMap:c,mipInt:h,CUBEUV_TEXEL_WIDTH:u,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:f},_=Am("blur");return _.uniforms=p,_.fragmentNode=$2({...p,latitudinal:a.equal(1)}),_}function Rx(r){const t=Am("cubemap");return t.fragmentNode=vl(r,Em),t}function Cx(r){const t=Am("equirect");return t.fragmentNode=ze(r,kv(Em),0),t}const Nx=new WeakMap,iU=new Map([[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]),nU=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),Oc=r=>/e/g.test(r)?String(r).replace(/\+/g,""):(r=Number(r),r+(r%1?"":".0"));class uS{constructor(t,e,i){this.object=t,this.material=t&&t.material||null,this.geometry=t&&t.geometry||null,this.renderer=e,this.parser=i,this.scene=null,this.camera=null,this.nodes=[],this.sequentialNodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.monitor=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.flow={code:""},this.chaining=[],this.stack=bd(),this.stacks=[],this.tab="	",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new Pd,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.useComparisonMethod=!1}getBindGroupsCache(){let t=Nx.get(this.renderer);return t===void 0&&(t=new On,Nx.set(this.renderer,t)),t}createRenderTarget(t,e,i){return new va(t,e,i)}createCubeRenderTarget(t,e){return new Vv(t,e)}createPMREMGenerator(){return new JF(this.renderer)}includes(t){return this.nodes.includes(t)}_getBindGroup(t,e){const i=this.getBindGroupsCache(),n=[];let s=!0;for(const a of e)n.push(a),s=s&&a.groupNode.shared!==!0;let o;return s?(o=i.get(n),o===void 0&&(o=new Mp(t,n,this.bindingsIndexes[t].group,n),i.set(n,o))):o=new Mp(t,n,this.bindingsIndexes[t].group,n),o}getBindGroupArray(t,e){const i=this.bindings[e];let n=i[t];return n===void 0&&(this.bindingsIndexes[t]===void 0&&(this.bindingsIndexes[t]={binding:0,group:Object.keys(this.bindingsIndexes).length}),i[t]=n=[]),n}getBindings(){let t=this.bindGroups;if(t===null){const e={},i=this.bindings;for(const n of D_)for(const s in i[n]){const o=i[n][s];(e[s]||(e[s]=[])).push(...o)}t=[];for(const n in e){const s=e[n],o=this._getBindGroup(n,s);t.push(o)}this.bindGroups=t}return t}sortBindingGroups(){const t=this.getBindings();t.sort((e,i)=>e.bindings[0].groupNode.order-i.bindings[0].groupNode.order);for(let e=0;e<t.length;e++){const i=t[e];this.bindingsIndexes[i.name].group=e,i.index=e}}setHashNode(t,e){this.hashNodes[e]=t}addNode(t){this.nodes.includes(t)===!1&&(this.nodes.push(t),this.setHashNode(t,t.getHash(this)))}addSequentialNode(t){this.sequentialNodes.includes(t)===!1&&this.sequentialNodes.push(t)}buildUpdateNodes(){for(const t of this.nodes)t.getUpdateType()!==Zt.NONE&&this.updateNodes.push(t.getSelf());for(const t of this.sequentialNodes){const e=t.getUpdateBeforeType(),i=t.getUpdateAfterType();e!==Zt.NONE&&this.updateBeforeNodes.push(t.getSelf()),i!==Zt.NONE&&this.updateAfterNodes.push(t.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(t){return t.magFilter===Yi||t.magFilter===Vf||t.magFilter===Zo||t.magFilter===ms||t.minFilter===Yi||t.minFilter===Vf||t.minFilter===Zo||t.minFilter===ms}addChain(t){this.chaining.push(t)}removeChain(t){if(this.chaining.pop()!==t)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(t){return t}getNodeFromHash(t){return this.hashNodes[t]}addFlow(t,e){return this.flowNodes[t].push(e),e}setContext(t){this.context=t}getContext(){return this.context}getSharedContext(){return{...this.context},this.context}setCache(t){this.cache=t}getCache(){return this.cache}getCacheFromNode(t,e=!0){const i=this.getDataFromNode(t);return i.cache===void 0&&(i.cache=new Pd(e?this.getCache():null)),i.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(t){const e=this.getDataFromNode(t);return e.usageCount=e.usageCount===void 0?1:e.usageCount+1,e.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateConst(t,e=null){if(e===null&&(t==="float"||t==="int"||t==="uint"?e=0:t==="bool"?e=!1:t==="color"?e=new xe:t==="vec2"?e=new oe:t==="vec3"?e=new z:t==="vec4"&&(e=new _e)),t==="float")return Oc(e);if(t==="int")return`${Math.round(e)}`;if(t==="uint")return e>=0?`${Math.round(e)}u`:"0u";if(t==="bool")return e?"true":"false";if(t==="color")return`${this.getType("vec3")}( ${Oc(e.r)}, ${Oc(e.g)}, ${Oc(e.b)} )`;const i=this.getTypeLength(t),n=this.getComponentType(t),s=o=>this.generateConst(n,o);if(i===2)return`${this.getType(t)}( ${s(e.x)}, ${s(e.y)} )`;if(i===3)return`${this.getType(t)}( ${s(e.x)}, ${s(e.y)}, ${s(e.z)} )`;if(i===4)return`${this.getType(t)}( ${s(e.x)}, ${s(e.y)}, ${s(e.z)}, ${s(e.w)} )`;if(i>4&&e&&(e.isMatrix3||e.isMatrix4))return`${this.getType(t)}( ${e.elements.map(s).join(", ")} )`;if(i>4)return`${this.getType(t)}()`;throw new Error(`NodeBuilder: Type '${t}' not found in generate constant attempt.`)}getType(t){return t==="color"?"vec3":t}hasGeometryAttribute(t){return this.geometry&&this.geometry.getAttribute(t)!==void 0}getAttribute(t,e){const i=this.attributes;for(const s of i)if(s.name===t)return s;const n=new Tx(t,e);return i.push(n),n}getPropertyName(t){return t.name}isVector(t){return/vec\d/.test(t)}isMatrix(t){return/mat\d/.test(t)}isReference(t){return t==="void"||t==="property"||t==="sampler"||t==="texture"||t==="cubeTexture"||t==="storageTexture"||t==="depthTexture"||t==="texture3D"}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(t){const e=t.type;if(t.isDataTexture){if(e===Ti)return"int";if(e===ai)return"uint"}return"float"}getElementType(t){return t==="mat2"?"vec2":t==="mat3"?"vec3":t==="mat4"?"vec4":this.getComponentType(t)}getComponentType(t){if(t=this.getVectorType(t),t==="float"||t==="bool"||t==="int"||t==="uint")return t;const e=/(b|i|u|)(vec|mat)([2-4])/.exec(t);return e===null?null:e[1]==="b"?"bool":e[1]==="i"?"int":e[1]==="u"?"uint":"float"}getVectorType(t){return t==="color"?"vec3":t==="texture"||t==="cubeTexture"||t==="storageTexture"||t==="texture3D"?"vec4":t}getTypeFromLength(t,e="float"){if(t===1)return e;const i=iU.get(t);return(e==="float"?"":e[0])+i}getTypeFromArray(t){return nU.get(t.constructor)}getTypeFromAttribute(t){let e=t;t.isInterleavedBufferAttribute&&(e=t.data);const i=e.array,n=t.itemSize,s=t.normalized;let o;return!(t instanceof Ay)&&s!==!0&&(o=this.getTypeFromArray(i)),this.getTypeFromLength(n,o)}getTypeLength(t){const e=this.getVectorType(t),i=/vec([2-4])/.exec(e);return i!==null?Number(i[1]):e==="float"||e==="bool"||e==="int"||e==="uint"?1:/mat2/.test(t)===!0?4:/mat3/.test(t)===!0?9:/mat4/.test(t)===!0?16:0}getVectorFromMatrix(t){return t.replace("mat","vec")}changeComponentType(t,e){return this.getTypeFromLength(this.getTypeLength(t),e)}getIntegerType(t){const e=this.getComponentType(t);return e==="int"||e==="uint"?t:this.changeComponentType(t,"int")}addStack(){return this.stack=bd(this.stack),this.stacks.push(Zy()||this.stack),Rh(this.stack),this.stack}removeStack(){const t=this.stack;return this.stack=t.parent,Rh(this.stacks.pop()),t}getDataFromNode(t,e=this.shaderStage,i=null){i=i===null?t.isGlobal(this)?this.globalCache:this.cache:i;let n=i.getData(t);return n===void 0&&(n={},i.setData(t,n)),n[e]===void 0&&(n[e]={}),n[e]}getNodeProperties(t,e="any"){const i=this.getDataFromNode(t,e);return i.properties||(i.properties={outputNode:null})}getBufferAttributeFromNode(t,e){const i=this.getDataFromNode(t);let n=i.bufferAttribute;if(n===void 0){const s=this.uniforms.index++;n=new Tx("nodeAttribute"+s,e,t),this.bufferAttributes.push(n),i.bufferAttribute=n}return n}getStructTypeFromNode(t,e=this.shaderStage){const i=this.getDataFromNode(t,e);if(i.structType===void 0){const n=this.structs.index++;t.name=`StructType${n}`,this.structs[e].push(t),i.structType=t}return t}getUniformFromNode(t,e,i=this.shaderStage,n=null){const s=this.getDataFromNode(t,i,this.globalCache);let o=s.uniform;if(o===void 0){const a=this.uniforms.index++;o=new LF(n||"nodeUniform"+a,e,t),this.uniforms[i].push(o),s.uniform=o}return o}getVarFromNode(t,e=null,i=t.getNodeType(this),n=this.shaderStage){const s=this.getDataFromNode(t,n);let o=s.variable;if(o===void 0){const a=this.vars[n]||(this.vars[n]=[]);e===null&&(e="nodeVar"+a.length),o=new hS(e,i),a.push(o),s.variable=o}return o}getVaryingFromNode(t,e=null,i=t.getNodeType(this)){const n=this.getDataFromNode(t,"any");let s=n.varying;if(s===void 0){const o=this.varyings,a=o.length;e===null&&(e="nodeVarying"+a),s=new FF(e,i),o.push(s),n.varying=s}return s}getCodeFromNode(t,e,i=this.shaderStage){const n=this.getDataFromNode(t);let s=n.code;if(s===void 0){const o=this.codes[i]||(this.codes[i]=[]),a=o.length;s=new UF("nodeCode"+a,e),o.push(s),n.code=s}return s}addFlowCodeHierarchy(t,e){const{flowCodes:i,flowCodeBlock:n}=this.getDataFromNode(t);let s=!0,o=e;for(;o;){if(n.get(o)===!0){s=!1;break}o=this.getDataFromNode(o).parentNodeBlock}if(s)for(const a of i)this.addLineFlowCode(a)}addLineFlowCodeBlock(t,e,i){const n=this.getDataFromNode(t),s=n.flowCodes||(n.flowCodes=[]),o=n.flowCodeBlock||(n.flowCodeBlock=new WeakMap);s.push(e),o.set(i,!0)}addLineFlowCode(t,e=null){return t===""?this:(e!==null&&this.context.nodeBlock&&this.addLineFlowCodeBlock(e,t,this.context.nodeBlock),t=this.tab+t,/;\s*$/.test(t)||(t=t+`;
`),this.flow.code+=t,this)}addFlowCode(t){return this.flow.code+=t,this}addFlowTab(){return this.tab+="	",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(t){return this.flowsData.get(t)}flowNode(t){const e=t.getNodeType(this),i=this.flowChildNode(t,e);return this.flowsData.set(t,i),i}buildFunctionNode(t){const e=new cF,i=this.currentFunctionNode;return this.currentFunctionNode=e,e.code=this.buildFunctionCode(t),this.currentFunctionNode=i,e}flowShaderNode(t){const e=t.layout,i={[Symbol.iterator](){let o=0;const a=Object.values(this);return{next:()=>({value:a[o],done:o++>=a.length})}}};for(const o of e.inputs)i[o.name]=new HL(o.type,o.name);t.layout=null;const n=t.call(i),s=this.flowStagesNode(n,e.type);return t.layout=e,s}flowStagesNode(t,e=null){const i=this.flow,n=this.vars,s=this.cache,o=this.buildStage,a=this.stack,l={code:""};this.flow=l,this.vars={},this.cache=new Pd,this.stack=bd();for(const c of P_)this.setBuildStage(c),l.result=t.build(this,e);return l.vars=this.getVars(this.shaderStage),this.flow=i,this.vars=n,this.cache=s,this.stack=a,this.setBuildStage(o),l}getFunctionOperator(){return null}flowChildNode(t,e=null){const i=this.flow,n={code:""};return this.flow=n,n.result=t.build(this,e),this.flow=i,n}flowNodeFromShaderStage(t,e,i=null,n=null){const s=this.shaderStage;this.setShaderStage(t);const o=this.flowChildNode(e,i);return n!==null&&(o.code+=`${this.tab+n} = ${o.result};
`),this.flowCode[t]=this.flowCode[t]+o.code,this.setShaderStage(s),o}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(t,e){return`${this.getType(t)} ${e}`}getVars(t){let e="";const i=this.vars[t];if(i!==void 0)for(const n of i)e+=`${this.getVar(n.type,n.name)}; `;return e}getUniforms(){console.warn("Abstract function.")}getCodes(t){const e=this.codes[t];let i="";if(e!==void 0)for(const n of e)i+=n.code+`
`;return i}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(t){this.shaderStage=t}getShaderStage(){return this.shaderStage}setBuildStage(t){this.buildStage=t}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}build(){const{object:t,material:e,renderer:i}=this;if(e!==null){let n=i.library.fromMaterial(e);n===null&&(console.error(`NodeMaterial: Material "${e.type}" is not compatible.`),n=new Ye),n.build(this)}else this.addFlow("compute",t);for(const n of P_){this.setBuildStage(n),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const s of D_){this.setShaderStage(s);const o=this.flowNodes[s];for(const a of o)n==="generate"?this.flowNode(a):a.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(t,e){if(e==="float"||e==="int"||e==="uint")return new WF(t);if(e==="vec2"||e==="ivec2"||e==="uvec2")return new $F(t);if(e==="vec3"||e==="ivec3"||e==="uvec3")return new XF(t);if(e==="vec4"||e==="ivec4"||e==="uvec4")return new qF(t);if(e==="color")return new YF(t);if(e==="mat3")return new jF(t);if(e==="mat4")return new KF(t);throw new Error(`Uniform "${e}" not declared.`)}createNodeMaterial(t="NodeMaterial"){throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${t}() instead.`)}format(t,e,i){if(e=this.getVectorType(e),i=this.getVectorType(i),e===i||i===null||this.isReference(i))return t;const n=this.getTypeLength(e),s=this.getTypeLength(i);return n===16&&s===9?`${this.getType(i)}(${t}[0].xyz, ${t}[1].xyz, ${t}[2].xyz)`:n===9&&s===4?`${this.getType(i)}(${t}[0].xy, ${t}[1].xy)`:n>4||s>4||s===0?t:n===s?`${this.getType(i)}( ${t} )`:n>s?this.format(`${t}.${"xyz".slice(0,s)}`,this.getTypeFromLength(s,this.getComponentType(e)),i):s===4&&n>1?`${this.getType(i)}( ${this.format(t,e,"vec3")}, 1.0 )`:n===2?`${this.getType(i)}( ${this.format(t,e,"vec2")}, 0.0 )`:(n===1&&s>1&&e!==this.getComponentType(i)&&(t=`${this.getType(this.getComponentType(i))}( ${t} )`),`${this.getType(i)}( ${t} )`)}getSignature(){return`// Three.js r${Vh} - Node System
`}}class Px{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.startTime=null,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(t,e){let i=t.get(e);return i===void 0&&(i={renderMap:new WeakMap,frameMap:new WeakMap},t.set(e,i)),i}updateBeforeNode(t){const e=t.getUpdateBeforeType(),i=t.updateReference(this);if(e===Zt.FRAME){const{frameMap:n}=this._getMaps(this.updateBeforeMap,i);n.get(i)!==this.frameId&&t.updateBefore(this)!==!1&&n.set(i,this.frameId)}else if(e===Zt.RENDER){const{renderMap:n}=this._getMaps(this.updateBeforeMap,i);n.get(i)!==this.renderId&&t.updateBefore(this)!==!1&&n.set(i,this.renderId)}else e===Zt.OBJECT&&t.updateBefore(this)}updateAfterNode(t){const e=t.getUpdateAfterType(),i=t.updateReference(this);if(e===Zt.FRAME){const{frameMap:n}=this._getMaps(this.updateAfterMap,i);n.get(i)!==this.frameId&&t.updateAfter(this)!==!1&&n.set(i,this.frameId)}else if(e===Zt.RENDER){const{renderMap:n}=this._getMaps(this.updateAfterMap,i);n.get(i)!==this.renderId&&t.updateAfter(this)!==!1&&n.set(i,this.renderId)}else e===Zt.OBJECT&&t.updateAfter(this)}updateNode(t){const e=t.getUpdateType(),i=t.updateReference(this);if(e===Zt.FRAME){const{frameMap:n}=this._getMaps(this.updateMap,i);n.get(i)!==this.frameId&&t.update(this)!==!1&&n.set(i,this.frameId)}else if(e===Zt.RENDER){const{renderMap:n}=this._getMaps(this.updateMap,i);n.get(i)!==this.renderId&&t.update(this)!==!1&&n.set(i,this.renderId)}else e===Zt.OBJECT&&t.update(this)}update(){this.frameId++,this.lastTime===void 0&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class wm{constructor(t,e,i=null,n="",s=!1){this.type=t,this.name=e,this.count=i,this.qualifier=n,this.isConst=s}}wm.isNodeFunctionInput=!0;class sU extends Yr{static get type(){return"DirectionalLightNode"}constructor(t=null){super(t)}setup(t){super.setup(t);const e=t.context.lightingModel,i=this.colorNode,n=aS(this.light),s=t.context.reflectedLight;e.direct({lightDirection:n,lightColor:i,reflectedLight:s},t.stack,t)}}const Bd=new De,zc=new De;let $a=null;class rU extends Yr{static get type(){return"RectAreaLightNode"}constructor(t=null){super(t),this.halfHeight=Ht(new z).setGroup(ee),this.halfWidth=Ht(new z).setGroup(ee),this.updateType=Zt.RENDER}update(t){super.update(t);const{light:e}=this,i=t.camera.matrixWorldInverse;zc.identity(),Bd.copy(e.matrixWorld),Bd.premultiply(i),zc.extractRotation(Bd),this.halfWidth.value.set(e.width*.5,0,0),this.halfHeight.value.set(0,e.height*.5,0),this.halfWidth.value.applyMatrix4(zc),this.halfHeight.value.applyMatrix4(zc)}setup(t){super.setup(t);let e,i;t.isAvailable("float32Filterable")?(e=ze($a.LTC_FLOAT_1),i=ze($a.LTC_FLOAT_2)):(e=ze($a.LTC_HALF_1),i=ze($a.LTC_HALF_2));const{colorNode:n,light:s}=this,o=t.context.lightingModel,a=bm(s),l=t.context.reflectedLight;o.directRectArea({lightColor:n,lightPosition:a,halfWidth:this.halfWidth,halfHeight:this.halfHeight,reflectedLight:l,ltc_1:e,ltc_2:i},t.stack,t)}static setLTC(t){$a=t}}class dS extends Yr{static get type(){return"SpotLightNode"}constructor(t=null){super(t),this.coneCosNode=Ht(0).setGroup(ee),this.penumbraCosNode=Ht(0).setGroup(ee),this.cutoffDistanceNode=Ht(0).setGroup(ee),this.decayExponentNode=Ht(0).setGroup(ee)}update(t){super.update(t);const{light:e}=this;this.coneCosNode.value=Math.cos(e.angle),this.penumbraCosNode.value=Math.cos(e.angle*(1-e.penumbra)),this.cutoffDistanceNode.value=e.distance,this.decayExponentNode.value=e.decay}getSpotAttenuation(t){const{coneCosNode:e,penumbraCosNode:i}=this;return Vr(e,i,t)}setup(t){super.setup(t);const e=t.context.lightingModel,{colorNode:i,cutoffDistanceNode:n,decayExponentNode:s,light:o}=this,a=bm(o).sub(hi),l=a.normalize(),c=l.dot(aS(o)),h=this.getSpotAttenuation(c),u=a.length(),d=cS({lightDistance:u,cutoffDistance:n,decayExponent:s}),f=i.mul(h).mul(d),p=t.context.reflectedLight;e.direct({lightDirection:l,lightColor:f,reflectedLight:p},t.stack,t)}}class oU extends dS{static get type(){return"IESSpotLightNode"}getSpotAttenuation(t){const e=this.light.iesMap;let i=null;if(e&&e.isTexture===!0){const n=t.acos().mul(1/Math.PI);i=ze(e,gt(n,0),0).r}else i=super.getSpotAttenuation(t);return i}}class aU extends Yr{static get type(){return"AmbientLightNode"}constructor(t=null){super(t)}setup({context:t}){t.irradiance.addAssign(this.colorNode)}}class lU extends Yr{static get type(){return"HemisphereLightNode"}constructor(t=null){super(t),this.lightPositionNode=oS(t),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=Ht(new xe).setGroup(ee)}update(t){const{light:e}=this;super.update(t),this.lightPositionNode.object3d=e,this.groundColorNode.value.copy(e.groundColor).multiplyScalar(e.intensity)}setup(t){const{colorNode:e,groundColorNode:i,lightDirectionNode:n}=this,o=En.dot(n).mul(.5).add(.5),a=Ce(i,e,o);t.context.irradiance.addAssign(a)}}class cU extends Yr{static get type(){return"LightProbeNode"}constructor(t=null){super(t);const e=[];for(let i=0;i<9;i++)e.push(new z);this.lightProbe=Sl(e)}update(t){const{light:e}=this;super.update(t);for(let i=0;i<9;i++)this.lightProbe.array[i].copy(e.sh.coefficients[i]).multiplyScalar(e.intensity)}setup(t){const e=CF(wv,this.lightProbe);t.context.irradiance.addAssign(e)}}class fS{parseFunction(){console.warn("Abstract function.")}}class Rm{constructor(t,e,i="",n=""){this.type=t,this.inputs=e,this.name=i,this.precision=n}getCode(){console.warn("Abstract function.")}}Rm.isNodeFunction=!0;const hU=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,uU=/[a-z_0-9]+/ig,Dx="#pragma main",dU=r=>{r=r.trim();const t=r.indexOf(Dx),e=t!==-1?r.slice(t+Dx.length):r,i=e.match(hU);if(i!==null&&i.length===5){const n=i[4],s=[];let o=null;for(;(o=uU.exec(n))!==null;)s.push(o);const a=[];let l=0;for(;l<s.length;){const p=s[l][0]==="const";p===!0&&l++;let _=s[l][0];_==="in"||_==="out"||_==="inout"?l++:_="";const g=s[l++][0];let m=Number.parseInt(s[l][0]);Number.isNaN(m)===!1?l++:m=null;const y=s[l++][0];a.push(new wm(g,y,m,_,p))}const c=e.substring(i[0].length),h=i[3]!==void 0?i[3]:"",u=i[2],d=i[1]!==void 0?i[1]:"",f=t!==-1?r.slice(0,t):"";return{type:u,inputs:a,name:h,precision:d,inputsCode:n,blockCode:c,headerCode:f}}else throw new Error("FunctionNode: Function is not a GLSL code.")};class fU extends Rm{constructor(t){const{type:e,inputs:i,name:n,precision:s,inputsCode:o,blockCode:a,headerCode:l}=dU(t);super(e,i,n,s),this.inputsCode=o,this.blockCode=a,this.headerCode=l}getCode(t=this.name){let e;const i=this.blockCode;if(i!==""){const{type:n,inputsCode:s,headerCode:o,precision:a}=this;let l=`${n} ${t} ( ${s.trim()} )`;a!==""&&(l=`${a} ${l}`),e=o+l+i}else e="";return e}}class pU extends fS{parseFunction(t){return new fU(t)}}const Lx=new WeakMap;class mU extends hr{constructor(t,e){super(),this.renderer=t,this.backend=e,this.nodeFrame=new Px,this.nodeBuilderCache=new Map,this.callHashCache=new On,this.groupsData=new On}updateGroup(t){const e=t.groupNode,i=e.name;if(i===tv.name)return!0;if(i===ee.name){const o=this.get(t),a=this.nodeFrame.renderId;return o.renderId!==a?(o.renderId=a,!0):!1}if(i===VC.name){const o=this.get(t),a=this.nodeFrame.frameId;return o.frameId!==a?(o.frameId=a,!0):!1}const n=[e,t];let s=this.groupsData.get(n);return s===void 0&&this.groupsData.set(n,s={}),s.version!==e.version?(s.version=e.version,!0):!1}getForRenderCacheKey(t){return t.initialCacheKey}getForRender(t){const e=this.get(t);let i=e.nodeBuilderState;if(i===void 0){const{nodeBuilderCache:n}=this,s=this.getForRenderCacheKey(t);if(i=n.get(s),i===void 0){const o=this.backend.createNodeBuilder(t.object,this.renderer);o.scene=t.scene,o.material=t.material,o.camera=t.camera,o.context.material=t.material,o.lightsNode=t.lightsNode,o.environmentNode=this.getEnvironmentNode(t.scene),o.fogNode=this.getFogNode(t.scene),o.clippingContext=t.clippingContext,o.build(),i=this._createNodeBuilderState(o),n.set(s,i)}i.usedTimes++,e.nodeBuilderState=i}return i}delete(t){if(t.isRenderObject){const e=this.get(t).nodeBuilderState;e.usedTimes--,e.usedTimes===0&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(t))}return super.delete(t)}getForCompute(t){const e=this.get(t);let i=e.nodeBuilderState;if(i===void 0){const n=this.backend.createNodeBuilder(t,this.renderer);n.build(),i=this._createNodeBuilderState(n),e.nodeBuilderState=i}return i}_createNodeBuilderState(t){return new DF(t.vertexShader,t.fragmentShader,t.computeShader,t.getAttributesArray(),t.getBindings(),t.updateNodes,t.updateBeforeNodes,t.updateAfterNodes,t.monitor,t.transforms)}getEnvironmentNode(t){return t.environmentNode||this.get(t).environmentNode||null}getBackgroundNode(t){return t.backgroundNode||this.get(t).backgroundNode||null}getFogNode(t){return t.fogNode||this.get(t).fogNode||null}getCacheKey(t,e){const i=[t,e],n=this.renderer.info.calls;let s=this.callHashCache.get(i);if(s===void 0||s.callId!==n){const o=this.getEnvironmentNode(t),a=this.getFogNode(t),l=[];e&&l.push(e.getCacheKey(!0)),o&&l.push(o.getCacheKey()),a&&l.push(a.getCacheKey()),l.push(this.renderer.shadowMap.enabled?1:0),s={callId:n,cacheKey:Wy(l)},this.callHashCache.set(i,s)}return s.cacheKey}updateScene(t){this.updateEnvironment(t),this.updateFog(t),this.updateBackground(t)}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(t){const e=this.get(t),i=t.background;if(i){const n=t.backgroundBlurriness===0&&e.backgroundBlurriness>0||t.backgroundBlurriness>0&&e.backgroundBlurriness===0;if(e.background!==i||n){let s=null;if(i.isCubeTexture===!0||i.mapping===El||i.mapping===Al||i.mapping===Gf)if(t.backgroundBlurriness>0||i.mapping===Gf)s=Jv(i);else{let o;i.isCubeTexture===!0?o=vl(i):o=ze(i),s=Wv(o)}else i.isTexture===!0?s=ze(i,Ml.flipY()).setUpdateMatrix(!0):i.isColor!==!0&&console.error("WebGPUNodes: Unsupported background configuration.",i);e.backgroundNode=s,e.background=i,e.backgroundBlurriness=t.backgroundBlurriness}}else e.backgroundNode&&(delete e.backgroundNode,delete e.background)}updateFog(t){const e=this.get(t),i=t.fog;if(i){if(e.fog!==i){let n=null;if(i.isFogExp2){const s=Ie("color","color",i).setGroup(ee),o=Ie("density","float",i).setGroup(ee);n=fF(s,o)}else if(i.isFog){const s=Ie("color","color",i).setGroup(ee),o=Ie("near","float",i).setGroup(ee),a=Ie("far","float",i).setGroup(ee);n=uF(s,o,a)}else console.error("WebGPUNodes: Unsupported fog configuration.",i);e.fogNode=n,e.fog=i}}else delete e.fogNode,delete e.fog}updateEnvironment(t){const e=this.get(t),i=t.environment;if(i){if(e.environment!==i){let n=null;i.isCubeTexture===!0?n=vl(i):i.isTexture===!0?n=ze(i):console.error("Nodes: Unsupported environment configuration.",i),e.environmentNode=n,e.environment=i}}else e.environmentNode&&(delete e.environmentNode,delete e.environment)}getNodeFrame(t=this.renderer,e=null,i=null,n=null,s=null){const o=this.nodeFrame;return o.renderer=t,o.scene=e,o.object=i,o.camera=n,o.material=s,o}getNodeFrameForRender(t){return this.getNodeFrame(t.renderer,t.scene,t.object,t.camera,t.material)}getOutputCacheKey(){const t=this.renderer;return t.toneMapping+","+t.currentColorSpace}hasOutputChange(t){return Lx.get(t)!==this.getOutputCacheKey()}getOutputNode(t){const e=this.renderer,i=this.getOutputCacheKey(),n=ze(t,Ml).renderOutput(e.toneMapping,e.currentColorSpace);return Lx.set(t,i),n}updateBefore(t){const e=t.getNodeBuilderState();for(const i of e.updateBeforeNodes)this.getNodeFrameForRender(t).updateBeforeNode(i)}updateAfter(t){const e=t.getNodeBuilderState();for(const i of e.updateAfterNodes)this.getNodeFrameForRender(t).updateAfterNode(i)}updateForCompute(t){const e=this.getNodeFrame(),i=this.getForCompute(t);for(const n of i.updateNodes)e.updateNode(n)}updateForRender(t){const e=this.getNodeFrameForRender(t),i=t.getNodeBuilderState();for(const n of i.updateNodes)e.updateNode(n)}needsRefresh(t){const e=this.getNodeFrameForRender(t);return t.getMonitor().needsRefresh(t,e)}dispose(){super.dispose(),this.nodeFrame=new Px,this.nodeBuilderCache=new Map}}class gU{constructor(t,e){this.scene=t,this.camera=e}clone(){return Object.assign(new this.constructor,this)}}class _U{constructor(){this.lists=new On}get(t,e){const i=this.lists,n=[t,e];let s=i.get(n);return s===void 0&&(s=new gU(t,e),i.set(n,s)),s}dispose(){this.lists=new On}}class pS{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map}fromMaterial(t){if(t.isNodeMaterial)return t;let e=null;const i=this.getMaterialNodeClass(t.type);if(i!==null){e=new i;for(const n in t)e[n]=t[n]}return e}addToneMapping(t,e){this.addType(t,e,this.toneMappingNodes)}getToneMappingFunction(t){return this.toneMappingNodes.get(t)||null}getMaterialNodeClass(t){return this.materialNodes.get(t)||null}addMaterial(t,e){this.addType(t,e.type,this.materialNodes)}getLightNodeClass(t){return this.lightNodes.get(t)||null}addLight(t,e){this.addClass(t,e,this.lightNodes)}addType(t,e,i){if(i.has(e)){console.warn(`Redefinition of node ${e}`);return}if(typeof t!="function")throw new Error(`Node class ${t.name} is not a class.`);if(typeof e=="function"||typeof e=="object")throw new Error(`Base class ${e} is not a class.`);i.set(e,t)}addClass(t,e,i){if(i.has(e)){console.warn(`Redefinition of node ${e.name}`);return}if(typeof t!="function")throw new Error(`Node class ${t.name} is not a class.`);if(typeof e!="function")throw new Error(`Base class ${e.name} is not a class.`);i.set(e,t)}}const xU=new lS;class yU extends On{constructor(){super()}createNode(t=[]){return new lS().setLights(t)}getNode(t,e){if(t.isQuadMesh)return xU;const i=[t,e];let n=this.get(i);return n===void 0&&(n=this.createNode(),this.set(i,n)),n}}const Fx=new Ny,Gc=new oe,Od=new _e,zd=new Ly,kc=new De,Hs=new _e;class vU{constructor(t,e={}){this.isRenderer=!0;const{logarithmicDepthBuffer:i=!1,alpha:n=!0,depth:s=!0,stencil:o=!1,antialias:a=!1,samples:l=0,getFallback:c=null}=e;this.domElement=t.getDomElement(),this.backend=t,this.samples=l||a===!0?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=n,this.logarithmicDepthBuffer=i,this.outputColorSpace=Lt,this.toneMapping=Ko,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=s,this.stencil=o,this.clippingPlanes=[],this.info=new CL,this.nodes={modelViewMatrix:null,modelNormalViewMatrix:null},this.library=new pS,this.lighting=new yU,this._getFallback=c,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new _e(0,0,this._width,this._height),this._scissor=new _e(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new sS(new Ye),this._quad.material.type="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const h=this.alpha===!0?0:1;this._clearColor=new Mm(0,0,0,h),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._isDeviceLost=!1,this.onDeviceLost=this._onDeviceLost,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:v1},this.xr={enabled:!1},this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(u,d,f)=>{await this.compileAsync(u,d);const p=this._renderLists.get(u,d),_=this._renderContexts.get(u,d,this._renderTarget),g=u.overrideMaterial||f.material,m=this._objects.get(f,g,u,d,p.lightsNode,_),{fragmentShader:y,vertexShader:v}=m.getNodeBuilderState();return{fragmentShader:y,vertexShader:v}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return this._initPromise!==null?this._initPromise:(this._initPromise=new Promise(async(t,e)=>{let i=this.backend;try{await i.init(this)}catch(n){if(this._getFallback!==null)try{this.backend=i=this._getFallback(n),await i.init(this)}catch(s){e(s);return}else{e(n);return}}this._nodes=new mU(this,i),this._animation=new yL(this._nodes,this.info),this._attributes=new AL(i),this._background=new NF(this,this._nodes),this._geometries=new RL(this._attributes,this.info),this._textures=new VL(this,i,this.info),this._pipelines=new LL(i,this._nodes),this._bindings=new FL(i,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new TL(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new BL(this.lighting),this._bundles=new _U,this._renderContexts=new GL,this._initialized=!0,t()}),this._initPromise)}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(t,e,i=null){if(this._isDeviceLost===!0)return;this._initialized===!1&&await this.init();const n=this._nodes.nodeFrame,s=n.renderId,o=this._currentRenderContext,a=this._currentRenderObjectFunction,l=this._compilationPromises,c=t.isScene===!0?t:Fx;i===null&&(i=t);const h=this._renderTarget,u=this._renderContexts.get(i,e,h),d=this._activeMipmapLevel,f=[];this._currentRenderContext=u,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=f,n.renderId++,n.update(),u.depth=this.depth,u.stencil=this.stencil,u.clippingContext||(u.clippingContext=new yp),u.clippingContext.updateGlobal(this,e),c.onBeforeRender(this,t,e,h);const p=this._renderLists.get(t,e);if(p.begin(),this._projectObject(t,e,0,p),i!==t&&i.traverseVisible(function(y){y.isLight&&y.layers.test(e.layers)&&p.pushLight(y)}),p.finish(),h!==null){this._textures.updateRenderTarget(h,d);const y=this._textures.get(h);u.textures=y.textures,u.depthTexture=y.depthTexture}else u.textures=null,u.depthTexture=null;this._nodes.updateScene(c),this._background.update(c,p,u);const _=p.opaque,g=p.transparent,m=p.lightsNode;this.opaque===!0&&_.length>0&&this._renderObjects(_,e,c,m),this.transparent===!0&&g.length>0&&this._renderTransparents(g,e,c,m),n.renderId=s,this._currentRenderContext=o,this._currentRenderObjectFunction=a,this._compilationPromises=l,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(f)}async renderAsync(t,e){this._initialized===!1&&await this.init();const i=this._renderScene(t,e);await this.backend.resolveTimestampAsync(i,"render")}async waitForGPU(){await this.backend.waitForGPU()}setMRT(t){return this._mrt=t,this}getMRT(){return this._mrt}_onDeviceLost(t){let e=`THREE.WebGPURenderer: ${t.api} Device Lost:

Message: ${t.message}`;t.reason&&(e+=`
Reason: ${t.reason}`),console.error(e),this._isDeviceLost=!0}_renderBundle(t,e,i){const{bundleGroup:n,camera:s,renderList:o}=t,a=this._currentRenderContext,l=this._bundles.get(n,s),c=this.backend.get(l);c.renderContexts===void 0&&(c.renderContexts=new Set);const h=n.version!==c.version,u=c.renderContexts.has(a)===!1||h;if(c.renderContexts.add(a),u){this.backend.beginBundle(a),(c.renderObjects===void 0||h)&&(c.renderObjects=[]),this._currentRenderBundle=l;const d=o.opaque;this.opaque===!0&&d.length>0&&this._renderObjects(d,s,e,i),this._currentRenderBundle=null,this.backend.finishBundle(a,l),c.version=n.version}else{const{renderObjects:d}=c;for(let f=0,p=d.length;f<p;f++){const _=d[f];this._nodes.needsRefresh(_)&&(this._nodes.updateBefore(_),this._nodes.updateForRender(_),this._bindings.updateForRender(_),this._nodes.updateAfter(_))}}this.backend.addBundle(a,l)}render(t,e){if(this._initialized===!1)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(t,e);this._renderScene(t,e)}_getFrameBufferTarget(){const{currentToneMapping:t,currentColorSpace:e}=this;if(t!==Ko===!1&&e!==er===!1)return null;const{width:s,height:o}=this.getDrawingBufferSize(Gc),{depth:a,stencil:l}=this;let c=this._frameBufferTarget;return c===null&&(c=new va(s,o,{depthBuffer:a,stencilBuffer:l,type:gs,format:xa,colorSpace:er,generateMipmaps:!1,minFilter:Yi,magFilter:Yi,samples:this.samples}),c.isPostProcessingRenderTarget=!0,this._frameBufferTarget=c),c.depthBuffer=a,c.stencilBuffer=l,c.setSize(s,o),c.viewport.copy(this._viewport),c.scissor.copy(this._scissor),c.viewport.multiplyScalar(this._pixelRatio),c.scissor.multiplyScalar(this._pixelRatio),c.scissorTest=this._scissorTest,c}_renderScene(t,e,i=!0){if(this._isDeviceLost===!0)return;const n=i?this._getFrameBufferTarget():null,s=this._nodes.nodeFrame,o=s.renderId,a=this._currentRenderContext,l=this._currentRenderObjectFunction,c=t.isScene===!0?t:Fx,h=this._renderTarget,u=this._activeCubeFace,d=this._activeMipmapLevel;let f;n!==null?(f=n,this.setRenderTarget(f)):f=h;const p=this._renderContexts.get(t,e,f);this._currentRenderContext=p,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,s.renderId=this.info.calls;const _=this.coordinateSystem;e.coordinateSystem!==_&&(e.coordinateSystem=_,e.updateProjectionMatrix()),t.matrixWorldAutoUpdate===!0&&t.updateMatrixWorld(),e.parent===null&&e.matrixWorldAutoUpdate===!0&&e.updateMatrixWorld();let g=this._viewport,m=this._scissor,y=this._pixelRatio;f!==null&&(g=f.viewport,m=f.scissor,y=1),this.getDrawingBufferSize(Gc),Od.set(0,0,Gc.width,Gc.height);const v=g.minDepth===void 0?0:g.minDepth,x=g.maxDepth===void 0?1:g.maxDepth;p.viewportValue.copy(g).multiplyScalar(y).floor(),p.viewportValue.width>>=d,p.viewportValue.height>>=d,p.viewportValue.minDepth=v,p.viewportValue.maxDepth=x,p.viewport=p.viewportValue.equals(Od)===!1,p.scissorValue.copy(m).multiplyScalar(y).floor(),p.scissor=this._scissorTest&&p.scissorValue.equals(Od)===!1,p.scissorValue.width>>=d,p.scissorValue.height>>=d,p.clippingContext||(p.clippingContext=new yp),p.clippingContext.updateGlobal(this,e),c.onBeforeRender(this,t,e,f),kc.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),zd.setFromProjectionMatrix(kc,_);const C=this._renderLists.get(t,e);if(C.begin(),this._projectObject(t,e,0,C),C.finish(),this.sortObjects===!0&&C.sort(this._opaqueSort,this._transparentSort),f!==null){this._textures.updateRenderTarget(f,d);const N=this._textures.get(f);p.textures=N.textures,p.depthTexture=N.depthTexture,p.width=N.width,p.height=N.height,p.renderTarget=f,p.depth=f.depthBuffer,p.stencil=f.stencilBuffer}else p.textures=null,p.depthTexture=null,p.width=this.domElement.width,p.height=this.domElement.height,p.depth=this.depth,p.stencil=this.stencil;p.width>>=d,p.height>>=d,p.activeCubeFace=u,p.activeMipmapLevel=d,p.occlusionQueryCount=C.occlusionQueryCount,this._nodes.updateScene(c),this._background.update(c,C,p),this.backend.beginRender(p);const{bundles:A,lightsNode:E,transparentDoublePass:w,transparent:T,opaque:S}=C;if(A.length>0&&this._renderBundles(A,c,E),this.opaque===!0&&S.length>0&&this._renderObjects(S,e,c,E),this.transparent===!0&&T.length>0&&this._renderTransparents(T,w,e,c,E),this.backend.finishRender(p),s.renderId=o,this._currentRenderContext=a,this._currentRenderObjectFunction=l,n!==null){this.setRenderTarget(h,u,d);const N=this._quad;this._nodes.hasOutputChange(f.texture)&&(N.material.fragmentNode=this._nodes.getOutputNode(f.texture),N.material.needsUpdate=!0),this._renderScene(N,N.camera,!1)}return c.onAfterRender(this,t,e,f),p}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(t){this._initialized===!1&&await this.init(),this._animation.setAnimationLoop(t)}async getArrayBufferAsync(t){return await this.backend.getArrayBufferAsync(t)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(t){return t.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(t){return t.set(this._width,this._height)}setPixelRatio(t=1){this._pixelRatio!==t&&(this._pixelRatio=t,this.setSize(this._width,this._height,!1))}setDrawingBufferSize(t,e,i){this._width=t,this._height=e,this._pixelRatio=i,this.domElement.width=Math.floor(t*i),this.domElement.height=Math.floor(e*i),this.setViewport(0,0,t,e),this._initialized&&this.backend.updateSize()}setSize(t,e,i=!0){this._width=t,this._height=e,this.domElement.width=Math.floor(t*this._pixelRatio),this.domElement.height=Math.floor(e*this._pixelRatio),i===!0&&(this.domElement.style.width=t+"px",this.domElement.style.height=e+"px"),this.setViewport(0,0,t,e),this._initialized&&this.backend.updateSize()}setOpaqueSort(t){this._opaqueSort=t}setTransparentSort(t){this._transparentSort=t}getScissor(t){const e=this._scissor;return t.x=e.x,t.y=e.y,t.width=e.width,t.height=e.height,t}setScissor(t,e,i,n){const s=this._scissor;t.isVector4?s.copy(t):s.set(t,e,i,n)}getScissorTest(){return this._scissorTest}setScissorTest(t){this._scissorTest=t,this.backend.setScissorTest(t)}getViewport(t){return t.copy(this._viewport)}setViewport(t,e,i,n,s=0,o=1){const a=this._viewport;t.isVector4?a.copy(t):a.set(t,e,i,n),a.minDepth=s,a.maxDepth=o}getClearColor(t){return t.copy(this._clearColor)}setClearColor(t,e=1){this._clearColor.set(t),this._clearColor.a=e}getClearAlpha(){return this._clearColor.a}setClearAlpha(t){this._clearColor.a=t}getClearDepth(){return this._clearDepth}setClearDepth(t){this._clearDepth=t}getClearStencil(){return this._clearStencil}setClearStencil(t){this._clearStencil=t}isOccluded(t){const e=this._currentRenderContext;return e&&this.backend.isOccluded(e,t)}clear(t=!0,e=!0,i=!0){if(this._initialized===!1)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(t,e,i);const n=this._renderTarget||this._getFrameBufferTarget();let s=null;if(n!==null&&(this._textures.updateRenderTarget(n),s=this._textures.get(n)),this.backend.clear(t,e,i,s),n!==null&&this._renderTarget===null){const o=this._quad;this._nodes.hasOutputChange(n.texture)&&(o.material.fragmentNode=this._nodes.getOutputNode(n.texture),o.material.needsUpdate=!0),this._renderScene(o,o.camera,!1)}}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(t=!0,e=!0,i=!0){this._initialized===!1&&await this.init(),this.clear(t,e,i)}clearColorAsync(){return this.clearAsync(!0,!1,!1)}clearDepthAsync(){return this.clearAsync(!1,!0,!1)}clearStencilAsync(){return this.clearAsync(!1,!1,!0)}get currentToneMapping(){return this._renderTarget!==null?Ko:this.toneMapping}get currentColorSpace(){return this._renderTarget!==null?er:this.outputColorSpace}dispose(){this.info.dispose(),this.backend.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(t,e=0,i=0){this._renderTarget=t,this._activeCubeFace=e,this._activeMipmapLevel=i}getRenderTarget(){return this._renderTarget}setRenderObjectFunction(t){this._renderObjectFunction=t}getRenderObjectFunction(){return this._renderObjectFunction}compute(t){if(this.isDeviceLost===!0)return;if(this._initialized===!1)return console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead."),this.computeAsync(t);const e=this._nodes.nodeFrame,i=e.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,e.renderId=this.info.calls;const n=this.backend,s=this._pipelines,o=this._bindings,a=this._nodes,l=Array.isArray(t)?t:[t];if(l[0]===void 0||l[0].isComputeNode!==!0)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");n.beginCompute(t);for(const c of l){if(s.has(c)===!1){const d=()=>{c.removeEventListener("dispose",d),s.delete(c),o.delete(c),a.delete(c)};c.addEventListener("dispose",d);const f=c.onInitFunction;f!==null&&f.call(c,{renderer:this})}a.updateForCompute(c),o.updateForCompute(c);const h=o.getForCompute(c),u=s.getForCompute(c,h);n.compute(t,c,h,u)}n.finishCompute(t),e.renderId=i}async computeAsync(t){this._initialized===!1&&await this.init(),this.compute(t),await this.backend.resolveTimestampAsync(t,"compute")}async hasFeatureAsync(t){return this._initialized===!1&&await this.init(),this.backend.hasFeature(t)}hasFeature(t){return this._initialized===!1?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(t)}copyFramebufferToTexture(t,e=null){if(e!==null)if(e.isVector2)e=Hs.set(e.x,e.y,t.image.width,t.image.height).floor();else if(e.isVector4)e=Hs.copy(e).floor();else{console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");return}else e=Hs.set(0,0,t.image.width,t.image.height);let i=this._currentRenderContext,n;i!==null?n=i.renderTarget:(n=this._renderTarget||this._getFrameBufferTarget(),n!==null&&(this._textures.updateRenderTarget(n),i=this._textures.get(n))),this._textures.updateTexture(t,{renderTarget:n}),this.backend.copyFramebufferToTexture(t,i,e)}copyTextureToTexture(t,e,i=null,n=null,s=0){this._textures.updateTexture(t),this._textures.updateTexture(e),this.backend.copyTextureToTexture(t,e,i,n,s)}readRenderTargetPixelsAsync(t,e,i,n,s,o=0,a=0){return this.backend.copyTextureToBuffer(t.textures[o],e,i,n,s,a)}_projectObject(t,e,i,n){if(t.visible===!1)return;if(t.layers.test(e.layers)){if(t.isGroup)i=t.renderOrder;else if(t.isLOD)t.autoUpdate===!0&&t.update(e);else if(t.isLight)n.pushLight(t);else if(t.isSprite){if(!t.frustumCulled||zd.intersectsSprite(t)){this.sortObjects===!0&&Hs.setFromMatrixPosition(t.matrixWorld).applyMatrix4(kc);const{geometry:a,material:l}=t;l.visible&&n.push(t,a,l,i,Hs.z,null)}}else if(t.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if((t.isMesh||t.isLine||t.isPoints)&&(!t.frustumCulled||zd.intersectsObject(t))){const{geometry:a,material:l}=t;if(this.sortObjects===!0&&(a.boundingSphere===null&&a.computeBoundingSphere(),Hs.copy(a.boundingSphere.center).applyMatrix4(t.matrixWorld).applyMatrix4(kc)),Array.isArray(l)){const c=a.groups;for(let h=0,u=c.length;h<u;h++){const d=c[h],f=l[d.materialIndex];f&&f.visible&&n.push(t,a,f,i,Hs.z,d)}}else l.visible&&n.push(t,a,l,i,Hs.z,null)}}if(t.isBundleGroup===!0&&this.backend.beginBundle!==void 0){const a=n;n=this._renderLists.get(t,e),n.begin(),a.pushBundle({bundleGroup:t,camera:e,renderList:n}),n.finish()}const o=t.children;for(let a=0,l=o.length;a<l;a++)this._projectObject(o[a],e,i,n)}_renderBundles(t,e,i){for(const n of t)this._renderBundle(n,e,i)}_renderTransparents(t,e,i,n,s){if(e.length>0){for(const{material:o}of e)o.side=Tn;this._renderObjects(e,i,n,s,"backSide");for(const{material:o}of e)o.side=la;this._renderObjects(t,i,n,s);for(const{material:o}of e)o.side=jo}else this._renderObjects(t,i,n,s)}_renderObjects(t,e,i,n,s=null){for(let o=0,a=t.length;o<a;o++){const l=t[o],{object:c,geometry:h,material:u,group:d}=l;if(e.isArrayCamera){const f=e.cameras;for(let p=0,_=f.length;p<_;p++){const g=f[p];if(c.layers.test(g.layers)){const m=g.viewport,y=m.minDepth===void 0?0:m.minDepth,v=m.maxDepth===void 0?1:m.maxDepth,x=this._currentRenderContext.viewportValue;x.copy(m).multiplyScalar(this._pixelRatio).floor(),x.minDepth=y,x.maxDepth=v,this.backend.updateViewport(this._currentRenderContext),this._currentRenderObjectFunction(c,i,g,h,u,d,n,s)}}}else this._currentRenderObjectFunction(c,i,e,h,u,d,n,s)}}renderObject(t,e,i,n,s,o,a,l=null){let c,h,u;if(t.onBeforeRender(this,e,i,n,s,o),e.overrideMaterial!==null){const d=e.overrideMaterial;s.positionNode&&s.positionNode.isNode&&(c=d.positionNode,d.positionNode=s.positionNode),d.isShadowNodeMaterial&&(d.side=s.shadowSide===null?s.side:s.shadowSide,s.depthNode&&s.depthNode.isNode&&(u=d.depthNode,d.depthNode=s.depthNode),s.shadowNode&&s.shadowNode.isNode&&(h=d.fragmentNode,d.fragmentNode=s.shadowNode),this.localClippingEnabled&&(s.clipShadows?(d.clippingPlanes!==s.clippingPlanes&&(d.clippingPlanes=s.clippingPlanes,d.needsUpdate=!0),d.clipIntersection!==s.clipIntersection&&(d.clipIntersection=s.clipIntersection)):Array.isArray(d.clippingPlanes)&&(d.clippingPlanes=null,d.needsUpdate=!0))),s=d}s.transparent===!0&&s.side===jo&&s.forceSinglePass===!1?(s.side=Tn,this._handleObjectFunction(t,s,e,i,a,o,"backSide"),s.side=la,this._handleObjectFunction(t,s,e,i,a,o,l),s.side=jo):this._handleObjectFunction(t,s,e,i,a,o,l),c!==void 0&&(e.overrideMaterial.positionNode=c),u!==void 0&&(e.overrideMaterial.depthNode=u),h!==void 0&&(e.overrideMaterial.fragmentNode=h),t.onAfterRender(this,e,i,n,s,o)}_renderObjectDirect(t,e,i,n,s,o,a){const l=this._objects.get(t,e,i,n,s,this._currentRenderContext,a);l.drawRange=t.geometry.drawRange,l.group=o;const c=this._nodes.needsRefresh(l);c&&(this._nodes.updateBefore(l),this._geometries.updateForRender(l),this._nodes.updateForRender(l),this._bindings.updateForRender(l)),this._pipelines.updateForRender(l),this._currentRenderBundle!==null&&(this.backend.get(this._currentRenderBundle).renderObjects.push(l),l.bundle=this._currentRenderBundle.scene),this.backend.draw(l,this.info),c&&this._nodes.updateAfter(l)}_createObjectPipeline(t,e,i,n,s,o){const a=this._objects.get(t,e,i,n,s,this._currentRenderContext,o);this._nodes.updateBefore(a),this._geometries.updateForRender(a),this._nodes.updateForRender(a),this._bindings.updateForRender(a),this._pipelines.getForRender(a,this._compilationPromises),this._nodes.updateAfter(a)}get compile(){return this.compileAsync}}class Cm{constructor(t=""){this.name=t,this.visibility=0}setVisibility(t){this.visibility|=t}clone(){return Object.assign(new this.constructor,this)}}function SU(r){return r+(Ks-r%Ks)%Ks}class mS extends Cm{constructor(t,e=null){super(t),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=e}get byteLength(){return SU(this._buffer.byteLength)}get buffer(){return this._buffer}update(){return!0}}class gS extends mS{constructor(t,e=null){super(t,e),this.isUniformBuffer=!0}}let MU=0;class _S extends gS{constructor(t,e){super("UniformBuffer_"+MU++,t?t.value:null),this.nodeUniform=t,this.groupNode=e}get buffer(){return this.nodeUniform.value}}class TU extends gS{constructor(t){super(t),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(t){return this.uniforms.push(t),this}removeUniform(t){const e=this.uniforms.indexOf(t);return e!==-1&&this.uniforms.splice(e,1),this}get values(){return this._values===null&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let t=this._buffer;if(t===null){const e=this.byteLength;t=new Float32Array(new ArrayBuffer(e)),this._buffer=t}return t}get byteLength(){let t=0;for(let e=0,i=this.uniforms.length;e<i;e++){const n=this.uniforms[e],{boundary:s,itemSize:o}=n,a=t%Ks,l=Ks-a;a!==0&&l-s<0?t+=Ks-a:a%s!==0&&(t+=a%s),n.offset=t/this.bytesPerElement,t+=o*this.bytesPerElement}return Math.ceil(t/Ks)*Ks}update(){let t=!1;for(const e of this.uniforms)this.updateByType(e)===!0&&(t=!0);return t}updateByType(t){if(t.isNumberUniform)return this.updateNumber(t);if(t.isVector2Uniform)return this.updateVector2(t);if(t.isVector3Uniform)return this.updateVector3(t);if(t.isVector4Uniform)return this.updateVector4(t);if(t.isColorUniform)return this.updateColor(t);if(t.isMatrix3Uniform)return this.updateMatrix3(t);if(t.isMatrix4Uniform)return this.updateMatrix4(t);console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",t)}updateNumber(t){let e=!1;const i=this.values,n=t.getValue(),s=t.offset;if(i[s]!==n){const o=this.buffer;o[s]=i[s]=n,e=!0}return e}updateVector2(t){let e=!1;const i=this.values,n=t.getValue(),s=t.offset;if(i[s+0]!==n.x||i[s+1]!==n.y){const o=this.buffer;o[s+0]=i[s+0]=n.x,o[s+1]=i[s+1]=n.y,e=!0}return e}updateVector3(t){let e=!1;const i=this.values,n=t.getValue(),s=t.offset;if(i[s+0]!==n.x||i[s+1]!==n.y||i[s+2]!==n.z){const o=this.buffer;o[s+0]=i[s+0]=n.x,o[s+1]=i[s+1]=n.y,o[s+2]=i[s+2]=n.z,e=!0}return e}updateVector4(t){let e=!1;const i=this.values,n=t.getValue(),s=t.offset;if(i[s+0]!==n.x||i[s+1]!==n.y||i[s+2]!==n.z||i[s+4]!==n.w){const o=this.buffer;o[s+0]=i[s+0]=n.x,o[s+1]=i[s+1]=n.y,o[s+2]=i[s+2]=n.z,o[s+3]=i[s+3]=n.w,e=!0}return e}updateColor(t){let e=!1;const i=this.values,n=t.getValue(),s=t.offset;if(i[s+0]!==n.r||i[s+1]!==n.g||i[s+2]!==n.b){const o=this.buffer;o[s+0]=i[s+0]=n.r,o[s+1]=i[s+1]=n.g,o[s+2]=i[s+2]=n.b,e=!0}return e}updateMatrix3(t){let e=!1;const i=this.values,n=t.getValue().elements,s=t.offset;if(i[s+0]!==n[0]||i[s+1]!==n[1]||i[s+2]!==n[2]||i[s+4]!==n[3]||i[s+5]!==n[4]||i[s+6]!==n[5]||i[s+8]!==n[6]||i[s+9]!==n[7]||i[s+10]!==n[8]){const o=this.buffer;o[s+0]=i[s+0]=n[0],o[s+1]=i[s+1]=n[1],o[s+2]=i[s+2]=n[2],o[s+4]=i[s+4]=n[3],o[s+5]=i[s+5]=n[4],o[s+6]=i[s+6]=n[5],o[s+8]=i[s+8]=n[6],o[s+9]=i[s+9]=n[7],o[s+10]=i[s+10]=n[8],e=!0}return e}updateMatrix4(t){let e=!1;const i=this.values,n=t.getValue().elements,s=t.offset;return EU(i,n,s)===!1&&(this.buffer.set(n,s),bU(i,n,s),e=!0),e}}function bU(r,t,e){for(let i=0,n=t.length;i<n;i++)r[e+i]=t[i]}function EU(r,t,e){for(let i=0,n=t.length;i<n;i++)if(r[e+i]!==t[i])return!1;return!0}let AU=0;class xS extends TU{constructor(t,e){super(t),this.id=AU++,this.groupNode=e,this.isNodeUniformsGroup=!0}getNodes(){const t=[];for(const e of this.uniforms){const i=e.nodeUniform.node;if(!i)throw new Error("NodeUniformsGroup: Uniform has no node.");t.push(i)}return t}}let wU=0;class RU extends Cm{constructor(t,e){super(t),this.id=wU++,this.texture=e,this.version=e?e.version:0,this.store=!1,this.generation=null,this.isSampledTexture=!0}needsBindingsUpdate(t){const{texture:e}=this;return t!==this.generation?(this.generation=t,!0):e.isVideoTexture}update(){const{texture:t,version:e}=this;return e!==t.version?(this.version=t.version,!0):!1}}class nu extends RU{constructor(t,e,i,n=null){super(t,e?e.value:null),this.textureNode=e,this.groupNode=i,this.access=n}needsBindingsUpdate(t){return this.textureNode.value!==this.texture||super.needsBindingsUpdate(t)}update(){const{textureNode:t}=this;return this.texture!==t.value?(this.texture=t.value,!0):super.update()}}class yS extends nu{constructor(t,e,i,n){super(t,e,i,n),this.isSampledCubeTexture=!0}}class vS extends nu{constructor(t,e,i,n){super(t,e,i,n),this.isSampledTexture3D=!0}}const CU={atan2:"atan",textureDimensions:"textureSize",equals:"equal"},NU={low:"lowp",medium:"mediump",high:"highp"},Ux={swizzleAssign:!0,storageBuffer:!1},Ix=`
precision highp float;
precision highp int;
precision highp sampler2D;
precision highp sampler3D;
precision highp samplerCube;
precision highp sampler2DArray;

precision highp usampler2D;
precision highp usampler3D;
precision highp usamplerCube;
precision highp usampler2DArray;

precision highp isampler2D;
precision highp isampler3D;
precision highp isamplerCube;
precision highp isampler2DArray;

precision lowp sampler2DShadow;
`;class PU extends uS{constructor(t,e){super(t,e,new pU),this.uniformGroups={},this.transforms=[],this.extensions={},this.useComparisonMethod=!0}needsColorSpaceToLinearSRGB(t){return t.isVideoTexture===!0&&t.colorSpace!==zr}getMethod(t){return CU[t]||t}getOutputStructName(){return""}buildFunctionCode(t){const e=t.layout,i=this.flowShaderNode(t),n=[];for(const o of e.inputs)n.push(this.getType(o.type)+" "+o.name);return`${this.getType(e.type)} ${e.name}( ${n.join(", ")} ) {

	${i.vars}

${i.code}
	return ${i.result};

}`}setupPBO(t){const e=t.value;if(e.pbo===void 0){const i=e.array,n=e.count*e.itemSize,{itemSize:s}=e,o=e.array.constructor.name.toLowerCase().includes("int");let a=o?Wp:Hp;s===2?a=o?$p:dl:s===3?a=o?I1:Vp:s===4&&(a=o?Xp:xa);const l={Float32Array:qi,Uint8Array:tr,Uint16Array:zo,Uint32Array:ai,Int8Array:il,Int16Array:nl,Int32Array:Ti,Uint8ClampedArray:tr},c=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(n/s))));let h=Math.ceil(n/s/c);c*h*s<n&&h++;const u=c*h*s,d=new i.constructor(u);d.set(i,0),e.array=d;const f=new VR(e.array,c,h,a,l[e.array.constructor.name]||qi);f.needsUpdate=!0,f.isPBOTexture=!0;const p=new Fl(f,null,null);p.setPrecision("high"),e.pboNode=p,e.pbo=p.value,this.getUniformFromNode(e.pboNode,"texture",this.shaderStage,this.context.label)}}getPropertyName(t,e=this.shaderStage){return t.isNodeUniform&&t.node.isTextureNode!==!0&&t.node.isBufferNode!==!0?e.charAt(0)+"_"+t.name:super.getPropertyName(t,e)}generatePBO(t){const{node:e,indexNode:i}=t,n=e.value;if(this.renderer.backend.has(n)){const h=this.renderer.backend.get(n);h.pbo=n.pbo}const s=this.getUniformFromNode(n.pboNode,"texture",this.shaderStage,this.context.label),o=this.getPropertyName(s);this.increaseUsage(i);const a=i.build(this,"uint"),l=this.getDataFromNode(t);let c=l.propertyName;if(c===void 0){const h=this.getVarFromNode(t);c=this.getPropertyName(h);const u=this.getDataFromNode(e);let d=u.propertySizeName;d===void 0&&(d=c+"Size",this.getVarFromNode(e,d,"uint"),this.addLineFlowCode(`${d} = uint( textureSize( ${o}, 0 ).x )`,t),u.propertySizeName=d);const{itemSize:f}=n,p="."+Ma.join("").slice(0,f),_=`ivec2(${a} % ${d}, ${a} / ${d})`,g=this.generateTextureLoad(null,o,_,null,"0");let m="vec4";n.pbo.type===ai?m="uvec4":n.pbo.type===Ti&&(m="ivec4"),this.addLineFlowCode(`${c} = ${m}(${g})${p}`,t),l.propertyName=c}return c}generateTextureLoad(t,e,i,n,s="0"){return n?`texelFetch( ${e}, ivec3( ${i}, ${n} ), ${s} )`:`texelFetch( ${e}, ${i}, ${s} )`}generateTexture(t,e,i,n){return t.isDepthTexture?`texture( ${e}, ${i} ).x`:(n&&(i=`vec3( ${i}, ${n} )`),`texture( ${e}, ${i} )`)}generateTextureLevel(t,e,i,n){return`textureLod( ${e}, ${i}, ${n} )`}generateTextureBias(t,e,i,n){return`texture( ${e}, ${i}, ${n} )`}generateTextureGrad(t,e,i,n){return`textureGrad( ${e}, ${i}, ${n[0]}, ${n[1]} )`}generateTextureCompare(t,e,i,n,s,o=this.shaderStage){if(o==="fragment")return`texture( ${e}, vec3( ${i}, ${n} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${o} shader.`)}getVars(t){const e=[],i=this.vars[t];if(i!==void 0)for(const n of i)e.push(`${this.getVar(n.type,n.name)};`);return e.join(`
	`)}getUniforms(t){const e=this.uniforms[t],i=[],n={};for(const o of e){let a=null,l=!1;if(o.type==="texture"){const h=o.node.value;let u="";h.isDataTexture===!0&&(h.type===ai?u="u":h.type===Ti&&(u="i")),h.compareFunction?a=`sampler2DShadow ${o.name};`:h.isDataArrayTexture===!0||h.isCompressedArrayTexture===!0?a=`${u}sampler2DArray ${o.name};`:a=`${u}sampler2D ${o.name};`}else if(o.type==="cubeTexture")a=`samplerCube ${o.name};`;else if(o.type==="texture3D")a=`sampler3D ${o.name};`;else if(o.type==="buffer"){const h=o.node,u=this.getType(h.bufferType),d=h.bufferCount,f=d>0?d:"";a=`${h.name} {
	${u} ${o.name}[${f}];
};
`}else a=`${this.getVectorType(o.type)} ${this.getPropertyName(o,t)};`,l=!0;const c=o.node.precision;if(c!==null&&(a=NU[c]+" "+a),l){a="	"+a;const h=o.groupNode.name;(n[h]||(n[h]=[])).push(a)}else a="uniform "+a,i.push(a)}let s="";for(const o in n){const a=n[o];s+=this._getGLSLUniformStruct(t+"_"+o,a.join(`
`))+`
`}return s+=i.join(`
`),s}getTypeFromAttribute(t){let e=super.getTypeFromAttribute(t);if(/^[iu]/.test(e)&&t.gpuType!==Ti){let i=t;t.isInterleavedBufferAttribute&&(i=t.data);const n=i.array;n instanceof Uint32Array||n instanceof Int32Array||(e=e.slice(1))}return e}getAttributes(t){let e="";if(t==="vertex"||t==="compute"){const i=this.getAttributesArray();let n=0;for(const s of i)e+=`layout( location = ${n++} ) in ${s.type} ${s.name};
`}return e}getStructMembers(t){const e=[],i=t.getMemberTypes();for(let n=0;n<i.length;n++){const s=i[n];e.push(`layout( location = ${n} ) out ${s} m${n};`)}return e.join(`
`)}getStructs(t){const e=[],i=this.structs[t];if(i.length===0)return`layout( location = 0 ) out vec4 fragColor;
`;for(let n=0,s=i.length;n<s;n++){const o=i[n];let a=`
`;a+=this.getStructMembers(o),a+=`
`,e.push(a)}return e.join(`

`)}getVaryings(t){let e="";const i=this.varyings;if(t==="vertex"||t==="compute")for(const n of i){t==="compute"&&(n.needsInterpolation=!0);const s=n.type,o=s.includes("int")||s.includes("uv")||s.includes("iv")?"flat ":"";e+=`${o}${n.needsInterpolation?"out":"/*out*/"} ${s} ${n.name};
`}else if(t==="fragment"){for(const n of i)if(n.needsInterpolation){const s=n.type,o=s.includes("int")||s.includes("uv")||s.includes("iv")?"flat ":"";e+=`${o}in ${s} ${n.name};
`}}return e}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce((i,n)=>i*n,1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(t,e,i=this.shaderStage){const n=this.extensions[i]||(this.extensions[i]=new Map);n.has(t)===!1&&n.set(t,{name:t,behavior:e})}getExtensions(t){const e=[];if(t==="vertex"){const n=this.renderer.backend.extensions;this.object.isBatchedMesh&&n.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",t)}const i=this.extensions[t];if(i!==void 0)for(const{name:n,behavior:s}of i.values())e.push(`#extension ${n} : ${s}`);return e.join(`
`)}isAvailable(t){let e=Ux[t];if(e===void 0){if(t==="float32Filterable"){const i=this.renderer.backend.extensions;i.has("OES_texture_float_linear")?(i.get("OES_texture_float_linear"),e=!0):e=!1}Ux[t]=e}return e}isFlipY(){return!0}registerTransform(t,e){this.transforms.push({varyingName:t,attributeNode:e})}getTransforms(){const t=this.transforms;let e="";for(let i=0;i<t.length;i++){const n=t[i],s=this.getPropertyName(n.attributeNode);e+=`${n.varyingName} = ${s};
	`}return e}_getGLSLUniformStruct(t,e){return`
layout( std140 ) uniform ${t} {
${e}
};`}_getGLSLVertexCode(t){return`#version 300 es

${this.getSignature()}

// extensions 
${t.extensions}

// precision
${Ix}

// uniforms
${t.uniforms}

// varyings
${t.varyings}

// attributes
${t.attributes}

// codes
${t.codes}

void main() {

	// vars
	${t.vars}

	// transforms
	${t.transforms}

	// flow
	${t.flow}

	gl_PointSize = 1.0;

}
`}_getGLSLFragmentCode(t){return`#version 300 es

${this.getSignature()}

// precision
${Ix}

// uniforms
${t.uniforms}

// varyings
${t.varyings}

// codes
${t.codes}

${t.structs}

void main() {

	// vars
	${t.vars}

	// flow
	${t.flow}

}
`}buildCode(){const t=this.material!==null?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const e in t){let i=`// code

`;i+=this.flowCode[e];const n=this.flowNodes[e],s=n[n.length-1];for(const a of n){const l=this.getFlowData(a),c=a.name;c&&(i.length>0&&(i+=`
`),i+=`	// flow -> ${c}
	`),i+=`${l.code}
	`,a===s&&e!=="compute"&&(i+=`// result
	`,e==="vertex"?(i+="gl_Position = ",i+=`${l.result};`):e==="fragment"&&(a.outputNode.isOutputStructNode||(i+="fragColor = ",i+=`${l.result};`)))}const o=t[e];o.extensions=this.getExtensions(e),o.uniforms=this.getUniforms(e),o.attributes=this.getAttributes(e),o.varyings=this.getVaryings(e),o.vars=this.getVars(e),o.structs=this.getStructs(e),o.codes=this.getCodes(e),o.transforms=this.getTransforms(e),o.flow=i}this.material!==null?(this.vertexShader=this._getGLSLVertexCode(t.vertex),this.fragmentShader=this._getGLSLFragmentCode(t.fragment)):this.computeShader=this._getGLSLVertexCode(t.compute)}getUniformFromNode(t,e,i,n=null){const s=super.getUniformFromNode(t,e,i,n),o=this.getDataFromNode(t,i,this.globalCache);let a=o.uniformGPU;if(a===void 0){const l=t.groupNode,c=l.name,h=this.getBindGroupArray(c,i);if(e==="texture")a=new nu(s.name,s.node,l),h.push(a);else if(e==="cubeTexture")a=new yS(s.name,s.node,l),h.push(a);else if(e==="texture3D")a=new vS(s.name,s.node,l),h.push(a);else if(e==="buffer"){t.name=`NodeBuffer_${t.id}`,s.name=`buffer${t.id}`;const u=new _S(t,l);u.name=t.name,h.push(u),a=u}else{const u=this.uniformGroups[i]||(this.uniformGroups[i]={});let d=u[c];d===void 0&&(d=new xS(i+"_"+c,l),u[c]=d,h.push(d)),a=this.getNodeUniform(s,e),d.addUniform(a)}o.uniformGPU=a}return s}}let Gd=null,kd=null,Po=null;class SS{constructor(t={}){this.parameters=Object.assign({},t),this.data=new WeakMap,this.renderer=null,this.domElement=null}async init(t){this.renderer=t}begin(){}finish(){}draw(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}createRenderPipeline(){}createComputePipeline(){}destroyPipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}createDefaultTexture(){}createTexture(){}copyTextureToBuffer(){}createAttribute(){}createIndexAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}resolveTimestampAsync(){}hasFeatureAsync(){}hasFeature(){}getInstanceCount(t){const{object:e,geometry:i}=t;return i.isInstancedBufferGeometry?i.instanceCount:e.count>1?e.count:1}getDrawingBufferSize(){return Gd=Gd||new oe,this.renderer.getDrawingBufferSize(Gd)}getScissor(){return kd=kd||new _e,this.renderer.getScissor(kd)}setScissorTest(){}getClearColor(){const t=this.renderer;return Po=Po||new Mm,t.getClearColor(Po),Po.getRGB(Po,this.renderer.currentColorSpace),Po}getDomElement(){let t=this.domElement;return t===null&&(t=this.parameters.canvas!==void 0?this.parameters.canvas:_R(),"setAttribute"in t&&t.setAttribute("data-engine",`three.js r${Vh} webgpu`),this.domElement=t),t}set(t,e){this.data.set(t,e)}get(t){let e=this.data.get(t);return e===void 0&&(e={},this.data.set(t,e)),e}has(t){return this.data.has(t)}delete(t){this.data.delete(t)}dispose(){}}let DU=0;class LU{constructor(t,e){this.buffers=[t.bufferGPU,e],this.type=t.type,this.bufferType=t.bufferType,this.pbo=t.pbo,this.byteLength=t.byteLength,this.bytesPerElement=t.BYTES_PER_ELEMENT,this.version=t.version,this.isInteger=t.isInteger,this.activeBufferIndex=0,this.baseId=t.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[this.activeBufferIndex^1]}switchBuffers(){this.activeBufferIndex^=1}}class FU{constructor(t){this.backend=t}createAttribute(t,e){const i=this.backend,{gl:n}=i,s=t.array,o=t.usage||n.STATIC_DRAW,a=t.isInterleavedBufferAttribute?t.data:t,l=i.get(a);let c=l.bufferGPU;c===void 0&&(c=this._createBuffer(n,e,s,o),l.bufferGPU=c,l.bufferType=e,l.version=a.version);let h;if(s instanceof Float32Array)h=n.FLOAT;else if(s instanceof Uint16Array)t.isFloat16BufferAttribute?h=n.HALF_FLOAT:h=n.UNSIGNED_SHORT;else if(s instanceof Int16Array)h=n.SHORT;else if(s instanceof Uint32Array)h=n.UNSIGNED_INT;else if(s instanceof Int32Array)h=n.INT;else if(s instanceof Int8Array)h=n.BYTE;else if(s instanceof Uint8Array)h=n.UNSIGNED_BYTE;else if(s instanceof Uint8ClampedArray)h=n.UNSIGNED_BYTE;else throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+s);let u={bufferGPU:c,bufferType:e,type:h,byteLength:s.byteLength,bytesPerElement:s.BYTES_PER_ELEMENT,version:t.version,pbo:t.pbo,isInteger:h===n.INT||h===n.UNSIGNED_INT||t.gpuType===Ti,id:DU++};if(t.isStorageBufferAttribute||t.isStorageInstancedBufferAttribute){const d=this._createBuffer(n,e,s,o);u=new LU(u,d)}i.set(t,u)}updateAttribute(t){const e=this.backend,{gl:i}=e,n=t.array,s=t.isInterleavedBufferAttribute?t.data:t,o=e.get(s),a=o.bufferType,l=t.isInterleavedBufferAttribute?t.data.updateRanges:t.updateRanges;if(i.bindBuffer(a,o.bufferGPU),l.length===0)i.bufferSubData(a,0,n);else{for(let c=0,h=l.length;c<h;c++){const u=l[c];i.bufferSubData(a,u.start*n.BYTES_PER_ELEMENT,n,u.start,u.count)}s.clearUpdateRanges()}i.bindBuffer(a,null),o.version=s.version}destroyAttribute(t){const e=this.backend,{gl:i}=e;t.isInterleavedBufferAttribute&&e.delete(t.data);const n=e.get(t);i.deleteBuffer(n.bufferGPU),e.delete(t)}async getArrayBufferAsync(t){const e=this.backend,{gl:i}=e,n=t.isInterleavedBufferAttribute?t.data:t,{bufferGPU:s}=e.get(n),o=t.array,a=o.byteLength;i.bindBuffer(i.COPY_READ_BUFFER,s);const l=i.createBuffer();i.bindBuffer(i.COPY_WRITE_BUFFER,l),i.bufferData(i.COPY_WRITE_BUFFER,a,i.STREAM_READ),i.copyBufferSubData(i.COPY_READ_BUFFER,i.COPY_WRITE_BUFFER,0,0,a),await e.utils._clientWaitAsync();const c=new t.array.constructor(o.length);return i.bindBuffer(i.COPY_WRITE_BUFFER,l),i.getBufferSubData(i.COPY_WRITE_BUFFER,0,c),i.deleteBuffer(l),i.bindBuffer(i.COPY_READ_BUFFER,null),i.bindBuffer(i.COPY_WRITE_BUFFER,null),c.buffer}_createBuffer(t,e,i,n){const s=t.createBuffer();return t.bindBuffer(e,s),t.bufferData(e,i,n),t.bindBuffer(e,null),s}}let Bx=!1,Vd,Xa;class UU{constructor(t){this.backend=t,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},Bx===!1&&(this._init(this.gl),Bx=!0)}_init(t){Vd={[Ys]:t.FUNC_ADD,[j0]:t.FUNC_SUBTRACT,[K0]:t.FUNC_REVERSE_SUBTRACT},Xa={[Z0]:t.ZERO,[Q0]:t.ONE,[J0]:t.SRC_COLOR,[yh]:t.SRC_ALPHA,[ry]:t.SRC_ALPHA_SATURATE,[ny]:t.DST_COLOR,[ey]:t.DST_ALPHA,[ty]:t.ONE_MINUS_SRC_COLOR,[vh]:t.ONE_MINUS_SRC_ALPHA,[sy]:t.ONE_MINUS_DST_COLOR,[iy]:t.ONE_MINUS_DST_ALPHA}}enable(t){const{enabled:e}=this;e[t]!==!0&&(this.gl.enable(t),e[t]=!0)}disable(t){const{enabled:e}=this;e[t]!==!1&&(this.gl.disable(t),e[t]=!1)}setFlipSided(t){if(this.currentFlipSided!==t){const{gl:e}=this;t?e.frontFace(e.CW):e.frontFace(e.CCW),this.currentFlipSided=t}}setCullFace(t){const{gl:e}=this;t!==_1?(this.enable(e.CULL_FACE),t!==this.currentCullFace&&(t===x1?e.cullFace(e.BACK):t===y1?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):this.disable(e.CULL_FACE),this.currentCullFace=t}setLineWidth(t){const{currentLineWidth:e,gl:i}=this;t!==e&&(i.lineWidth(t),this.currentLineWidth=t)}setBlending(t,e,i,n,s,o,a,l){const{gl:c}=this;if(t===ca){this.currentBlendingEnabled===!0&&(this.disable(c.BLEND),this.currentBlendingEnabled=!1);return}if(this.currentBlendingEnabled===!1&&(this.enable(c.BLEND),this.currentBlendingEnabled=!0),t!==Y0){if(t!==this.currentBlending||l!==this.currentPremultipledAlpha){if((this.currentBlendEquation!==Ys||this.currentBlendEquationAlpha!==Ys)&&(c.blendEquation(c.FUNC_ADD),this.currentBlendEquation=Ys,this.currentBlendEquationAlpha=Ys),l)switch(t){case Js:c.blendFuncSeparate(c.ONE,c.ONE_MINUS_SRC_ALPHA,c.ONE,c.ONE_MINUS_SRC_ALPHA);break;case gh:c.blendFunc(c.ONE,c.ONE);break;case _h:c.blendFuncSeparate(c.ZERO,c.ONE_MINUS_SRC_COLOR,c.ZERO,c.ONE);break;case xh:c.blendFuncSeparate(c.ZERO,c.SRC_COLOR,c.ZERO,c.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}else switch(t){case Js:c.blendFuncSeparate(c.SRC_ALPHA,c.ONE_MINUS_SRC_ALPHA,c.ONE,c.ONE_MINUS_SRC_ALPHA);break;case gh:c.blendFunc(c.SRC_ALPHA,c.ONE);break;case _h:c.blendFuncSeparate(c.ZERO,c.ONE_MINUS_SRC_COLOR,c.ZERO,c.ONE);break;case xh:c.blendFunc(c.ZERO,c.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=t,this.currentPremultipledAlpha=l}return}s=s||e,o=o||i,a=a||n,(e!==this.currentBlendEquation||s!==this.currentBlendEquationAlpha)&&(c.blendEquationSeparate(Vd[e],Vd[s]),this.currentBlendEquation=e,this.currentBlendEquationAlpha=s),(i!==this.currentBlendSrc||n!==this.currentBlendDst||o!==this.currentBlendSrcAlpha||a!==this.currentBlendDstAlpha)&&(c.blendFuncSeparate(Xa[i],Xa[n],Xa[o],Xa[a]),this.currentBlendSrc=i,this.currentBlendDst=n,this.currentBlendSrcAlpha=o,this.currentBlendDstAlpha=a),this.currentBlending=t,this.currentPremultipledAlpha=!1}setColorMask(t){this.currentColorMask!==t&&(this.gl.colorMask(t,t,t,t),this.currentColorMask=t)}setDepthTest(t){const{gl:e}=this;t?this.enable(e.DEPTH_TEST):this.disable(e.DEPTH_TEST)}setDepthMask(t){this.currentDepthMask!==t&&(this.gl.depthMask(t),this.currentDepthMask=t)}setDepthFunc(t){if(this.currentDepthFunc!==t){const{gl:e}=this;switch(t){case oy:e.depthFunc(e.NEVER);break;case ay:e.depthFunc(e.ALWAYS);break;case ly:e.depthFunc(e.LESS);break;case Sh:e.depthFunc(e.LEQUAL);break;case cy:e.depthFunc(e.EQUAL);break;case hy:e.depthFunc(e.GEQUAL);break;case uy:e.depthFunc(e.GREATER);break;case dy:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}this.currentDepthFunc=t}}setStencilTest(t){const{gl:e}=this;t?this.enable(e.STENCIL_TEST):this.disable(e.STENCIL_TEST)}setStencilMask(t){this.currentStencilMask!==t&&(this.gl.stencilMask(t),this.currentStencilMask=t)}setStencilFunc(t,e,i){(this.currentStencilFunc!==t||this.currentStencilRef!==e||this.currentStencilFuncMask!==i)&&(this.gl.stencilFunc(t,e,i),this.currentStencilFunc=t,this.currentStencilRef=e,this.currentStencilFuncMask=i)}setStencilOp(t,e,i){(this.currentStencilFail!==t||this.currentStencilZFail!==e||this.currentStencilZPass!==i)&&(this.gl.stencilOp(t,e,i),this.currentStencilFail=t,this.currentStencilZFail=e,this.currentStencilZPass=i)}setMaterial(t,e){const{gl:i}=this;t.side===jo?this.disable(i.CULL_FACE):this.enable(i.CULL_FACE);let n=t.side===Tn;e&&(n=!n),this.setFlipSided(n),t.blending===Js&&t.transparent===!1?this.setBlending(ca):this.setBlending(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),this.setDepthFunc(t.depthFunc),this.setDepthTest(t.depthTest),this.setDepthMask(t.depthWrite),this.setColorMask(t.colorWrite);const s=t.stencilWrite;this.setStencilTest(s),s&&(this.setStencilMask(t.stencilWriteMask),this.setStencilFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),this.setStencilOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),this.setPolygonOffset(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),t.alphaToCoverage===!0&&this.backend.renderer.samples>1?this.enable(i.SAMPLE_ALPHA_TO_COVERAGE):this.disable(i.SAMPLE_ALPHA_TO_COVERAGE)}setPolygonOffset(t,e,i){const{gl:n}=this;t?(this.enable(n.POLYGON_OFFSET_FILL),(this.currentPolygonOffsetFactor!==e||this.currentPolygonOffsetUnits!==i)&&(n.polygonOffset(e,i),this.currentPolygonOffsetFactor=e,this.currentPolygonOffsetUnits=i)):this.disable(n.POLYGON_OFFSET_FILL)}useProgram(t){return this.currentProgram!==t?(this.gl.useProgram(t),this.currentProgram=t,!0):!1}bindFramebuffer(t,e){const{gl:i,currentBoundFramebuffers:n}=this;return n[t]!==e?(i.bindFramebuffer(t,e),n[t]=e,t===i.DRAW_FRAMEBUFFER&&(n[i.FRAMEBUFFER]=e),t===i.FRAMEBUFFER&&(n[i.DRAW_FRAMEBUFFER]=e),!0):!1}drawBuffers(t,e){const{gl:i}=this;let n=[],s=!1;if(t.textures!==null){n=this.currentDrawbuffers.get(e),n===void 0&&(n=[],this.currentDrawbuffers.set(e,n));const o=t.textures;if(n.length!==o.length||n[0]!==i.COLOR_ATTACHMENT0){for(let a=0,l=o.length;a<l;a++)n[a]=i.COLOR_ATTACHMENT0+a;n.length=o.length,s=!0}}else n[0]!==i.BACK&&(n[0]=i.BACK,s=!0);s&&i.drawBuffers(n)}activeTexture(t){const{gl:e,currentTextureSlot:i,maxTextures:n}=this;t===void 0&&(t=e.TEXTURE0+n-1),i!==t&&(e.activeTexture(t),this.currentTextureSlot=t)}bindTexture(t,e,i){const{gl:n,currentTextureSlot:s,currentBoundTextures:o,maxTextures:a}=this;i===void 0&&(s===null?i=n.TEXTURE0+a-1:i=s);let l=o[i];l===void 0&&(l={type:void 0,texture:void 0},o[i]=l),(l.type!==t||l.texture!==e)&&(s!==i&&(n.activeTexture(i),this.currentTextureSlot=i),n.bindTexture(t,e),l.type=t,l.texture=e)}bindBufferBase(t,e,i){const{gl:n}=this,s=`${t}-${e}`;return this.currentBoundBufferBases[s]!==i?(n.bindBufferBase(t,e,i),this.currentBoundBufferBases[s]=i,!0):!1}unbindTexture(){const{gl:t,currentTextureSlot:e,currentBoundTextures:i}=this,n=i[e];n!==void 0&&n.type!==void 0&&(t.bindTexture(n.type,null),n.type=void 0,n.texture=void 0)}}class IU{constructor(t){this.backend=t,this.gl=this.backend.gl,this.extensions=t.extensions}convert(t,e=zr){const{gl:i,extensions:n}=this;let s;if(t===tr)return i.UNSIGNED_BYTE;if(t===P1)return i.UNSIGNED_SHORT_4_4_4_4;if(t===D1)return i.UNSIGNED_SHORT_5_5_5_1;if(t===fy)return i.UNSIGNED_INT_5_9_9_9_REV;if(t===il)return i.BYTE;if(t===nl)return i.SHORT;if(t===zo)return i.UNSIGNED_SHORT;if(t===Ti)return i.INT;if(t===ai)return i.UNSIGNED_INT;if(t===qi)return i.FLOAT;if(t===gs)return i.HALF_FLOAT;if(t===L1)return i.ALPHA;if(t===Vp)return i.RGB;if(t===xa)return i.RGBA;if(t===F1)return i.LUMINANCE;if(t===U1)return i.LUMINANCE_ALPHA;if(t===Ur)return i.DEPTH_COMPONENT;if(t===ua)return i.DEPTH_STENCIL;if(t===Hp)return i.RED;if(t===Wp)return i.RED_INTEGER;if(t===dl)return i.RG;if(t===$p)return i.RG_INTEGER;if(t===Xp)return i.RGBA_INTEGER;if(t===ku||t===sh||t===rh||t===oh)if(e===Lt)if(s=n.get("WEBGL_compressed_texture_s3tc_srgb"),s!==null){if(t===ku)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(t===sh)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(t===rh)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(t===oh)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(s=n.get("WEBGL_compressed_texture_s3tc"),s!==null){if(t===ku)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===sh)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===rh)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===oh)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(t===Qg||t===Jg||t===t_||t===e_)if(s=n.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(t===Qg)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===Jg)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===t_)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===e_)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(t===i_||t===Hf||t===Wf)if(s=n.get("WEBGL_compressed_texture_etc"),s!==null){if(t===i_||t===Hf)return e===Lt?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(t===Wf)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(t===$f||t===Xf||t===qf||t===Yf||t===jf||t===Kf||t===Zf||t===Qf||t===Jf||t===tp||t===ep||t===ip||t===np||t===sp)if(s=n.get("WEBGL_compressed_texture_astc"),s!==null){if(t===$f)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(t===Xf)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(t===qf)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(t===Yf)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(t===jf)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(t===Kf)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(t===Zf)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(t===Qf)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(t===Jf)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(t===tp)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(t===ep)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(t===ip)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(t===np)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(t===sp)return e===Lt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(t===Vu)if(s=n.get("EXT_texture_compression_bptc"),s!==null){if(t===Vu)return e===Lt?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT}else return null;if(t===B1||t===n_||t===s_||t===r_)if(s=n.get("EXT_texture_compression_rgtc"),s!==null){if(t===Vu)return s.COMPRESSED_RED_RGTC1_EXT;if(t===n_)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(t===s_)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(t===r_)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return t===wl?i.UNSIGNED_INT_24_8:i[t]!==void 0?i[t]:null}_clientWaitAsync(){const{gl:t}=this,e=t.fenceSync(t.SYNC_GPU_COMMANDS_COMPLETE,0);return t.flush(),new Promise((i,n)=>{function s(){const o=t.clientWaitSync(e,t.SYNC_FLUSH_COMMANDS_BIT,0);if(o===t.WAIT_FAILED){t.deleteSync(e),n();return}if(o===t.TIMEOUT_EXPIRED){requestAnimationFrame(s);return}t.deleteSync(e),i()}s()})}}let Ox=!1,Vc,Hd,zx;class BU{constructor(t){this.backend=t,this.gl=t.gl,this.extensions=t.extensions,this.defaultTextures={},Ox===!1&&(this._init(this.gl),Ox=!0)}_init(t){Vc={[Mh]:t.REPEAT,[Oo]:t.CLAMP_TO_EDGE,[Th]:t.MIRRORED_REPEAT},Hd={[yi]:t.NEAREST,[kf]:t.NEAREST_MIPMAP_NEAREST,[Zo]:t.NEAREST_MIPMAP_LINEAR,[Yi]:t.LINEAR,[Vf]:t.LINEAR_MIPMAP_NEAREST,[ms]:t.LINEAR_MIPMAP_LINEAR},zx={[my]:t.NEVER,[Sy]:t.ALWAYS,[qp]:t.LESS,[_y]:t.LEQUAL,[gy]:t.EQUAL,[vy]:t.GEQUAL,[xy]:t.GREATER,[yy]:t.NOTEQUAL}}filterFallback(t){const{gl:e}=this;return t===yi||t===kf||t===Zo?e.NEAREST:e.LINEAR}getGLTextureType(t){const{gl:e}=this;let i;return t.isCubeTexture===!0?i=e.TEXTURE_CUBE_MAP:t.isDataArrayTexture===!0||t.isCompressedArrayTexture===!0?i=e.TEXTURE_2D_ARRAY:t.isData3DTexture===!0?i=e.TEXTURE_3D:i=e.TEXTURE_2D,i}getInternalFormat(t,e,i,n,s=!1){const{gl:o,extensions:a}=this;if(t!==null){if(o[t]!==void 0)return o[t];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+t+"'")}let l=e;return e===o.RED&&(i===o.FLOAT&&(l=o.R32F),i===o.HALF_FLOAT&&(l=o.R16F),i===o.UNSIGNED_BYTE&&(l=o.R8),i===o.UNSIGNED_SHORT&&(l=o.R16),i===o.UNSIGNED_INT&&(l=o.R32UI),i===o.BYTE&&(l=o.R8I),i===o.SHORT&&(l=o.R16I),i===o.INT&&(l=o.R32I)),e===o.RED_INTEGER&&(i===o.UNSIGNED_BYTE&&(l=o.R8UI),i===o.UNSIGNED_SHORT&&(l=o.R16UI),i===o.UNSIGNED_INT&&(l=o.R32UI),i===o.BYTE&&(l=o.R8I),i===o.SHORT&&(l=o.R16I),i===o.INT&&(l=o.R32I)),e===o.RG&&(i===o.FLOAT&&(l=o.RG32F),i===o.HALF_FLOAT&&(l=o.RG16F),i===o.UNSIGNED_BYTE&&(l=o.RG8),i===o.UNSIGNED_SHORT&&(l=o.RG16),i===o.UNSIGNED_INT&&(l=o.RG32UI),i===o.BYTE&&(l=o.RG8I),i===o.SHORT&&(l=o.RG16I),i===o.INT&&(l=o.RG32I)),e===o.RG_INTEGER&&(i===o.UNSIGNED_BYTE&&(l=o.RG8UI),i===o.UNSIGNED_SHORT&&(l=o.RG16UI),i===o.UNSIGNED_INT&&(l=o.RG32UI),i===o.BYTE&&(l=o.RG8I),i===o.SHORT&&(l=o.RG16I),i===o.INT&&(l=o.RG32I)),e===o.RGB&&(i===o.FLOAT&&(l=o.RGB32F),i===o.HALF_FLOAT&&(l=o.RGB16F),i===o.UNSIGNED_BYTE&&(l=o.RGB8),i===o.UNSIGNED_SHORT&&(l=o.RGB16),i===o.UNSIGNED_INT&&(l=o.RGB32UI),i===o.BYTE&&(l=o.RGB8I),i===o.SHORT&&(l=o.RGB16I),i===o.INT&&(l=o.RGB32I),i===o.UNSIGNED_BYTE&&(l=n===Lt&&s===!1?o.SRGB8:o.RGB8),i===o.UNSIGNED_SHORT_5_6_5&&(l=o.RGB565),i===o.UNSIGNED_SHORT_5_5_5_1&&(l=o.RGB5_A1),i===o.UNSIGNED_SHORT_4_4_4_4&&(l=o.RGB4),i===o.UNSIGNED_INT_5_9_9_9_REV&&(l=o.RGB9_E5)),e===o.RGB_INTEGER&&(i===o.UNSIGNED_BYTE&&(l=o.RGB8UI),i===o.UNSIGNED_SHORT&&(l=o.RGB16UI),i===o.UNSIGNED_INT&&(l=o.RGB32UI),i===o.BYTE&&(l=o.RGB8I),i===o.SHORT&&(l=o.RGB16I),i===o.INT&&(l=o.RGB32I)),e===o.RGBA&&(i===o.FLOAT&&(l=o.RGBA32F),i===o.HALF_FLOAT&&(l=o.RGBA16F),i===o.UNSIGNED_BYTE&&(l=o.RGBA8),i===o.UNSIGNED_SHORT&&(l=o.RGBA16),i===o.UNSIGNED_INT&&(l=o.RGBA32UI),i===o.BYTE&&(l=o.RGBA8I),i===o.SHORT&&(l=o.RGBA16I),i===o.INT&&(l=o.RGBA32I),i===o.UNSIGNED_BYTE&&(l=n===Lt&&s===!1?o.SRGB8_ALPHA8:o.RGBA8),i===o.UNSIGNED_SHORT_4_4_4_4&&(l=o.RGBA4),i===o.UNSIGNED_SHORT_5_5_5_1&&(l=o.RGB5_A1)),e===o.RGBA_INTEGER&&(i===o.UNSIGNED_BYTE&&(l=o.RGBA8UI),i===o.UNSIGNED_SHORT&&(l=o.RGBA16UI),i===o.UNSIGNED_INT&&(l=o.RGBA32UI),i===o.BYTE&&(l=o.RGBA8I),i===o.SHORT&&(l=o.RGBA16I),i===o.INT&&(l=o.RGBA32I)),e===o.DEPTH_COMPONENT&&(i===o.UNSIGNED_INT&&(l=o.DEPTH24_STENCIL8),i===o.FLOAT&&(l=o.DEPTH_COMPONENT32F)),e===o.DEPTH_STENCIL&&i===o.UNSIGNED_INT_24_8&&(l=o.DEPTH24_STENCIL8),(l===o.R16F||l===o.R32F||l===o.RG16F||l===o.RG32F||l===o.RGBA16F||l===o.RGBA32F)&&a.get("EXT_color_buffer_float"),l}setTextureParameters(t,e){const{gl:i,extensions:n,backend:s}=this;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,e.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,e.unpackAlignment),i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,i.NONE),i.texParameteri(t,i.TEXTURE_WRAP_S,Vc[e.wrapS]),i.texParameteri(t,i.TEXTURE_WRAP_T,Vc[e.wrapT]),(t===i.TEXTURE_3D||t===i.TEXTURE_2D_ARRAY)&&i.texParameteri(t,i.TEXTURE_WRAP_R,Vc[e.wrapR]),i.texParameteri(t,i.TEXTURE_MAG_FILTER,Hd[e.magFilter]);const o=e.mipmaps!==void 0&&e.mipmaps.length>0,a=e.minFilter===Yi&&o?ms:e.minFilter;if(i.texParameteri(t,i.TEXTURE_MIN_FILTER,Hd[a]),e.compareFunction&&(i.texParameteri(t,i.TEXTURE_COMPARE_MODE,i.COMPARE_REF_TO_TEXTURE),i.texParameteri(t,i.TEXTURE_COMPARE_FUNC,zx[e.compareFunction])),n.has("EXT_texture_filter_anisotropic")===!0){if(e.magFilter===yi||e.minFilter!==Zo&&e.minFilter!==ms||e.type===qi&&n.has("OES_texture_float_linear")===!1)return;if(e.anisotropy>1){const l=n.get("EXT_texture_filter_anisotropic");i.texParameterf(t,l.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(e.anisotropy,s.getMaxAnisotropy()))}}}createDefaultTexture(t){const{gl:e,backend:i,defaultTextures:n}=this,s=this.getGLTextureType(t);let o=n[s];o===void 0&&(o=e.createTexture(),i.state.bindTexture(s,o),e.texParameteri(s,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(s,e.TEXTURE_MAG_FILTER,e.NEAREST),n[s]=o),i.set(t,{textureGPU:o,glTextureType:s,isDefault:!0})}createTexture(t,e){const{gl:i,backend:n}=this,{levels:s,width:o,height:a,depth:l}=e,c=n.utils.convert(t.format,t.colorSpace),h=n.utils.convert(t.type),u=this.getInternalFormat(t.internalFormat,c,h,t.colorSpace,t.isVideoTexture),d=i.createTexture(),f=this.getGLTextureType(t);n.state.bindTexture(f,d),this.setTextureParameters(f,t),t.isDataArrayTexture||t.isCompressedArrayTexture?i.texStorage3D(i.TEXTURE_2D_ARRAY,s,u,o,a,l):t.isData3DTexture?i.texStorage3D(i.TEXTURE_3D,s,u,o,a,l):t.isVideoTexture||i.texStorage2D(f,s,u,o,a),n.set(t,{textureGPU:d,glTextureType:f,glFormat:c,glType:h,glInternalFormat:u})}copyBufferToTexture(t,e){const{gl:i,backend:n}=this,{textureGPU:s,glTextureType:o,glFormat:a,glType:l}=n.get(e),{width:c,height:h}=e.source.data;i.bindBuffer(i.PIXEL_UNPACK_BUFFER,t),n.state.bindTexture(o,s),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,!1),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),i.texSubImage2D(o,0,0,0,c,h,a,l,0),i.bindBuffer(i.PIXEL_UNPACK_BUFFER,null),n.state.unbindTexture()}updateTexture(t,e){const{gl:i}=this,{width:n,height:s}=e,{textureGPU:o,glTextureType:a,glFormat:l,glType:c,glInternalFormat:h}=this.backend.get(t);if(t.isRenderTargetTexture||o===void 0)return;const u=d=>d.isDataTexture?d.image.data:d instanceof ImageBitmap||d instanceof OffscreenCanvas||d instanceof HTMLImageElement||d instanceof HTMLCanvasElement?d:d.data;if(this.backend.state.bindTexture(a,o),this.setTextureParameters(a,t),t.isCompressedTexture){const d=t.mipmaps,f=e.image;for(let p=0;p<d.length;p++){const _=d[p];t.isCompressedArrayTexture?t.format!==i.RGBA?l!==null?i.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,p,0,0,0,_.width,_.height,f.depth,l,_.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):i.texSubImage3D(i.TEXTURE_2D_ARRAY,p,0,0,0,_.width,_.height,f.depth,l,c,_.data):l!==null?i.compressedTexSubImage2D(i.TEXTURE_2D,p,0,0,_.width,_.height,l,_.data):console.warn("Unsupported compressed texture format")}}else if(t.isCubeTexture){const d=e.images;for(let f=0;f<6;f++){const p=u(d[f]);i.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,0,0,n,s,l,c,p)}}else if(t.isDataArrayTexture){const d=e.image;i.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,0,d.width,d.height,d.depth,l,c,d.data)}else if(t.isData3DTexture){const d=e.image;i.texSubImage3D(i.TEXTURE_3D,0,0,0,0,d.width,d.height,d.depth,l,c,d.data)}else if(t.isVideoTexture)t.update(),i.texImage2D(a,0,h,l,c,e.image);else{const d=u(e.image);i.texSubImage2D(a,0,0,0,n,s,l,c,d)}}generateMipmaps(t){const{gl:e,backend:i}=this,{textureGPU:n,glTextureType:s}=i.get(t);i.state.bindTexture(s,n),e.generateMipmap(s)}deallocateRenderBuffers(t){const{gl:e,backend:i}=this;if(t){const n=i.get(t);if(n.renderBufferStorageSetup=void 0,n.framebuffers){for(const s in n.framebuffers)e.deleteFramebuffer(n.framebuffers[s]);delete n.framebuffers}if(n.depthRenderbuffer&&(e.deleteRenderbuffer(n.depthRenderbuffer),delete n.depthRenderbuffer),n.stencilRenderbuffer&&(e.deleteRenderbuffer(n.stencilRenderbuffer),delete n.stencilRenderbuffer),n.msaaFrameBuffer&&(e.deleteFramebuffer(n.msaaFrameBuffer),delete n.msaaFrameBuffer),n.msaaRenderbuffers){for(let s=0;s<n.msaaRenderbuffers.length;s++)e.deleteRenderbuffer(n.msaaRenderbuffers[s]);delete n.msaaRenderbuffers}}}destroyTexture(t){const{gl:e,backend:i}=this,{textureGPU:n,renderTarget:s}=i.get(t);this.deallocateRenderBuffers(s),e.deleteTexture(n),i.delete(t)}copyTextureToTexture(t,e,i=null,n=null,s=0){const{gl:o,backend:a}=this,{state:l}=this.backend,{textureGPU:c,glTextureType:h,glType:u,glFormat:d}=a.get(e);let f,p,_,g,m,y;i!==null?(f=i.max.x-i.min.x,p=i.max.y-i.min.y,_=i.min.x,g=i.min.y):(f=t.image.width,p=t.image.height,_=0,g=0),n!==null?(m=n.x,y=n.y):(m=0,y=0),l.bindTexture(h,c),o.pixelStorei(o.UNPACK_ALIGNMENT,e.unpackAlignment),o.pixelStorei(o.UNPACK_FLIP_Y_WEBGL,e.flipY),o.pixelStorei(o.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),o.pixelStorei(o.UNPACK_ALIGNMENT,e.unpackAlignment);const v=o.getParameter(o.UNPACK_ROW_LENGTH),x=o.getParameter(o.UNPACK_IMAGE_HEIGHT),C=o.getParameter(o.UNPACK_SKIP_PIXELS),A=o.getParameter(o.UNPACK_SKIP_ROWS),E=o.getParameter(o.UNPACK_SKIP_IMAGES),w=t.isCompressedTexture?t.mipmaps[s]:t.image;if(o.pixelStorei(o.UNPACK_ROW_LENGTH,w.width),o.pixelStorei(o.UNPACK_IMAGE_HEIGHT,w.height),o.pixelStorei(o.UNPACK_SKIP_PIXELS,_),o.pixelStorei(o.UNPACK_SKIP_ROWS,g),t.isRenderTargetTexture||t.isDepthTexture){const T=a.get(t),S=a.get(e),N=a.get(T.renderTarget),G=a.get(S.renderTarget),B=N.framebuffers[T.cacheKey],V=G.framebuffers[S.cacheKey];l.bindFramebuffer(o.READ_FRAMEBUFFER,B),l.bindFramebuffer(o.DRAW_FRAMEBUFFER,V);let Q=o.COLOR_BUFFER_BIT;t.isDepthTexture&&(Q=o.DEPTH_BUFFER_BIT),o.blitFramebuffer(_,g,f,p,m,y,f,p,Q,o.NEAREST),l.bindFramebuffer(o.READ_FRAMEBUFFER,null),l.bindFramebuffer(o.DRAW_FRAMEBUFFER,null)}else t.isDataTexture?o.texSubImage2D(o.TEXTURE_2D,s,m,y,f,p,d,u,w.data):t.isCompressedTexture?o.compressedTexSubImage2D(o.TEXTURE_2D,s,m,y,w.width,w.height,d,w.data):o.texSubImage2D(o.TEXTURE_2D,s,m,y,f,p,d,u,w);o.pixelStorei(o.UNPACK_ROW_LENGTH,v),o.pixelStorei(o.UNPACK_IMAGE_HEIGHT,x),o.pixelStorei(o.UNPACK_SKIP_PIXELS,C),o.pixelStorei(o.UNPACK_SKIP_ROWS,A),o.pixelStorei(o.UNPACK_SKIP_IMAGES,E),s===0&&e.generateMipmaps&&o.generateMipmap(o.TEXTURE_2D),l.unbindTexture()}copyFramebufferToTexture(t,e,i){const{gl:n}=this,{state:s}=this.backend,{textureGPU:o}=this.backend.get(t),{x:a,y:l,z:c,w:h}=i,u=t.isDepthTexture===!0||e.renderTarget&&e.renderTarget.samples>0,d=e.renderTarget?e.renderTarget.height:this.backend.gerDrawingBufferSize().y;if(u){const f=a!==0||l!==0;let p,_;if(t.isDepthTexture===!0?(p=n.DEPTH_BUFFER_BIT,_=n.DEPTH_ATTACHMENT,e.stencil&&(p|=n.STENCIL_BUFFER_BIT)):(p=n.COLOR_BUFFER_BIT,_=n.COLOR_ATTACHMENT0),f){const g=this.backend.get(e.renderTarget),m=g.framebuffers[e.getCacheKey()],y=g.msaaFrameBuffer;s.bindFramebuffer(n.DRAW_FRAMEBUFFER,m),s.bindFramebuffer(n.READ_FRAMEBUFFER,y);const v=d-l-h;n.blitFramebuffer(a,v,a+c,v+h,a,v,a+c,v+h,p,n.NEAREST),s.bindFramebuffer(n.READ_FRAMEBUFFER,m),s.bindTexture(n.TEXTURE_2D,o),n.copyTexSubImage2D(n.TEXTURE_2D,0,0,0,a,v,c,h),s.unbindTexture()}else{const g=n.createFramebuffer();s.bindFramebuffer(n.DRAW_FRAMEBUFFER,g),n.framebufferTexture2D(n.DRAW_FRAMEBUFFER,_,n.TEXTURE_2D,o,0),n.blitFramebuffer(0,0,c,h,0,0,c,h,p,n.NEAREST),n.deleteFramebuffer(g)}}else s.bindTexture(n.TEXTURE_2D,o),n.copyTexSubImage2D(n.TEXTURE_2D,0,0,0,a,d-h-l,c,h),s.unbindTexture();t.generateMipmaps&&this.generateMipmaps(t),this.backend._setFramebuffer(e)}setupRenderBufferStorage(t,e){const{gl:i}=this,n=e.renderTarget,{samples:s,depthTexture:o,depthBuffer:a,stencilBuffer:l,width:c,height:h}=n;if(i.bindRenderbuffer(i.RENDERBUFFER,t),a&&!l){let u=i.DEPTH_COMPONENT24;s>0?(o&&o.isDepthTexture&&o.type===i.FLOAT&&(u=i.DEPTH_COMPONENT32F),i.renderbufferStorageMultisample(i.RENDERBUFFER,s,u,c,h)):i.renderbufferStorage(i.RENDERBUFFER,u,c,h),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.RENDERBUFFER,t)}else a&&l&&(s>0?i.renderbufferStorageMultisample(i.RENDERBUFFER,s,i.DEPTH24_STENCIL8,c,h):i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_STENCIL,c,h),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.RENDERBUFFER,t))}async copyTextureToBuffer(t,e,i,n,s,o){const{backend:a,gl:l}=this,{textureGPU:c,glFormat:h,glType:u}=this.backend.get(t),d=l.createFramebuffer();l.bindFramebuffer(l.READ_FRAMEBUFFER,d);const f=t.isCubeTexture?l.TEXTURE_CUBE_MAP_POSITIVE_X+o:l.TEXTURE_2D;l.framebufferTexture2D(l.READ_FRAMEBUFFER,l.COLOR_ATTACHMENT0,f,c,0);const p=this._getTypedArrayType(u),_=this._getBytesPerTexel(u,h),m=n*s*_,y=l.createBuffer();l.bindBuffer(l.PIXEL_PACK_BUFFER,y),l.bufferData(l.PIXEL_PACK_BUFFER,m,l.STREAM_READ),l.readPixels(e,i,n,s,h,u,0),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),await a.utils._clientWaitAsync();const v=new p(m/p.BYTES_PER_ELEMENT);return l.bindBuffer(l.PIXEL_PACK_BUFFER,y),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,v),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),l.deleteFramebuffer(d),v}_getTypedArrayType(t){const{gl:e}=this;if(t===e.UNSIGNED_BYTE)return Uint8Array;if(t===e.UNSIGNED_SHORT_4_4_4_4||t===e.UNSIGNED_SHORT_5_5_5_1||t===e.UNSIGNED_SHORT_5_6_5||t===e.UNSIGNED_SHORT)return Uint16Array;if(t===e.UNSIGNED_INT)return Uint32Array;if(t===e.HALF_FLOAT)return Uint16Array;if(t===e.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${t}`)}_getBytesPerTexel(t,e){const{gl:i}=this;let n=0;if(t===i.UNSIGNED_BYTE&&(n=1),(t===i.UNSIGNED_SHORT_4_4_4_4||t===i.UNSIGNED_SHORT_5_5_5_1||t===i.UNSIGNED_SHORT_5_6_5||t===i.UNSIGNED_SHORT||t===i.HALF_FLOAT)&&(n=2),(t===i.UNSIGNED_INT||t===i.FLOAT)&&(n=4),e===i.RGBA)return n*4;if(e===i.RGB)return n*3;if(e===i.ALPHA)return n}}class OU{constructor(t){this.backend=t,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(t){let e=this.extensions[t];return e===void 0&&(e=this.gl.getExtension(t),this.extensions[t]=e),e}has(t){return this.availableExtensions.includes(t)}}class zU{constructor(t){this.backend=t,this.maxAnisotropy=null}getMaxAnisotropy(){if(this.maxAnisotropy!==null)return this.maxAnisotropy;const t=this.backend.gl,e=this.backend.extensions;if(e.has("EXT_texture_filter_anisotropic")===!0){const i=e.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=t.getParameter(i.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const Gx={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query"};class GU{constructor(t){this.gl=t.gl,this.extensions=t.extensions,this.info=t.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(t,e){const{gl:i,mode:n,object:s,type:o,info:a,index:l}=this;l!==0?i.drawElements(n,e,o,t):i.drawArrays(n,t,e),a.update(s,e,n,1)}renderInstances(t,e,i){const{gl:n,mode:s,type:o,index:a,object:l,info:c}=this;i!==0&&(a!==0?n.drawElementsInstanced(s,e,o,t,i):n.drawArraysInstanced(s,t,e,i),c.update(l,e,s,i))}renderMultiDraw(t,e,i){const{extensions:n,mode:s,object:o,info:a}=this;if(i===0)return;const l=n.get("WEBGL_multi_draw");if(l===null)for(let c=0;c<i;c++)this.render(t[c],e[c]);else{this.index!==0?l.multiDrawElementsWEBGL(s,e,0,this.type,t,0,i):l.multiDrawArraysWEBGL(s,t,0,e,0,i);let c=0;for(let h=0;h<i;h++)c+=e[h];a.update(o,c,s,1)}}renderMultiDrawInstances(t,e,i,n){const{extensions:s,mode:o,object:a,info:l}=this;if(i===0)return;const c=s.get("WEBGL_multi_draw");if(c===null)for(let h=0;h<i;h++)this.renderInstances(t[h],e[h],n[h]);else{this.index!==0?c.multiDrawElementsInstancedWEBGL(o,e,0,this.type,t,0,n,0,i):c.multiDrawArraysInstancedWEBGL(o,t,0,e,0,n,0,i);let h=0;for(let u=0;u<i;u++)h+=e[u]*n[u];l.update(a,h,o,1)}}}class kx extends SS{constructor(t={}){super(t),this.isWebGLBackend=!0}init(t){super.init(t);const e=this.parameters,i=e.context!==void 0?e.context:t.domElement.getContext("webgl2");function n(s){s.preventDefault();const o={api:"WebGL",message:s.statusMessage||"Unknown reason",reason:null,originalEvent:s};t.onDeviceLost(o)}this._onContextLost=n,t.domElement.addEventListener("webglcontextlost",n,!1),this.gl=i,this.extensions=new OU(this),this.capabilities=new zU(this),this.attributeUtils=new FU(this),this.textureUtils=new BU(this),this.bufferRenderer=new GU(this),this.state=new UU(this),this.utils=new IU(this),this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.trackTimestamp=e.trackTimestamp===!0,this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile"),this._knownBindings=new WeakSet,this._currentContext=null}get coordinateSystem(){return vn}async getArrayBufferAsync(t){return await this.attributeUtils.getArrayBufferAsync(t)}async waitForGPU(){await this.utils._clientWaitAsync()}initTimestampQuery(t){if(!this.disjoint||!this.trackTimestamp)return;const e=this.get(t);if(this.queryRunning){e.queryQueue||(e.queryQueue=[]),e.queryQueue.push(t);return}e.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),e.activeQuery=null),e.activeQuery=this.gl.createQuery(),e.activeQuery!==null&&(this.gl.beginQuery(this.disjoint.TIME_ELAPSED_EXT,e.activeQuery),this.queryRunning=!0)}prepareTimestampBuffer(t){if(!this.disjoint||!this.trackTimestamp)return;const e=this.get(t);if(e.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),e.gpuQueries||(e.gpuQueries=[]),e.gpuQueries.push({query:e.activeQuery}),e.activeQuery=null,this.queryRunning=!1,e.queryQueue&&e.queryQueue.length>0)){const i=e.queryQueue.shift();this.initTimestampQuery(i)}}async resolveTimestampAsync(t,e="render"){if(!this.disjoint||!this.trackTimestamp)return;const i=this.get(t);i.gpuQueries||(i.gpuQueries=[]);for(let n=0;n<i.gpuQueries.length;n++){const s=i.gpuQueries[n],o=this.gl.getQueryParameter(s.query,this.gl.QUERY_RESULT_AVAILABLE),a=this.gl.getParameter(this.disjoint.GPU_DISJOINT_EXT);if(o&&!a){const l=this.gl.getQueryParameter(s.query,this.gl.QUERY_RESULT),c=Number(l)/1e6;this.gl.deleteQuery(s.query),i.gpuQueries.splice(n,1),n--,this.renderer.info.updateTimestamp(e,c)}}}getContext(){return this.gl}beginRender(t){const{gl:e}=this,i=this.get(t);if(this.initTimestampQuery(t),i.previousContext=this._currentContext,this._currentContext=t,this._setFramebuffer(t),this.clear(t.clearColor,t.clearDepth,t.clearStencil,t,!1),t.viewport?this.updateViewport(t):e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight),t.scissor){const{x:s,y:o,width:a,height:l}=t.scissorValue;e.scissor(s,t.height-l-o,a,l)}const n=t.occlusionQueryCount;n>0&&(i.currentOcclusionQueries=i.occlusionQueries,i.currentOcclusionQueryObjects=i.occlusionQueryObjects,i.lastOcclusionObject=null,i.occlusionQueries=new Array(n),i.occlusionQueryObjects=new Array(n),i.occlusionQueryIndex=0)}finishRender(t){const{gl:e,state:i}=this,n=this.get(t),s=n.previousContext,o=t.occlusionQueryCount;o>0&&(o>n.occlusionQueryIndex&&e.endQuery(e.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(t));const a=t.textures;if(a!==null)for(let l=0;l<a.length;l++){const c=a[l];c.generateMipmaps&&this.generateMipmaps(c)}if(this._currentContext=s,t.textures!==null&&t.renderTarget){const l=this.get(t.renderTarget),{samples:c}=t.renderTarget;if(c>0){const h=l.framebuffers[t.getCacheKey()],u=e.COLOR_BUFFER_BIT,d=l.msaaFrameBuffer,f=t.textures;i.bindFramebuffer(e.READ_FRAMEBUFFER,d),i.bindFramebuffer(e.DRAW_FRAMEBUFFER,h);for(let p=0;p<f.length;p++)if(t.scissor){const{x:_,y:g,width:m,height:y}=t.scissorValue,v=t.height-y-g;e.blitFramebuffer(_,v,_+m,v+y,_,v,_+m,v+y,u,e.NEAREST),e.invalidateSubFramebuffer(e.READ_FRAMEBUFFER,l.invalidationArray,_,v,m,y)}else e.blitFramebuffer(0,0,t.width,t.height,0,0,t.width,t.height,u,e.NEAREST),e.invalidateFramebuffer(e.READ_FRAMEBUFFER,l.invalidationArray)}}s!==null&&(this._setFramebuffer(s),s.viewport?this.updateViewport(s):e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight)),this.prepareTimestampBuffer(t)}resolveOccludedAsync(t){const e=this.get(t),{currentOcclusionQueries:i,currentOcclusionQueryObjects:n}=e;if(i&&n){const s=new WeakSet,{gl:o}=this;e.currentOcclusionQueryObjects=null,e.currentOcclusionQueries=null;const a=()=>{let l=0;for(let c=0;c<i.length;c++){const h=i[c];h!==null&&o.getQueryParameter(h,o.QUERY_RESULT_AVAILABLE)&&(o.getQueryParameter(h,o.QUERY_RESULT)>0&&s.add(n[c]),i[c]=null,o.deleteQuery(h),l++)}l<i.length?requestAnimationFrame(a):e.occluded=s};a()}}isOccluded(t,e){const i=this.get(t);return i.occluded&&i.occluded.has(e)}updateViewport(t){const e=this.gl,{x:i,y:n,width:s,height:o}=t.viewportValue;e.viewport(i,t.height-o-n,s,o)}setScissorTest(t){const e=this.gl;t?e.enable(e.SCISSOR_TEST):e.disable(e.SCISSOR_TEST)}clear(t,e,i,n=null,s=!0){const{gl:o}=this;if(n===null){const l=this.getClearColor();l.r*=l.a,l.g*=l.a,l.b*=l.a,n={textures:null,clearColorValue:l}}let a=0;if(t&&(a|=o.COLOR_BUFFER_BIT),e&&(a|=o.DEPTH_BUFFER_BIT),i&&(a|=o.STENCIL_BUFFER_BIT),a!==0){let l;if(n.clearColorValue?l=n.clearColorValue:(l=this.getClearColor(),l.r*=l.a,l.g*=l.a,l.b*=l.a),e&&this.state.setDepthMask(!0),n.textures===null)o.clearColor(l.r,l.g,l.b,l.a),o.clear(a);else{if(s&&this._setFramebuffer(n),t)for(let c=0;c<n.textures.length;c++)o.clearBufferfv(o.COLOR,c,[l.r,l.g,l.b,l.a]);e&&i?o.clearBufferfi(o.DEPTH_STENCIL,0,1,0):e?o.clearBufferfv(o.DEPTH,0,[1]):i&&o.clearBufferiv(o.STENCIL,0,[0])}}}beginCompute(t){const{state:e,gl:i}=this;e.bindFramebuffer(i.FRAMEBUFFER,null),this.initTimestampQuery(t)}compute(t,e,i,n){const{state:s,gl:o}=this;this.discard||(o.enable(o.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:a,transformBuffers:l,attributes:c}=this.get(n),h=this._getVaoKey(null,c),u=this.vaoCache[h];u===void 0?this._createVao(null,c):o.bindVertexArray(u),s.useProgram(a),this._bindUniforms(i);const d=this._getTransformFeedback(l);o.bindTransformFeedback(o.TRANSFORM_FEEDBACK,d),o.beginTransformFeedback(o.POINTS),c[0].isStorageInstancedBufferAttribute?o.drawArraysInstanced(o.POINTS,0,1,e.count):o.drawArrays(o.POINTS,0,e.count),o.endTransformFeedback(),o.bindTransformFeedback(o.TRANSFORM_FEEDBACK,null);for(let f=0;f<l.length;f++){const p=l[f];p.pbo&&this.textureUtils.copyBufferToTexture(p.transformBuffer,p.pbo),p.switchBuffers()}}finishCompute(t){const e=this.gl;this.discard=!1,e.disable(e.RASTERIZER_DISCARD),this.prepareTimestampBuffer(t),this._currentContext&&this._setFramebuffer(this._currentContext)}draw(t){const{object:e,pipeline:i,material:n,context:s}=t,{programGPU:o}=this.get(i),{gl:a,state:l}=this,c=this.get(s),h=t.getDrawParameters();if(h===null)return;this._bindUniforms(t.getBindings());const u=e.isMesh&&e.matrixWorld.determinant()<0;l.setMaterial(n,u),l.useProgram(o);let d=t.staticVao;if(d===void 0){const v=this._getVaoKey(t.getIndex(),t.getAttributes());if(d=this.vaoCache[v],d===void 0){let x;({vaoGPU:d,staticVao:x}=this._createVao(t.getIndex(),t.getAttributes())),x&&(t.staticVao=d)}}a.bindVertexArray(d);const f=t.getIndex(),p=c.lastOcclusionObject;if(p!==e&&p!==void 0){if(p!==null&&p.occlusionTest===!0&&(a.endQuery(a.ANY_SAMPLES_PASSED),c.occlusionQueryIndex++),e.occlusionTest===!0){const v=a.createQuery();a.beginQuery(a.ANY_SAMPLES_PASSED,v),c.occlusionQueries[c.occlusionQueryIndex]=v,c.occlusionQueryObjects[c.occlusionQueryIndex]=e}c.lastOcclusionObject=e}const _=this.bufferRenderer;e.isPoints?_.mode=a.POINTS:e.isLineSegments?_.mode=a.LINES:e.isLine?_.mode=a.LINE_STRIP:e.isLineLoop?_.mode=a.LINE_LOOP:n.wireframe===!0?(l.setLineWidth(n.wireframeLinewidth*this.renderer.getPixelRatio()),_.mode=a.LINES):_.mode=a.TRIANGLES;const{vertexCount:g,instanceCount:m}=h;let{firstVertex:y}=h;if(_.object=e,f!==null){y*=f.array.BYTES_PER_ELEMENT;const v=this.get(f);_.index=f.count,_.type=v.type}else _.index=0;e.isBatchedMesh?e._multiDrawInstances!==null?_.renderMultiDrawInstances(e._multiDrawStarts,e._multiDrawCounts,e._multiDrawCount,e._multiDrawInstances):this.hasFeature("WEBGL_multi_draw")?_.renderMultiDraw(e._multiDrawStarts,e._multiDrawCounts,e._multiDrawCount):xR("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):m>1?_.renderInstances(y,g,m):_.render(y,g),a.bindVertexArray(null)}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(t){this.textureUtils.createDefaultTexture(t)}createTexture(t,e){this.textureUtils.createTexture(t,e)}updateTexture(t,e){this.textureUtils.updateTexture(t,e)}generateMipmaps(t){this.textureUtils.generateMipmaps(t)}destroyTexture(t){this.textureUtils.destroyTexture(t)}copyTextureToBuffer(t,e,i,n,s,o){return this.textureUtils.copyTextureToBuffer(t,e,i,n,s,o)}createSampler(){}destroySampler(){}createNodeBuilder(t,e){return new PU(t,e)}createProgram(t){const e=this.gl,{stage:i,code:n}=t,s=i==="fragment"?e.createShader(e.FRAGMENT_SHADER):e.createShader(e.VERTEX_SHADER);e.shaderSource(s,n),e.compileShader(s),this.set(t,{shaderGPU:s})}destroyProgram(){console.warn("Abstract class.")}createRenderPipeline(t,e){const i=this.gl,n=t.pipeline,{fragmentProgram:s,vertexProgram:o}=n,a=i.createProgram(),l=this.get(s).shaderGPU,c=this.get(o).shaderGPU;if(i.attachShader(a,l),i.attachShader(a,c),i.linkProgram(a),this.set(n,{programGPU:a,fragmentShader:l,vertexShader:c}),e!==null&&this.parallel){const h=new Promise(u=>{const d=this.parallel,f=()=>{i.getProgramParameter(a,d.COMPLETION_STATUS_KHR)?(this._completeCompile(t,n),u()):requestAnimationFrame(f)};f()});e.push(h);return}this._completeCompile(t,n)}_handleSource(t,e){const i=t.split(`
`),n=[],s=Math.max(e-6,0),o=Math.min(e+6,i.length);for(let a=s;a<o;a++){const l=a+1;n.push(`${l===e?">":" "} ${l}: ${i[a]}`)}return n.join(`
`)}_getShaderErrors(t,e,i){const n=t.getShaderParameter(e,t.COMPILE_STATUS),s=t.getShaderInfoLog(e).trim();if(n&&s==="")return"";const o=/ERROR: 0:(\d+)/.exec(s);if(o){const a=parseInt(o[1]);return i.toUpperCase()+`

`+s+`

`+this._handleSource(t.getShaderSource(e),a)}else return s}_logProgramError(t,e,i){if(this.renderer.debug.checkShaderErrors){const n=this.gl,s=n.getProgramInfoLog(t).trim();if(n.getProgramParameter(t,n.LINK_STATUS)===!1)if(typeof this.renderer.debug.onShaderError=="function")this.renderer.debug.onShaderError(n,t,i,e);else{const o=this._getShaderErrors(n,i,"vertex"),a=this._getShaderErrors(n,e,"fragment");console.error("THREE.WebGLProgram: Shader Error "+n.getError()+" - VALIDATE_STATUS "+n.getProgramParameter(t,n.VALIDATE_STATUS)+`

Program Info Log: `+s+`
`+o+`
`+a)}else s!==""&&console.warn("THREE.WebGLProgram: Program Info Log:",s)}}_completeCompile(t,e){const{state:i,gl:n}=this,s=this.get(e),{programGPU:o,fragmentShader:a,vertexShader:l}=s;n.getProgramParameter(o,n.LINK_STATUS)===!1&&this._logProgramError(o,a,l),i.useProgram(o);const c=t.getBindings();this._setupBindings(c,o),this.set(e,{programGPU:o})}createComputePipeline(t,e){const{state:i,gl:n}=this,s={stage:"fragment",code:`#version 300 es
precision highp float;
void main() {}`};this.createProgram(s);const{computeProgram:o}=t,a=n.createProgram(),l=this.get(s).shaderGPU,c=this.get(o).shaderGPU,h=o.transforms,u=[],d=[];for(let g=0;g<h.length;g++){const m=h[g];u.push(m.varyingName),d.push(m.attributeNode)}n.attachShader(a,l),n.attachShader(a,c),n.transformFeedbackVaryings(a,u,n.SEPARATE_ATTRIBS),n.linkProgram(a),n.getProgramParameter(a,n.LINK_STATUS)===!1&&this._logProgramError(a,l,c),i.useProgram(a),this._setupBindings(e,a);const f=o.attributes,p=[],_=[];for(let g=0;g<f.length;g++){const m=f[g].node.attribute;p.push(m),this.has(m)||this.attributeUtils.createAttribute(m,n.ARRAY_BUFFER)}for(let g=0;g<d.length;g++){const m=d[g].attribute;this.has(m)||this.attributeUtils.createAttribute(m,n.ARRAY_BUFFER);const y=this.get(m);_.push(y)}this.set(t,{programGPU:a,transformBuffers:_,attributes:p})}createBindings(t,e){if(this._knownBindings.has(e)===!1){this._knownBindings.add(e);let i=0,n=0;for(const s of e){this.set(s,{textures:n,uniformBuffers:i});for(const o of s.bindings)o.isUniformBuffer&&i++,o.isSampledTexture&&n++}}this.updateBindings(t,e)}updateBindings(t){const{gl:e}=this,i=this.get(t);let n=i.uniformBuffers,s=i.textures;for(const o of t.bindings)if(o.isUniformsGroup||o.isUniformBuffer){const a=o.buffer,l=e.createBuffer();e.bindBuffer(e.UNIFORM_BUFFER,l),e.bufferData(e.UNIFORM_BUFFER,a,e.DYNAMIC_DRAW),this.set(o,{index:n++,bufferGPU:l})}else if(o.isSampledTexture){const{textureGPU:a,glTextureType:l}=this.get(o.texture);this.set(o,{index:s++,textureGPU:a,glTextureType:l})}}updateBinding(t){const e=this.gl;if(t.isUniformsGroup||t.isUniformBuffer){const n=this.get(t).bufferGPU,s=t.buffer;e.bindBuffer(e.UNIFORM_BUFFER,n),e.bufferData(e.UNIFORM_BUFFER,s,e.DYNAMIC_DRAW)}}createIndexAttribute(t){const e=this.gl;this.attributeUtils.createAttribute(t,e.ELEMENT_ARRAY_BUFFER)}createAttribute(t){if(this.has(t))return;const e=this.gl;this.attributeUtils.createAttribute(t,e.ARRAY_BUFFER)}createStorageAttribute(t){if(this.has(t))return;const e=this.gl;this.attributeUtils.createAttribute(t,e.ARRAY_BUFFER)}updateAttribute(t){this.attributeUtils.updateAttribute(t)}destroyAttribute(t){this.attributeUtils.destroyAttribute(t)}updateSize(){}hasFeature(t){const e=Object.keys(Gx).filter(n=>Gx[n]===t),i=this.extensions;for(let n=0;n<e.length;n++)if(i.has(e[n]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(t,e,i,n,s){this.textureUtils.copyTextureToTexture(t,e,i,n,s)}copyFramebufferToTexture(t,e,i){this.textureUtils.copyFramebufferToTexture(t,e,i)}_setFramebuffer(t){const{gl:e,state:i}=this;let n=null;if(t.textures!==null){const s=t.renderTarget,o=this.get(s),{samples:a,depthBuffer:l,stencilBuffer:c}=s,h=s.isWebGLCubeRenderTarget===!0;let u=o.msaaFrameBuffer,d=o.depthRenderbuffer;const f=nS(t);let p;if(h?(o.cubeFramebuffers||(o.cubeFramebuffers={}),p=o.cubeFramebuffers[f]):(o.framebuffers||(o.framebuffers={}),p=o.framebuffers[f]),p===void 0){p=e.createFramebuffer(),i.bindFramebuffer(e.FRAMEBUFFER,p);const _=t.textures;if(h){o.cubeFramebuffers[f]=p;const{textureGPU:g}=this.get(_[0]),m=this.renderer._activeCubeFace;e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+m,g,0)}else{o.framebuffers[f]=p;for(let g=0;g<_.length;g++){const m=_[g],y=this.get(m);y.renderTarget=t.renderTarget,y.cacheKey=f;const v=e.COLOR_ATTACHMENT0+g;e.framebufferTexture2D(e.FRAMEBUFFER,v,e.TEXTURE_2D,y.textureGPU,0)}i.drawBuffers(t,p)}if(t.depthTexture!==null){const g=this.get(t.depthTexture),m=c?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;g.renderTarget=t.renderTarget,g.cacheKey=f,e.framebufferTexture2D(e.FRAMEBUFFER,m,e.TEXTURE_2D,g.textureGPU,0)}}if(a>0){if(u===void 0){const _=[];u=e.createFramebuffer(),i.bindFramebuffer(e.FRAMEBUFFER,u);const g=[],m=t.textures;for(let y=0;y<m.length;y++){if(g[y]=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,g[y]),_.push(e.COLOR_ATTACHMENT0+y),l){const C=c?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;_.push(C)}const v=t.textures[y],x=this.get(v);e.renderbufferStorageMultisample(e.RENDERBUFFER,a,x.glInternalFormat,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+y,e.RENDERBUFFER,g[y])}if(o.msaaFrameBuffer=u,o.msaaRenderbuffers=g,d===void 0){d=e.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(d,t),o.depthRenderbuffer=d;const y=c?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;_.push(y)}o.invalidationArray=_}n=o.msaaFrameBuffer}else n=p}i.bindFramebuffer(e.FRAMEBUFFER,n)}_getVaoKey(t,e){let i=[];if(t!==null){const n=this.get(t);i+=":"+n.id}for(let n=0;n<e.length;n++){const s=this.get(e[n]);i+=":"+s.id}return i}_createVao(t,e){const{gl:i}=this,n=i.createVertexArray();let s="",o=!0;if(i.bindVertexArray(n),t!==null){const a=this.get(t);i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,a.bufferGPU),s+=":"+a.id}for(let a=0;a<e.length;a++){const l=e[a],c=this.get(l);s+=":"+c.id,i.bindBuffer(i.ARRAY_BUFFER,c.bufferGPU),i.enableVertexAttribArray(a),(l.isStorageBufferAttribute||l.isStorageInstancedBufferAttribute)&&(o=!1);let h,u;l.isInterleavedBufferAttribute===!0?(h=l.data.stride*c.bytesPerElement,u=l.offset*c.bytesPerElement):(h=0,u=0),c.isInteger?i.vertexAttribIPointer(a,l.itemSize,c.type,h,u):i.vertexAttribPointer(a,l.itemSize,c.type,l.normalized,h,u),l.isInstancedBufferAttribute&&!l.isInterleavedBufferAttribute?i.vertexAttribDivisor(a,l.meshPerAttribute):l.isInterleavedBufferAttribute&&l.data.isInstancedInterleavedBuffer&&i.vertexAttribDivisor(a,l.data.meshPerAttribute)}return i.bindBuffer(i.ARRAY_BUFFER,null),this.vaoCache[s]=n,{vaoGPU:n,staticVao:o}}_getTransformFeedback(t){let e="";for(let s=0;s<t.length;s++)e+=":"+t[s].id;let i=this.transformFeedbackCache[e];if(i!==void 0)return i;const{gl:n}=this;i=n.createTransformFeedback(),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,i);for(let s=0;s<t.length;s++){const o=t[s];n.bindBufferBase(n.TRANSFORM_FEEDBACK_BUFFER,s,o.transformBuffer)}return n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[e]=i,i}_setupBindings(t,e){const i=this.gl;for(const n of t)for(const s of n.bindings){const a=this.get(s).index;if(s.isUniformsGroup||s.isUniformBuffer){const l=i.getUniformBlockIndex(e,s.name);i.uniformBlockBinding(e,l,a)}else if(s.isSampledTexture){const l=i.getUniformLocation(e,s.name);i.uniform1i(l,a)}}}_bindUniforms(t){const{gl:e,state:i}=this;for(const n of t)for(const s of n.bindings){const o=this.get(s),a=o.index;s.isUniformsGroup||s.isUniformBuffer?i.bindBufferBase(e.UNIFORM_BUFFER,a,o.bufferGPU):s.isSampledTexture&&i.bindTexture(o.glTextureType,o.textureGPU,e.TEXTURE0+a)}}dispose(){this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}}class kU extends Cm{constructor(t,e){super(t),this.texture=e,this.version=e?e.version:0,this.isSampler=!0}}class VU extends kU{constructor(t,e,i){super(t,e?e.value:null),this.textureNode=e,this.groupNode=i}update(){this.texture=this.textureNode.value}}class HU extends mS{constructor(t,e){super(t,e?e.array:null),this.attribute=e,this.isStorageBuffer=!0}}let WU=0;class $U extends HU{constructor(t,e){super("StorageBuffer_"+WU++,t?t.value:null),this.nodeUniform=t,this.access=t?t.access:vp.Storage,this.groupNode=e}get buffer(){return this.nodeUniform.value}}class XU extends hr{constructor(t){super(),this.device=t;const e=`
struct VarysStruct {
	@builtin( position ) Position: vec4<f32>,
	@location( 0 ) vTex : vec2<f32>
};

@vertex
fn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {

	var Varys : VarysStruct;

	var pos = array< vec2<f32>, 4 >(
		vec2<f32>( -1.0,  1.0 ),
		vec2<f32>(  1.0,  1.0 ),
		vec2<f32>( -1.0, -1.0 ),
		vec2<f32>(  1.0, -1.0 )
	);

	var tex = array< vec2<f32>, 4 >(
		vec2<f32>( 0.0, 0.0 ),
		vec2<f32>( 1.0, 0.0 ),
		vec2<f32>( 0.0, 1.0 ),
		vec2<f32>( 1.0, 1.0 )
	);

	Varys.vTex = tex[ vertexIndex ];
	Varys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );

	return Varys;

}
`,i=`
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vTex );

}
`,n=`
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );

}
`;this.mipmapSampler=t.createSampler({minFilter:Pr.Linear}),this.flipYSampler=t.createSampler({minFilter:Pr.Nearest}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=t.createShaderModule({label:"mipmapVertex",code:e}),this.mipmapFragmentShaderModule=t.createShaderModule({label:"mipmapFragment",code:i}),this.flipYFragmentShaderModule=t.createShaderModule({label:"flipYFragment",code:n})}getTransferPipeline(t){let e=this.transferPipelines[t];return e===void 0&&(e=this.device.createRenderPipeline({label:`mipmap-${t}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:t}]},primitive:{topology:Ho.TriangleStrip,stripIndexFormat:pa.Uint32},layout:"auto"}),this.transferPipelines[t]=e),e}getFlipYPipeline(t){let e=this.flipYPipelines[t];return e===void 0&&(e=this.device.createRenderPipeline({label:`flipY-${t}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:t}]},primitive:{topology:Ho.TriangleStrip,stripIndexFormat:pa.Uint32},layout:"auto"}),this.flipYPipelines[t]=e),e}flipY(t,e,i=0){const n=e.format,{width:s,height:o}=e.size,a=this.getTransferPipeline(n),l=this.getFlipYPipeline(n),c=this.device.createTexture({size:{width:s,height:o,depthOrArrayLayers:1},format:n,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),h=t.createView({baseMipLevel:0,mipLevelCount:1,dimension:tn.TwoD,baseArrayLayer:i}),u=c.createView({baseMipLevel:0,mipLevelCount:1,dimension:tn.TwoD,baseArrayLayer:0}),d=this.device.createCommandEncoder({}),f=(p,_,g)=>{const m=p.getBindGroupLayout(0),y=this.device.createBindGroup({layout:m,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:_}]}),v=d.beginRenderPass({colorAttachments:[{view:g,loadOp:He.Clear,storeOp:oi.Store,clearValue:[0,0,0,0]}]});v.setPipeline(p),v.setBindGroup(0,y),v.draw(4,1,0,0),v.end()};f(a,h,u),f(l,u,h),this.device.queue.submit([d.finish()]),c.destroy()}generateMipmaps(t,e,i=0){const n=this.get(t);n.useCount===void 0&&(n.useCount=0,n.layers=[]);const s=n.layers[i]||this._mipmapCreateBundles(t,e,i),o=this.device.createCommandEncoder({});this._mipmapRunBundles(o,s),this.device.queue.submit([o.finish()]),n.useCount!==0&&(n.layers[i]=s),n.useCount++}_mipmapCreateBundles(t,e,i){const n=this.getTransferPipeline(e.format),s=n.getBindGroupLayout(0);let o=t.createView({baseMipLevel:0,mipLevelCount:1,dimension:tn.TwoD,baseArrayLayer:i});const a=[];for(let l=1;l<e.mipLevelCount;l++){const c=this.device.createBindGroup({layout:s,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:o}]}),h=t.createView({baseMipLevel:l,mipLevelCount:1,dimension:tn.TwoD,baseArrayLayer:i}),u={colorAttachments:[{view:h,loadOp:He.Clear,storeOp:oi.Store,clearValue:[0,0,0,0]}]},d=this.device.createRenderBundleEncoder({colorFormats:[e.format]});d.setPipeline(n),d.setBindGroup(0,c),d.draw(4,1,0,0),a.push({renderBundles:[d.finish()],passDescriptor:u}),o=h}return a}_mipmapRunBundles(t,e){const i=e.length;for(let n=0;n<i;n++){const s=e[n],o=t.beginRenderPass(s.passDescriptor);o.executeBundles(s.renderBundles),o.end()}}}const qU={[my]:"never",[qp]:"less",[gy]:"equal",[_y]:"less-equal",[xy]:"greater",[vy]:"greater-equal",[Sy]:"always",[yy]:"not-equal"},YU=[0,1,3,2,4,5];class jU{constructor(t){this.backend=t,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new Sa,this.depthTexture.name="depthBuffer"}createSampler(t){const e=this.backend,i=e.device,n=e.get(t),s={addressModeU:this._convertAddressMode(t.wrapS),addressModeV:this._convertAddressMode(t.wrapT),addressModeW:this._convertAddressMode(t.wrapR),magFilter:this._convertFilterMode(t.magFilter),minFilter:this._convertFilterMode(t.minFilter),mipmapFilter:this._convertFilterMode(t.minFilter),maxAnisotropy:1};s.magFilter===Pr.Linear&&s.minFilter===Pr.Linear&&s.mipmapFilter===Pr.Linear&&(s.maxAnisotropy=t.anisotropy),t.isDepthTexture&&t.compareFunction!==null&&(s.compare=qU[t.compareFunction]),n.sampler=i.createSampler(s)}createDefaultTexture(t){let e;const i=Tp(t);t.isCubeTexture?e=this._getDefaultCubeTextureGPU(i):t.isVideoTexture?this.backend.get(t).externalTexture=this._getDefaultVideoFrame():e=this._getDefaultTextureGPU(i),this.backend.get(t).texture=e}createTexture(t,e={}){const i=this.backend,n=i.get(t);if(n.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");e.needsMipmaps===void 0&&(e.needsMipmaps=!1),e.levels===void 0&&(e.levels=1),e.depth===void 0&&(e.depth=1);const{width:s,height:o,depth:a,levels:l}=e;t.isFramebufferTexture&&(e.renderTarget?e.format=this.backend.utils.getCurrentColorFormat(e.renderTarget):e.format=this.backend.utils.getPreferredCanvasFormat());const c=this._getDimension(t),h=t.internalFormat||e.format||Tp(t,i.device);n.format=h;let u=e.sampleCount!==void 0?e.sampleCount:1;u=i.utils.getSampleCount(u);const d=t.isRenderTargetTexture&&!t.isMultisampleRenderTargetTexture?1:u;let f=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;t.isStorageTexture===!0&&(f|=GPUTextureUsage.STORAGE_BINDING),t.isCompressedTexture!==!0&&t.isCompressedArrayTexture!==!0&&(f|=GPUTextureUsage.RENDER_ATTACHMENT);const p={label:t.name,size:{width:s,height:o,depthOrArrayLayers:a},mipLevelCount:l,sampleCount:d,dimension:c,format:h,usage:f};if(t.isVideoTexture){const _=t.source.data,g=new VideoFrame(_);p.size.width=g.displayWidth,p.size.height=g.displayHeight,g.close(),n.externalTexture=_}else{if(h===void 0)return console.warn("WebGPURenderer: Texture format not supported."),this.createDefaultTexture(t);n.texture=i.device.createTexture(p)}if(t.isRenderTargetTexture&&u>1&&!t.isMultisampleRenderTargetTexture){const _=Object.assign({},p);_.label=_.label+"-msaa",_.sampleCount=u,n.msaaTexture=i.device.createTexture(_)}n.initialized=!0,n.textureDescriptorGPU=p}destroyTexture(t){const e=this.backend,i=e.get(t);i.texture.destroy(),i.msaaTexture!==void 0&&i.msaaTexture.destroy(),e.delete(t)}destroySampler(t){const i=this.backend.get(t);delete i.sampler}generateMipmaps(t){const e=this.backend.get(t);if(t.isCubeTexture)for(let i=0;i<6;i++)this._generateMipmaps(e.texture,e.textureDescriptorGPU,i);else{const i=t.image.depth||1;for(let n=0;n<i;n++)this._generateMipmaps(e.texture,e.textureDescriptorGPU,n)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const t=this.backend,{width:e,height:i}=t.getDrawingBufferSize();return this.colorBuffer=t.device.createTexture({label:"colorBuffer",size:{width:e,height:i,depthOrArrayLayers:1},sampleCount:t.utils.getSampleCount(t.renderer.samples),format:t.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(t=!0,e=!1){const i=this.backend,{width:n,height:s}=i.getDrawingBufferSize(),o=this.depthTexture,a=i.get(o).texture;let l,c;if(e?(l=ua,c=wl):t&&(l=Ur,c=ai),a!==void 0){if(o.image.width===n&&o.image.height===s&&o.format===l&&o.type===c)return a;this.destroyTexture(o)}return o.name="depthBuffer",o.format=l,o.type=c,o.image.width=n,o.image.height=s,this.createTexture(o,{sampleCount:i.utils.getSampleCount(i.renderer.samples),width:n,height:s}),i.get(o).texture}updateTexture(t,e){const i=this.backend.get(t),{textureDescriptorGPU:n}=i;if(!(t.isRenderTargetTexture||n===void 0)){if(t.isDataTexture)this._copyBufferToTexture(e.image,i.texture,n,0,t.flipY);else if(t.isDataArrayTexture||t.isData3DTexture)for(let s=0;s<e.image.depth;s++)this._copyBufferToTexture(e.image,i.texture,n,s,t.flipY,s);else if(t.isCompressedTexture||t.isCompressedArrayTexture)this._copyCompressedBufferToTexture(t.mipmaps,i.texture,n);else if(t.isCubeTexture)this._copyCubeMapToTexture(e.images,i.texture,n,t.flipY);else if(t.isVideoTexture){const s=t.source.data;i.externalTexture=s}else this._copyImageToTexture(e.image,i.texture,n,0,t.flipY);i.version=t.version,t.onUpdate&&t.onUpdate(t)}}async copyTextureToBuffer(t,e,i,n,s,o){const a=this.backend.device,l=this.backend.get(t),c=l.texture,h=l.textureDescriptorGPU.format,u=this._getBytesPerTexel(h);let d=n*u;d=Math.ceil(d/256)*256;const f=a.createBuffer({size:n*s*u,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),p=a.createCommandEncoder();p.copyTextureToBuffer({texture:c,origin:{x:e,y:i,z:o}},{buffer:f,bytesPerRow:d},{width:n,height:s});const _=this._getTypedArrayType(h);a.queue.submit([p.finish()]),await f.mapAsync(GPUMapMode.READ);const g=f.getMappedRange();return new _(g)}_isEnvironmentTexture(t){const e=t.mapping;return e===El||e===Al||e===Or||e===ha}_getDefaultTextureGPU(t){let e=this.defaultTexture[t];if(e===void 0){const i=new Ei;i.minFilter=yi,i.magFilter=yi,this.createTexture(i,{width:1,height:1,format:t}),this.defaultTexture[t]=e=i}return this.backend.get(e).texture}_getDefaultCubeTextureGPU(t){let e=this.defaultTexture[t];if(e===void 0){const i=new Kp;i.minFilter=yi,i.magFilter=yi,this.createTexture(i,{width:1,height:1,depth:6}),this.defaultCubeTexture[t]=e=i}return this.backend.get(e).texture}_getDefaultVideoFrame(){let t=this.defaultVideoFrame;if(t===null){const e={timestamp:0,codedWidth:1,codedHeight:1,format:"RGBA"};this.defaultVideoFrame=t=new VideoFrame(new Uint8Array([0,0,0,255]),e)}return t}_copyCubeMapToTexture(t,e,i,n){for(let s=0;s<6;s++){const o=t[s],a=n===!0?YU[s]:s;o.isDataTexture?this._copyBufferToTexture(o.image,e,i,a,n):this._copyImageToTexture(o,e,i,a,n)}}_copyImageToTexture(t,e,i,n,s){this.backend.device.queue.copyExternalImageToTexture({source:t},{texture:e,mipLevel:0,origin:{x:0,y:0,z:n}},{width:t.width,height:t.height,depthOrArrayLayers:1}),s===!0&&this._flipY(e,i,n)}_getPassUtils(){let t=this._passUtils;return t===null&&(this._passUtils=t=new XU(this.backend.device)),t}_generateMipmaps(t,e,i=0){this._getPassUtils().generateMipmaps(t,e,i)}_flipY(t,e,i=0){this._getPassUtils().flipY(t,e,i)}_copyBufferToTexture(t,e,i,n,s,o=0){const a=this.backend.device,l=t.data,c=this._getBytesPerTexel(i.format),h=t.width*c;a.queue.writeTexture({texture:e,mipLevel:0,origin:{x:0,y:0,z:n}},l,{offset:t.width*t.height*c*o,bytesPerRow:h},{width:t.width,height:t.height,depthOrArrayLayers:1}),s===!0&&this._flipY(e,i,n)}_copyCompressedBufferToTexture(t,e,i){const n=this.backend.device,s=this._getBlockData(i.format),o=i.size.depthOrArrayLayers>1;for(let a=0;a<t.length;a++){const l=t[a],c=l.width,h=l.height,u=o?i.size.depthOrArrayLayers:1,d=Math.ceil(c/s.width)*s.byteLength,f=d*Math.ceil(h/s.height);for(let p=0;p<u;p++)n.queue.writeTexture({texture:e,mipLevel:a,origin:{x:0,y:0,z:p}},l.data,{offset:p*f,bytesPerRow:d,rowsPerImage:Math.ceil(h/s.height)},{width:Math.ceil(c/s.width)*s.width,height:Math.ceil(h/s.height)*s.height,depthOrArrayLayers:1})}}_getBlockData(t){if(t===D.BC1RGBAUnorm||t===D.BC1RGBAUnormSRGB)return{byteLength:8,width:4,height:4};if(t===D.BC2RGBAUnorm||t===D.BC2RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(t===D.BC3RGBAUnorm||t===D.BC3RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(t===D.BC4RUnorm||t===D.BC4RSNorm)return{byteLength:8,width:4,height:4};if(t===D.BC5RGUnorm||t===D.BC5RGSnorm)return{byteLength:16,width:4,height:4};if(t===D.BC6HRGBUFloat||t===D.BC6HRGBFloat)return{byteLength:16,width:4,height:4};if(t===D.BC7RGBAUnorm||t===D.BC7RGBAUnormSRGB)return{byteLength:16,width:4,height:4};if(t===D.ETC2RGB8Unorm||t===D.ETC2RGB8UnormSRGB)return{byteLength:8,width:4,height:4};if(t===D.ETC2RGB8A1Unorm||t===D.ETC2RGB8A1UnormSRGB)return{byteLength:8,width:4,height:4};if(t===D.ETC2RGBA8Unorm||t===D.ETC2RGBA8UnormSRGB)return{byteLength:16,width:4,height:4};if(t===D.EACR11Unorm)return{byteLength:8,width:4,height:4};if(t===D.EACR11Snorm)return{byteLength:8,width:4,height:4};if(t===D.EACRG11Unorm)return{byteLength:16,width:4,height:4};if(t===D.EACRG11Snorm)return{byteLength:16,width:4,height:4};if(t===D.ASTC4x4Unorm||t===D.ASTC4x4UnormSRGB)return{byteLength:16,width:4,height:4};if(t===D.ASTC5x4Unorm||t===D.ASTC5x4UnormSRGB)return{byteLength:16,width:5,height:4};if(t===D.ASTC5x5Unorm||t===D.ASTC5x5UnormSRGB)return{byteLength:16,width:5,height:5};if(t===D.ASTC6x5Unorm||t===D.ASTC6x5UnormSRGB)return{byteLength:16,width:6,height:5};if(t===D.ASTC6x6Unorm||t===D.ASTC6x6UnormSRGB)return{byteLength:16,width:6,height:6};if(t===D.ASTC8x5Unorm||t===D.ASTC8x5UnormSRGB)return{byteLength:16,width:8,height:5};if(t===D.ASTC8x6Unorm||t===D.ASTC8x6UnormSRGB)return{byteLength:16,width:8,height:6};if(t===D.ASTC8x8Unorm||t===D.ASTC8x8UnormSRGB)return{byteLength:16,width:8,height:8};if(t===D.ASTC10x5Unorm||t===D.ASTC10x5UnormSRGB)return{byteLength:16,width:10,height:5};if(t===D.ASTC10x6Unorm||t===D.ASTC10x6UnormSRGB)return{byteLength:16,width:10,height:6};if(t===D.ASTC10x8Unorm||t===D.ASTC10x8UnormSRGB)return{byteLength:16,width:10,height:8};if(t===D.ASTC10x10Unorm||t===D.ASTC10x10UnormSRGB)return{byteLength:16,width:10,height:10};if(t===D.ASTC12x10Unorm||t===D.ASTC12x10UnormSRGB)return{byteLength:16,width:12,height:10};if(t===D.ASTC12x12Unorm||t===D.ASTC12x12UnormSRGB)return{byteLength:16,width:12,height:12}}_convertAddressMode(t){let e=Cd.ClampToEdge;return t===Mh?e=Cd.Repeat:t===Th&&(e=Cd.MirrorRepeat),e}_convertFilterMode(t){let e=Pr.Linear;return(t===yi||t===kf||t===Zo)&&(e=Pr.Nearest),e}_getBytesPerTexel(t){if(t===D.R8Unorm||t===D.R8Snorm||t===D.R8Uint||t===D.R8Sint)return 1;if(t===D.R16Uint||t===D.R16Sint||t===D.R16Float||t===D.RG8Unorm||t===D.RG8Snorm||t===D.RG8Uint||t===D.RG8Sint)return 2;if(t===D.R32Uint||t===D.R32Sint||t===D.R32Float||t===D.RG16Uint||t===D.RG16Sint||t===D.RG16Float||t===D.RGBA8Unorm||t===D.RGBA8UnormSRGB||t===D.RGBA8Snorm||t===D.RGBA8Uint||t===D.RGBA8Sint||t===D.BGRA8Unorm||t===D.BGRA8UnormSRGB||t===D.RGB9E5UFloat||t===D.RGB10A2Unorm||t===D.RG11B10UFloat||t===D.Depth32Float||t===D.Depth24Plus||t===D.Depth24PlusStencil8||t===D.Depth32FloatStencil8)return 4;if(t===D.RG32Uint||t===D.RG32Sint||t===D.RG32Float||t===D.RGBA16Uint||t===D.RGBA16Sint||t===D.RGBA16Float)return 8;if(t===D.RGBA32Uint||t===D.RGBA32Sint||t===D.RGBA32Float)return 16}_getTypedArrayType(t){if(t===D.R8Uint)return Uint8Array;if(t===D.R8Sint)return Int8Array;if(t===D.R8Unorm)return Uint8Array;if(t===D.R8Snorm)return Int8Array;if(t===D.RG8Uint)return Uint8Array;if(t===D.RG8Sint)return Int8Array;if(t===D.RG8Unorm)return Uint8Array;if(t===D.RG8Snorm)return Int8Array;if(t===D.RGBA8Uint)return Uint8Array;if(t===D.RGBA8Sint)return Int8Array;if(t===D.RGBA8Unorm)return Uint8Array;if(t===D.RGBA8Snorm)return Int8Array;if(t===D.R16Uint)return Uint16Array;if(t===D.R16Sint)return Int16Array;if(t===D.RG16Uint)return Uint16Array;if(t===D.RG16Sint)return Int16Array;if(t===D.RGBA16Uint)return Uint16Array;if(t===D.RGBA16Sint)return Int16Array;if(t===D.R16Float||t===D.RG16Float||t===D.RGBA16Float)return Uint16Array;if(t===D.R32Uint)return Uint32Array;if(t===D.R32Sint)return Int32Array;if(t===D.R32Float)return Float32Array;if(t===D.RG32Uint)return Uint32Array;if(t===D.RG32Sint)return Int32Array;if(t===D.RG32Float)return Float32Array;if(t===D.RGBA32Uint)return Uint32Array;if(t===D.RGBA32Sint)return Int32Array;if(t===D.RGBA32Float)return Float32Array;if(t===D.BGRA8Unorm||t===D.BGRA8UnormSRGB)return Uint8Array;if(t===D.RGB10A2Unorm||t===D.RGB9E5UFloat||t===D.RG11B10UFloat)return Uint32Array;if(t===D.Depth32Float)return Float32Array;if(t===D.Depth24Plus||t===D.Depth24PlusStencil8)return Uint32Array;if(t===D.Depth32FloatStencil8)return Float32Array}_getDimension(t){let e;return t.isData3DTexture?e=Sx.ThreeD:e=Sx.TwoD,e}}function Tp(r,t=null){const e=r.format,i=r.type,n=r.colorSpace;let s;if(r.isCompressedTexture===!0||r.isCompressedArrayTexture===!0)switch(e){case sh:s=n===Lt?D.BC1RGBAUnormSRGB:D.BC1RGBAUnorm;break;case rh:s=n===Lt?D.BC2RGBAUnormSRGB:D.BC2RGBAUnorm;break;case oh:s=n===Lt?D.BC3RGBAUnormSRGB:D.BC3RGBAUnorm;break;case Hf:s=n===Lt?D.ETC2RGB8UnormSRGB:D.ETC2RGB8Unorm;break;case Wf:s=n===Lt?D.ETC2RGBA8UnormSRGB:D.ETC2RGBA8Unorm;break;case $f:s=n===Lt?D.ASTC4x4UnormSRGB:D.ASTC4x4Unorm;break;case Xf:s=n===Lt?D.ASTC5x4UnormSRGB:D.ASTC5x4Unorm;break;case qf:s=n===Lt?D.ASTC5x5UnormSRGB:D.ASTC5x5Unorm;break;case Yf:s=n===Lt?D.ASTC6x5UnormSRGB:D.ASTC6x5Unorm;break;case jf:s=n===Lt?D.ASTC6x6UnormSRGB:D.ASTC6x6Unorm;break;case Kf:s=n===Lt?D.ASTC8x5UnormSRGB:D.ASTC8x5Unorm;break;case Zf:s=n===Lt?D.ASTC8x6UnormSRGB:D.ASTC8x6Unorm;break;case Qf:s=n===Lt?D.ASTC8x8UnormSRGB:D.ASTC8x8Unorm;break;case Jf:s=n===Lt?D.ASTC10x5UnormSRGB:D.ASTC10x5Unorm;break;case tp:s=n===Lt?D.ASTC10x6UnormSRGB:D.ASTC10x6Unorm;break;case ep:s=n===Lt?D.ASTC10x8UnormSRGB:D.ASTC10x8Unorm;break;case ip:s=n===Lt?D.ASTC10x10UnormSRGB:D.ASTC10x10Unorm;break;case np:s=n===Lt?D.ASTC12x10UnormSRGB:D.ASTC12x10Unorm;break;case sp:s=n===Lt?D.ASTC12x12UnormSRGB:D.ASTC12x12Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",e)}else switch(e){case xa:switch(i){case il:s=D.RGBA8Snorm;break;case nl:s=D.RGBA16Sint;break;case zo:s=D.RGBA16Uint;break;case ai:s=D.RGBA32Uint;break;case Ti:s=D.RGBA32Sint;break;case tr:s=n===Lt?D.RGBA8UnormSRGB:D.RGBA8Unorm;break;case gs:s=D.RGBA16Float;break;case qi:s=D.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",i)}break;case Vp:switch(i){case fy:s=D.RGB9E5UFloat;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",i)}break;case Hp:switch(i){case il:s=D.R8Snorm;break;case nl:s=D.R16Sint;break;case zo:s=D.R16Uint;break;case ai:s=D.R32Uint;break;case Ti:s=D.R32Sint;break;case tr:s=D.R8Unorm;break;case gs:s=D.R16Float;break;case qi:s=D.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",i)}break;case dl:switch(i){case il:s=D.RG8Snorm;break;case nl:s=D.RG16Sint;break;case zo:s=D.RG16Uint;break;case ai:s=D.RG32Uint;break;case Ti:s=D.RG32Sint;break;case tr:s=D.RG8Unorm;break;case gs:s=D.RG16Float;break;case qi:s=D.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",i)}break;case Ur:switch(i){case zo:s=D.Depth16Unorm;break;case ai:s=D.Depth24Plus;break;case qi:s=D.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",i)}break;case ua:switch(i){case wl:s=D.Depth24PlusStencil8;break;case qi:t&&t.features.has(Sp.Depth32FloatStencil8)===!1&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),s=D.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",i)}break;case Wp:switch(i){case Ti:s=D.R32Sint;break;case ai:s=D.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",i)}break;case $p:switch(i){case Ti:s=D.RG32Sint;break;case ai:s=D.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",i)}break;case Xp:switch(i){case Ti:s=D.RGBA32Sint;break;case ai:s=D.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",i)}break;default:console.error("WebGPURenderer: Unsupported texture format.",e)}return s}const KU=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,ZU=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/ig,Vx={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"},QU=r=>{r=r.trim();const t=r.match(KU);if(t!==null&&t.length===4){const e=t[2],i=[];let n=null;for(;(n=ZU.exec(e))!==null;)i.push({name:n[1],type:n[2]});const s=[];for(let h=0;h<i.length;h++){const{name:u,type:d}=i[h];let f=d;f.startsWith("ptr")?f="pointer":(f.startsWith("texture")&&(f=d.split("<")[0]),f=Vx[f]),s.push(new wm(f,u))}const o=r.substring(t[0].length),a=t[3]||"void",l=t[1]!==void 0?t[1]:"";return{type:Vx[a]||a,inputs:s,name:l,inputsCode:e,blockCode:o,outputType:a}}else throw new Error("FunctionNode: Function is not a WGSL code.")};class JU extends Rm{constructor(t){const{type:e,inputs:i,name:n,inputsCode:s,blockCode:o,outputType:a}=QU(t);super(e,i,n),this.inputsCode=s,this.blockCode=o,this.outputType=a}getCode(t=this.name){const e=this.outputType!=="void"?"-> "+this.outputType:"";return`fn ${t} ( ${this.inputsCode.trim()} ) ${e}`+this.blockCode}}class tI extends fS{parseFunction(t){return new JU(t)}}const Do=self.GPUShaderStage,Hc={vertex:Do?Do.VERTEX:1,fragment:Do?Do.FRAGMENT:2,compute:Do?Do.COMPUTE:4},Hx={instance:!0,swizzleAssign:!1,storageBuffer:!0},eI={"^^":"tsl_xor"},iI={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",mat3:"mat3x3<f32>",mat4:"mat4x4<f32>"},ts={tsl_xor:new xi("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new xi("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new xi("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new xi("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new xi("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new xi("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new xi("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new xi("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new xi("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping:new xi(`
fn tsl_repeatWrapping( uv : vec2<f32>, dimension : vec2<u32> ) -> vec2<u32> {

	let uvScaled = vec2<u32>( uv * vec2<f32>( dimension ) );

	return ( ( uvScaled % dimension ) + dimension ) % dimension;

}
`),biquadraticTexture:new xi(`
fn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, level : i32 ) -> vec4f {

	let iRes = vec2i( textureDimensions( map, level ) );
	let res = vec2f( iRes );

	let uvScaled = coord * res;
	let uvWrapping = ( ( uvScaled % res ) + res ) % res;

	// https://www.shadertoy.com/view/WtyXRy

	let uv = uvWrapping - 0.5;
	let iuv = floor( uv );
	let f = fract( uv );

	let rg1 = textureLoad( map, vec2i( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );
	let rg2 = textureLoad( map, vec2i( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );
	let rg3 = textureLoad( map, vec2i( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );
	let rg4 = textureLoad( map, vec2i( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );

	return mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );

}
`)},Za={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};/Windows/g.test(navigator.userAgent)&&(ts.pow_float=new xi("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),ts.pow_vec2=new xi("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[ts.pow_float]),ts.pow_vec3=new xi("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[ts.pow_float]),ts.pow_vec4=new xi("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[ts.pow_float]),Za.pow_float="tsl_pow_float",Za.pow_vec2="tsl_pow_vec2",Za.pow_vec3="tsl_pow_vec3",Za.pow_vec4="tsl_pow_vec4");let MS="";/Firefox|Deno/g.test(navigator.userAgent)!==!0&&(MS+=`diagnostic( off, derivative_uniformity );
`);class nI extends uS{constructor(t,e){super(t,e,new tI),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}needsToWorkingColorSpace(t){return t.isVideoTexture===!0&&t.colorSpace!==zr}_generateTextureSample(t,e,i,n,s=this.shaderStage){return s==="fragment"?n?`textureSample( ${e}, ${e}_sampler, ${i}, ${n} )`:`textureSample( ${e}, ${e}_sampler, ${i} )`:this.isFilteredTexture(t)?this.generateFilteredTexture(t,e,i):this.generateTextureLod(t,e,i,"0")}_generateVideoSample(t,e,i=this.shaderStage){if(i==="fragment")return`textureSampleBaseClampToEdge( ${t}, ${t}_sampler, vec2<f32>( ${e}.x, 1.0 - ${e}.y ) )`;console.error(`WebGPURenderer: THREE.VideoTexture does not support ${i} shader.`)}_generateTextureSampleLevel(t,e,i,n,s,o=this.shaderStage){return o==="fragment"&&this.isUnfilterable(t)===!1?`textureSampleLevel( ${e}, ${e}_sampler, ${i}, ${n} )`:this.isFilteredTexture(t)?this.generateFilteredTexture(t,e,i,n):this.generateTextureLod(t,e,i,n)}generateFilteredTexture(t,e,i,n="0"){return this._include("biquadraticTexture"),`tsl_biquadraticTexture( ${e}, ${i}, i32( ${n} ) )`}generateTextureLod(t,e,i,n="0"){this._include("repeatWrapping");const s=t.isMultisampleRenderTargetTexture===!0?`textureDimensions( ${e} )`:`textureDimensions( ${e}, 0 )`;return`textureLoad( ${e}, tsl_repeatWrapping( ${i}, ${s} ), i32( ${n} ) )`}generateTextureLoad(t,e,i,n,s="0u"){return n?`textureLoad( ${e}, ${i}, ${n}, ${s} )`:`textureLoad( ${e}, ${i}, ${s} )`}generateTextureStore(t,e,i,n){return`textureStore( ${e}, ${i}, ${n} )`}isUnfilterable(t){return this.getComponentTypeFromTexture(t)!=="float"||!this.isAvailable("float32Filterable")&&t.isDataTexture===!0&&t.type===qi||t.isMultisampleRenderTargetTexture===!0}generateTexture(t,e,i,n,s=this.shaderStage){let o=null;return t.isVideoTexture===!0?o=this._generateVideoSample(e,i,s):this.isUnfilterable(t)?o=this.generateTextureLod(t,e,i,"0",n,s):o=this._generateTextureSample(t,e,i,n,s),o}generateTextureGrad(t,e,i,n,s,o=this.shaderStage){if(o==="fragment")return`textureSampleGrad( ${e}, ${e}_sampler, ${i},  ${n[0]}, ${n[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${o} shader.`)}generateTextureCompare(t,e,i,n,s,o=this.shaderStage){if(o==="fragment")return`textureSampleCompare( ${e}, ${e}_sampler, ${i}, ${n} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${o} shader.`)}generateTextureLevel(t,e,i,n,s,o=this.shaderStage){let a=null;return t.isVideoTexture===!0?a=this._generateVideoSample(e,i,o):a=this._generateTextureSampleLevel(t,e,i,n,s,o),a}generateTextureBias(t,e,i,n,s,o=this.shaderStage){if(o==="fragment")return`textureSampleBias( ${e}, ${e}_sampler, ${i}, ${n} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${o} shader.`)}getPropertyName(t,e=this.shaderStage){if(t.isNodeVarying===!0&&t.needsInterpolation===!0){if(e==="vertex")return`varyings.${t.name}`}else if(t.isNodeUniform===!0){const i=t.name,n=t.type;return n==="texture"||n==="cubeTexture"||n==="storageTexture"||n==="texture3D"?i:n==="buffer"||n==="storageBuffer"||n==="indirectStorageBuffer"?`NodeBuffer_${t.id}.${i}`:t.groupNode.name+"."+i}return super.getPropertyName(t)}getOutputStructName(){return"output"}_getUniformGroupCount(t){return Object.keys(this.uniforms[t]).length}getFunctionOperator(t){const e=eI[t];return e!==void 0?(this._include(e),e):null}getStorageAccess(t){if(t.isStorageTextureNode)switch(t.access){case vx.ReadOnly:return"read";case vx.WriteOnly:return"write";default:return"read_write"}else switch(t.access){case vp.Storage:return"read_write";case vp.ReadOnlyStorage:return"read";default:return"write"}}getUniformFromNode(t,e,i,n=null){const s=super.getUniformFromNode(t,e,i,n),o=this.getDataFromNode(t,i,this.globalCache);if(o.uniformGPU===void 0){let a;const l=t.groupNode,c=l.name,h=this.getBindGroupArray(c,i);if(e==="texture"||e==="cubeTexture"||e==="storageTexture"||e==="texture3D"){let u=null;if(e==="texture"||e==="storageTexture"?u=new nu(s.name,s.node,l,t.access?t.access:null):e==="cubeTexture"?u=new yS(s.name,s.node,l,t.access?t.access:null):e==="texture3D"&&(u=new vS(s.name,s.node,l,t.access?t.access:null)),u.store=t.isStorageTextureNode===!0,u.setVisibility(Hc[i]),i==="fragment"&&this.isUnfilterable(t.value)===!1&&u.store===!1){const d=new VU(`${s.name}_sampler`,s.node,l);d.setVisibility(Hc[i]),h.push(d,u),a=[d,u]}else h.push(u),a=[u]}else if(e==="buffer"||e==="storageBuffer"||e==="indirectStorageBuffer"){const u=e==="buffer"?_S:$U,d=new u(t,l);d.setVisibility(Hc[i]),h.push(d),a=d}else{const u=this.uniformGroups[i]||(this.uniformGroups[i]={});let d=u[c];d===void 0&&(d=new xS(c,l),d.setVisibility(Hc[i]),u[c]=d,h.push(d)),a=this.getNodeUniform(s,e),d.addUniform(a)}o.uniformGPU=a}return s}getBuiltin(t,e,i,n=this.shaderStage){const s=this.builtins[n]||(this.builtins[n]=new Map);return s.has(t)===!1&&s.set(t,{name:t,property:e,type:i}),e}hasBuiltin(t,e=this.shaderStage){return this.builtins[e]!==void 0&&this.builtins[e].has(t)}getVertexIndex(){return this.shaderStage==="vertex"?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(t){const e=t.layout,i=this.flowShaderNode(t),n=[];for(const o of e.inputs)n.push(o.name+" : "+this.getType(o.type));let s=`fn ${e.name}( ${n.join(", ")} ) -> ${this.getType(e.type)} {
${i.vars}
${i.code}
`;return i.result&&(s+=`	return ${i.result};
`),s+=`
}
`,s}getInstanceIndex(){return this.shaderStage==="vertex"?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}isFlipY(){return!1}enableDirective(t,e=this.shaderStage){(this.directives[e]||(this.directives[e]=new Set)).add(t)}getDirectives(t){const e=[],i=this.directives[t];if(i!==void 0)for(const n of i)e.push(`enable ${n};`);return e.join(`
`)}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}getBuiltins(t){const e=[],i=this.builtins[t];if(i!==void 0)for(const{name:n,property:s,type:o}of i.values())e.push(`@builtin( ${n} ) ${s} : ${o}`);return e.join(`,
	`)}getScopedArray(t,e,i,n){return this.scopedArrays.has(t)===!1&&this.scopedArrays.set(t,{name:t,scope:e,bufferType:i,bufferCount:n}),t}getScopedArrays(t){if(t!=="compute")return;const e=[];for(const{name:i,scope:n,bufferType:s,bufferCount:o}of this.scopedArrays.values()){const a=this.getType(s);e.push(`var<${n}> ${i}: array< ${a}, ${o} >;`)}return e.join(`
`)}getAttributes(t){const e=[];if(t==="compute"&&(this.getBuiltin("global_invocation_id","id","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",t),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),t==="vertex"||t==="compute"){const i=this.getBuiltins("attribute");i&&e.push(i);const n=this.getAttributesArray();for(let s=0,o=n.length;s<o;s++){const a=n[s],l=a.name,c=this.getType(a.type);e.push(`@location( ${s} ) ${l} : ${c}`)}}return e.join(`,
	`)}getStructMembers(t){const e=[],i=t.getMemberTypes();for(let s=0;s<i.length;s++){const o=i[s];e.push(`	@location( ${s} ) m${s} : ${o}<f32>`)}const n=this.getBuiltins("output");return n&&e.push("	"+n),e.join(`,
`)}getStructs(t){const e=[],i=this.structs[t];for(let n=0,s=i.length;n<s;n++){const o=i[n],a=o.name;let l=`struct ${a} {
`;l+=this.getStructMembers(o),l+=`
}`,e.push(l),e.push(`
var<private> output : ${a};

`)}return e.join(`

`)}getVar(t,e){return`var ${e} : ${this.getType(t)}`}getVars(t){const e=[],i=this.vars[t];if(i!==void 0)for(const n of i)e.push(`	${this.getVar(n.type,n.name)};`);return`
${e.join(`
`)}
`}getVaryings(t){const e=[];if(t==="vertex"&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),t==="vertex"||t==="fragment"){const s=this.varyings,o=this.vars[t];for(let a=0;a<s.length;a++){const l=s[a];if(l.needsInterpolation){let c=`@location( ${a} )`;/^(int|uint|ivec|uvec)/.test(l.type)&&(c+=" @interpolate( flat )"),e.push(`${c} ${l.name} : ${this.getType(l.type)}`)}else t==="vertex"&&o.includes(l)===!1&&o.push(l)}}const i=this.getBuiltins(t);i&&e.push(i);const n=e.join(`,
	`);return t==="vertex"?this._getWGSLStruct("VaryingsStruct","	"+n):n}getUniforms(t){const e=this.uniforms[t],i=[],n=[],s=[],o={};for(const l of e){const c=l.groupNode.name,h=this.bindingsIndexes[c];if(l.type==="texture"||l.type==="cubeTexture"||l.type==="storageTexture"||l.type==="texture3D"){const u=l.node.value;t==="fragment"&&this.isUnfilterable(u)===!1&&l.node.isStorageTextureNode!==!0&&(u.isDepthTexture===!0&&u.compareFunction!==null?i.push(`@binding( ${h.binding++} ) @group( ${h.group} ) var ${l.name}_sampler : sampler_comparison;`):i.push(`@binding( ${h.binding++} ) @group( ${h.group} ) var ${l.name}_sampler : sampler;`));let d,f="";if(u.isMultisampleRenderTargetTexture===!0&&(f="_multisampled"),u.isCubeTexture===!0)d="texture_cube<f32>";else if(u.isDataArrayTexture===!0||u.isCompressedArrayTexture===!0)d="texture_2d_array<f32>";else if(u.isDepthTexture===!0)d=`texture_depth${f}_2d`;else if(u.isVideoTexture===!0)d="texture_external";else if(u.isData3DTexture===!0)d="texture_3d<f32>";else if(l.node.isStorageTextureNode===!0){const p=Tp(u),_=this.getStorageAccess(l.node);d=`texture_storage_2d<${p}, ${_}>`}else{const p=this.getComponentTypeFromTexture(u).charAt(0);d=`texture${f}_2d<${p}32>`}i.push(`@binding( ${h.binding++} ) @group( ${h.group} ) var ${l.name} : ${d};`)}else if(l.type==="buffer"||l.type==="storageBuffer"||l.type==="indirectStorageBuffer"){const u=l.node,d=this.getType(u.bufferType),f=u.bufferCount,p=f>0&&l.type==="buffer"?", "+f:"",_=u.isAtomic?`atomic<${d}>`:`${d}`,g=`	${l.name} : array< ${_}${p} >
`,m=u.isStorageBufferNode?`storage, ${this.getStorageAccess(u)}`:"uniform";n.push(this._getWGSLStructBinding("NodeBuffer_"+u.id,g,m,h.binding++,h.group))}else{const u=this.getType(this.getVectorType(l.type)),d=l.groupNode.name;(o[d]||(o[d]={index:h.binding++,id:h.group,snippets:[]})).snippets.push(`	${l.name} : ${u}`)}}for(const l in o){const c=o[l];s.push(this._getWGSLStructBinding(l,c.snippets.join(`,
`),"uniform",c.index,c.id))}let a=i.join(`
`);return a+=n.join(`
`),a+=s.join(`
`),a}buildCode(){const t=this.material!==null?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const e in t){const i=t[e];i.uniforms=this.getUniforms(e),i.attributes=this.getAttributes(e),i.varyings=this.getVaryings(e),i.structs=this.getStructs(e),i.vars=this.getVars(e),i.codes=this.getCodes(e),i.directives=this.getDirectives(e),i.scopedArrays=this.getScopedArrays(e);let n=`// code

`;n+=this.flowCode[e];const s=this.flowNodes[e],o=s[s.length-1],a=o.outputNode,l=a!==void 0&&a.isOutputStructNode===!0;for(const c of s){const h=this.getFlowData(c),u=c.name;if(u&&(n.length>0&&(n+=`
`),n+=`	// flow -> ${u}
	`),n+=`${h.code}
	`,c===o&&e!=="compute"){if(n+=`// result

	`,e==="vertex")n+=`varyings.Vertex = ${h.result};`;else if(e==="fragment")if(l)i.returnType=a.nodeType,n+=`return ${h.result};`;else{let d="	@location(0) color: vec4<f32>";const f=this.getBuiltins("output");f&&(d+=`,
	`+f),i.returnType="OutputStruct",i.structs+=this._getWGSLStruct("OutputStruct",d),i.structs+=`
var<private> output : OutputStruct;

`,n+=`output.color = ${h.result};

	return output;`}}}i.flow=n}this.material!==null?(this.vertexShader=this._getWGSLVertexCode(t.vertex),this.fragmentShader=this._getWGSLFragmentCode(t.fragment)):this.computeShader=this._getWGSLComputeCode(t.compute,(this.object.workgroupSize||[64]).join(", "))}getMethod(t,e=null){let i;return e!==null&&(i=this._getWGSLMethod(t+"_"+e)),i===void 0&&(i=this._getWGSLMethod(t)),i||t}getType(t){return iI[t]||t}isAvailable(t){let e=Hx[t];return e===void 0&&(t==="float32Filterable"&&(e=this.renderer.hasFeature("float32-filterable")),Hx[t]=e),e}_getWGSLMethod(t){return ts[t]!==void 0&&this._include(t),Za[t]}_include(t){const e=ts[t];return e.build(this),this.currentFunctionNode!==null&&this.currentFunctionNode.includes.push(e),e}_getWGSLVertexCode(t){return`${this.getSignature()}
// directives
${t.directives}

// uniforms
${t.uniforms}

// varyings
${t.varyings}
var<private> varyings : VaryingsStruct;

// codes
${t.codes}

@vertex
fn main( ${t.attributes} ) -> VaryingsStruct {

	// vars
	${t.vars}

	// flow
	${t.flow}

	return varyings;

}
`}_getWGSLFragmentCode(t){return`${this.getSignature()}
// global
${MS}

// uniforms
${t.uniforms}

// structs
${t.structs}

// codes
${t.codes}

@fragment
fn main( ${t.varyings} ) -> ${t.returnType} {

	// vars
	${t.vars}

	// flow
	${t.flow}

}
`}_getWGSLComputeCode(t,e){return`${this.getSignature()}
// directives
${t.directives}

// system
var<private> instanceIndex : u32;

// locals
${t.scopedArrays}

// uniforms
${t.uniforms}

// codes
${t.codes}

@compute @workgroup_size( ${e} )
fn main( ${t.attributes} ) {

	// system
	instanceIndex = id.x + id.y * numWorkgroups.x * u32(${e}) + id.z * numWorkgroups.x * numWorkgroups.y * u32(${e});

	// vars
	${t.vars}

	// flow
	${t.flow}

}
`}_getWGSLStruct(t,e){return`
struct ${t} {
${e}
};`}_getWGSLStructBinding(t,e,i,n=0,s=0){const o=t+"Struct";return`${this._getWGSLStruct(o,e)}
@binding( ${n} ) @group( ${s} )
var<${i}> ${t} : ${o};`}}class sI{constructor(t){this.backend=t}getCurrentDepthStencilFormat(t){let e;return t.depthTexture!==null?e=this.getTextureFormatGPU(t.depthTexture):t.depth&&t.stencil?e=D.Depth24PlusStencil8:t.depth&&(e=D.Depth24Plus),e}getTextureFormatGPU(t){return this.backend.get(t).format}getCurrentColorFormat(t){let e;return t.textures!==null?e=this.getTextureFormatGPU(t.textures[0]):e=this.getPreferredCanvasFormat(),e}getCurrentColorSpace(t){return t.textures!==null?t.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(t,e){if(t.isPoints)return Ho.PointList;if(t.isLineSegments||t.isMesh&&e.wireframe===!0)return Ho.LineList;if(t.isLine)return Ho.LineStrip;if(t.isMesh)return Ho.TriangleList}getSampleCount(t){let e=1;return t>1&&(e=Math.pow(2,Math.floor(Math.log2(t))),e===2&&(e=4)),e}getSampleCountRenderContext(t){return t.textures!==null?this.getSampleCount(t.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){return navigator.userAgent.includes("Quest")?D.BGRA8Unorm:navigator.gpu.getPreferredCanvasFormat()}}const rI=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]),oI=new Map([[Ay,["float16"]]]),aI=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class lI{constructor(t){this.backend=t}createAttribute(t,e){const i=this._getBufferAttribute(t),n=this.backend,s=n.get(i);let o=s.buffer;if(o===void 0){const a=n.device;let l=i.array;if(t.normalized===!1&&(l.constructor===Int16Array||l.constructor===Uint16Array)){const h=new Uint32Array(l.length);for(let u=0;u<l.length;u++)h[u]=l[u];l=h}if(i.array=l,(i.isStorageBufferAttribute||i.isStorageInstancedBufferAttribute)&&i.itemSize===3){l=new l.constructor(i.count*4);for(let h=0;h<i.count;h++)l.set(i.array.subarray(h*3,h*3+3),h*4);i.itemSize=4,i.array=l}const c=l.byteLength+(4-l.byteLength%4)%4;o=a.createBuffer({label:i.name,size:c,usage:e,mappedAtCreation:!0}),new l.constructor(o.getMappedRange()).set(l),o.unmap(),s.buffer=o}}updateAttribute(t){const e=this._getBufferAttribute(t),i=this.backend,n=i.device,s=i.get(e).buffer,o=e.array,a=e.updateRanges;if(a.length===0)n.queue.writeBuffer(s,0,o,0);else{for(let l=0,c=a.length;l<c;l++){const h=a[l];n.queue.writeBuffer(s,0,o,h.start*o.BYTES_PER_ELEMENT,h.count*o.BYTES_PER_ELEMENT)}e.clearUpdateRanges()}}createShaderVertexBuffers(t){const e=t.getAttributes(),i=new Map;for(let n=0;n<e.length;n++){const s=e[n],o=s.array.BYTES_PER_ELEMENT,a=this._getBufferAttribute(s);let l=i.get(a);if(l===void 0){let u,d;s.isInterleavedBufferAttribute===!0?(u=s.data.stride*o,d=s.data.isInstancedInterleavedBuffer?Fc.Instance:Fc.Vertex):(u=s.itemSize*o,d=s.isInstancedBufferAttribute?Fc.Instance:Fc.Vertex),s.normalized===!1&&(s.array.constructor===Int16Array||s.array.constructor===Uint16Array)&&(u=4),l={arrayStride:u,attributes:[],stepMode:d},i.set(a,l)}const c=this._getVertexFormat(s),h=s.isInterleavedBufferAttribute===!0?s.offset*o:0;l.attributes.push({shaderLocation:n,offset:h,format:c})}return Array.from(i.values())}destroyAttribute(t){const e=this.backend;e.get(this._getBufferAttribute(t)).buffer.destroy(),e.delete(t)}async getArrayBufferAsync(t){const e=this.backend,i=e.device,s=e.get(this._getBufferAttribute(t)).buffer,o=s.size,a=i.createBuffer({label:t.name,size:o,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),l=i.createCommandEncoder({});l.copyBufferToBuffer(s,0,a,0,o),a.unmap();const c=l.finish();return i.queue.submit([c]),await a.mapAsync(GPUMapMode.READ),a.getMappedRange()}_getVertexFormat(t){const{itemSize:e,normalized:i}=t,n=t.array.constructor,s=t.constructor;let o;if(e==1)o=aI.get(n);else{const l=(oI.get(s)||rI.get(n))[i?1:0];if(l){const c=n.BYTES_PER_ELEMENT*e,u=Math.floor((c+3)/4)*4/n.BYTES_PER_ELEMENT;if(u%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");o=`${l}x${u}`}}return o||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),o}_getBufferAttribute(t){return t.isInterleavedBufferAttribute&&(t=t.data),t}}class cI{constructor(t){this.backend=t,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(t){const i=this.backend.device,n=[];let s=0;for(const o of t.bindings){const a={binding:s++,visibility:o.visibility};if(o.isUniformBuffer||o.isStorageBuffer){const l={};o.isStorageBuffer&&(l.type=o.access),a.buffer=l}else if(o.isSampler){const l={};o.texture.isDepthTexture&&o.texture.compareFunction!==null&&(l.type="comparison"),a.sampler=l}else if(o.isSampledTexture&&o.texture.isVideoTexture)a.externalTexture={};else if(o.isSampledTexture&&o.store){const l=this.backend.get(o.texture).texture.format,c=o.access;a.storageTexture={format:l,access:c}}else if(o.isSampledTexture){const l={};if(o.texture.isMultisampleRenderTargetTexture===!0&&(l.multisampled=!0),o.texture.isDepthTexture)l.sampleType=Wa.Depth;else if(o.texture.isDataTexture||o.texture.isDataArrayTexture||o.texture.isData3DTexture){const c=o.texture.type;c===Ti?l.sampleType=Wa.SInt:c===ai?l.sampleType=Wa.UInt:c===qi&&(this.backend.hasFeature("float32-filterable")?l.sampleType=Wa.Float:l.sampleType=Wa.UnfilterableFloat)}o.isSampledCubeTexture?l.viewDimension=tn.Cube:o.texture.isDataArrayTexture||o.texture.isCompressedArrayTexture?l.viewDimension=tn.TwoDArray:o.isSampledTexture3D&&(l.viewDimension=tn.ThreeD),a.texture=l}else console.error(`WebGPUBindingUtils: Unsupported binding "${o}".`);n.push(a)}return i.createBindGroupLayout({entries:n})}createBindings(t){const{backend:e,bindGroupLayoutCache:i}=this,n=e.get(t);let s=i.get(t.bindingsReference);s===void 0&&(s=this.createBindingsLayout(t),i.set(t.bindingsReference,s));const o=this.createBindGroup(t,s);n.layout=s,n.group=o}updateBinding(t){const e=this.backend,i=e.device,n=t.buffer,s=e.get(t).buffer;i.queue.writeBuffer(s,0,n,0)}createBindGroup(t,e){const i=this.backend,n=i.device;let s=0;const o=[];for(const a of t.bindings){if(a.isUniformBuffer){const l=i.get(a);if(l.buffer===void 0){const c=a.byteLength,h=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,u=n.createBuffer({label:"bindingBuffer_"+a.name,size:c,usage:h});l.buffer=u}o.push({binding:s,resource:{buffer:l.buffer}})}else if(a.isStorageBuffer){const l=i.get(a);if(l.buffer===void 0){const c=a.attribute;l.buffer=i.get(c).buffer}o.push({binding:s,resource:{buffer:l.buffer}})}else if(a.isSampler){const l=i.get(a.texture);o.push({binding:s,resource:l.sampler})}else if(a.isSampledTexture){const l=i.get(a.texture);let c;if(l.externalTexture!==void 0)c=n.importExternalTexture({source:l.externalTexture});else{const h=a.store?1:l.texture.mipLevelCount,u=`view-${l.texture.width}-${l.texture.height}-${h}`;if(c=l[u],c===void 0){const d=KL.All;let f;a.isSampledCubeTexture?f=tn.Cube:a.isSampledTexture3D?f=tn.ThreeD:a.texture.isDataArrayTexture||a.texture.isCompressedArrayTexture?f=tn.TwoDArray:f=tn.TwoD,c=l[u]=l.texture.createView({aspect:d,dimension:f,mipLevelCount:h})}}o.push({binding:s,resource:c})}s++}return n.createBindGroup({label:"bindGroup_"+t.name,layout:e,entries:o})}}class hI{constructor(t){this.backend=t}_getSampleCount(t){return this.backend.utils.getSampleCountRenderContext(t)}createRenderPipeline(t,e){const{object:i,material:n,geometry:s,pipeline:o}=t,{vertexProgram:a,fragmentProgram:l}=o,c=this.backend,h=c.device,u=c.utils,d=c.get(o),f=[];for(const B of t.getBindings()){const V=c.get(B);f.push(V.layout)}const p=c.attributeUtils.createShaderVertexBuffers(t);let _;n.transparent===!0&&n.blending!==ca&&(_=this._getBlending(n));let g={};n.stencilWrite===!0&&(g={compare:this._getStencilCompare(n),failOp:this._getStencilOperation(n.stencilFail),depthFailOp:this._getStencilOperation(n.stencilZFail),passOp:this._getStencilOperation(n.stencilZPass)});const m=this._getColorWriteMask(n),y=[];if(t.context.textures!==null){const B=t.context.textures;for(let V=0;V<B.length;V++){const Q=u.getTextureFormatGPU(B[V]);y.push({format:Q,blend:_,writeMask:m})}}else{const B=u.getCurrentColorFormat(t.context);y.push({format:B,blend:_,writeMask:m})}const v=c.get(a).module,x=c.get(l).module,C=this._getPrimitiveState(i,s,n),A=this._getDepthCompare(n),E=u.getCurrentDepthStencilFormat(t.context),w=this._getSampleCount(t.context),T={label:`renderPipeline_${n.name||n.type}_${n.id}`,vertex:Object.assign({},v,{buffers:p}),fragment:Object.assign({},x,{targets:y}),primitive:C,multisample:{count:w,alphaToCoverageEnabled:n.alphaToCoverage&&w>1},layout:h.createPipelineLayout({bindGroupLayouts:f})},S={},N=t.context.depth,G=t.context.stencil;if((N===!0||G===!0)&&(N===!0&&(S.format=E,S.depthWriteEnabled=n.depthWrite,S.depthCompare=A),G===!0&&(S.stencilFront=g,S.stencilBack={},S.stencilReadMask=n.stencilFuncMask,S.stencilWriteMask=n.stencilWriteMask),T.depthStencil=S),e===null)d.pipeline=h.createRenderPipeline(T);else{const B=new Promise(V=>{h.createRenderPipelineAsync(T).then(Q=>{d.pipeline=Q,V()})});e.push(B)}}createBundleEncoder(t){const e=this.backend,{utils:i,device:n}=e,s=i.getCurrentDepthStencilFormat(t),o=i.getCurrentColorFormat(t),a=this._getSampleCount(t),l={label:"renderBundleEncoder",colorFormats:[o],depthStencilFormat:s,sampleCount:a};return n.createRenderBundleEncoder(l)}createComputePipeline(t,e){const i=this.backend,n=i.device,s=i.get(t.computeProgram).module,o=i.get(t),a=[];for(const l of e){const c=i.get(l);a.push(c.layout)}o.pipeline=n.createComputePipeline({compute:s,layout:n.createPipelineLayout({bindGroupLayouts:a})})}_getBlending(t){let e,i;const n=t.blending,s=t.blendSrc,o=t.blendDst,a=t.blendEquation;if(n===Y0){const l=t.blendSrcAlpha!==null?t.blendSrcAlpha:s,c=t.blendDstAlpha!==null?t.blendDstAlpha:o,h=t.blendEquationAlpha!==null?t.blendEquationAlpha:a;e={srcFactor:this._getBlendFactor(s),dstFactor:this._getBlendFactor(o),operation:this._getBlendOperation(a)},i={srcFactor:this._getBlendFactor(l),dstFactor:this._getBlendFactor(c),operation:this._getBlendOperation(h)}}else{const l=t.premultipliedAlpha,c=(h,u,d,f)=>{e={srcFactor:h,dstFactor:u,operation:Mr.Add},i={srcFactor:d,dstFactor:f,operation:Mr.Add}};if(l)switch(n){case Js:c(zt.One,zt.OneMinusSrcAlpha,zt.One,zt.OneMinusSrcAlpha);break;case gh:c(zt.One,zt.One,zt.One,zt.One);break;case _h:c(zt.Zero,zt.OneMinusSrc,zt.Zero,zt.One);break;case xh:c(zt.Zero,zt.Src,zt.Zero,zt.SrcAlpha);break}else switch(n){case Js:c(zt.SrcAlpha,zt.OneMinusSrcAlpha,zt.One,zt.OneMinusSrcAlpha);break;case gh:c(zt.SrcAlpha,zt.One,zt.SrcAlpha,zt.One);break;case _h:c(zt.Zero,zt.OneMinusSrc,zt.Zero,zt.One);break;case xh:c(zt.Zero,zt.Src,zt.Zero,zt.Src);break}}if(e!==void 0&&i!==void 0)return{color:e,alpha:i};console.error("THREE.WebGPURenderer: Invalid blending: ",n)}_getBlendFactor(t){let e;switch(t){case Z0:e=zt.Zero;break;case Q0:e=zt.One;break;case J0:e=zt.Src;break;case ty:e=zt.OneMinusSrc;break;case yh:e=zt.SrcAlpha;break;case vh:e=zt.OneMinusSrcAlpha;break;case ny:e=zt.Dst;break;case sy:e=zt.OneMinusDstColor;break;case ey:e=zt.DstAlpha;break;case iy:e=zt.OneMinusDstAlpha;break;case ry:e=zt.SrcAlphaSaturated;break;case bL:e=zt.Constant;break;case EL:e=zt.OneMinusConstant;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",t)}return e}_getStencilCompare(t){let e;const i=t.stencilFunc;switch(i){case X1:e=ri.Never;break;case rp:e=ri.Always;break;case q1:e=ri.Less;break;case j1:e=ri.LessEqual;break;case Y1:e=ri.Equal;break;case Q1:e=ri.GreaterEqual;break;case K1:e=ri.Greater;break;case Z1:e=ri.NotEqual;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",i)}return e}_getStencilOperation(t){let e;switch(t){case br:e=Vs.Keep;break;case z1:e=Vs.Zero;break;case G1:e=Vs.Replace;break;case $1:e=Vs.Invert;break;case k1:e=Vs.IncrementClamp;break;case V1:e=Vs.DecrementClamp;break;case H1:e=Vs.IncrementWrap;break;case W1:e=Vs.DecrementWrap;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",e)}return e}_getBlendOperation(t){let e;switch(t){case Ys:e=Mr.Add;break;case j0:e=Mr.Subtract;break;case K0:e=Mr.ReverseSubtract;break;case S1:e=Mr.Min;break;case M1:e=Mr.Max;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",t)}return e}_getPrimitiveState(t,e,i){const n={},s=this.backend.utils;switch(n.topology=s.getPrimitiveTopology(t,i),e.index!==null&&t.isLine===!0&&t.isLineSegments!==!0&&(n.stripIndexFormat=e.index.array instanceof Uint16Array?pa.Uint16:pa.Uint32),i.side){case la:n.frontFace=wd.CCW,n.cullMode=Rd.Back;break;case Tn:n.frontFace=wd.CCW,n.cullMode=Rd.Front;break;case jo:n.frontFace=wd.CCW,n.cullMode=Rd.None;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",i.side);break}return n}_getColorWriteMask(t){return t.colorWrite===!0?yx.All:yx.None}_getDepthCompare(t){let e;if(t.depthTest===!1)e=ri.Always;else{const i=t.depthFunc;switch(i){case oy:e=ri.Never;break;case ay:e=ri.Always;break;case ly:e=ri.Less;break;case Sh:e=ri.LessEqual;break;case cy:e=ri.Equal;break;case hy:e=ri.GreaterEqual;break;case uy:e=ri.Greater;break;case dy:e=ri.NotEqual;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",i)}}return e}}class uI extends SS{constructor(t={}){super(t),this.isWebGPUBackend=!0,this.parameters.alpha=t.alpha===void 0?!0:t.alpha,this.parameters.requiredLimits=t.requiredLimits===void 0?{}:t.requiredLimits,this.trackTimestamp=t.trackTimestamp===!0,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new sI(this),this.attributeUtils=new lI(this),this.bindingUtils=new cI(this),this.pipelineUtils=new hI(this),this.textureUtils=new jU(this),this.occludedResolveCache=new Map}async init(t){await super.init(t);const e=this.parameters;let i;if(e.device===void 0){const o={powerPreference:e.powerPreference},a=await navigator.gpu.requestAdapter(o);if(a===null)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const l=Object.values(Sp),c=[];for(const u of l)a.features.has(u)&&c.push(u);const h={requiredFeatures:c,requiredLimits:e.requiredLimits};i=await a.requestDevice(h)}else i=e.device;i.lost.then(o=>{const a={api:"WebGPU",message:o.message||"Unknown reason",reason:o.reason||null,originalEvent:o};t.onDeviceLost(a)});const n=e.context!==void 0?e.context:t.domElement.getContext("webgpu");this.device=i,this.context=n;const s=e.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(Sp.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:s}),this.updateSize()}get coordinateSystem(){return Gr}async getArrayBufferAsync(t){return await this.attributeUtils.getArrayBufferAsync(t)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let t=this.defaultRenderPassdescriptor;if(t===null){const i=this.renderer;t={colorAttachments:[{view:null}]},(this.renderer.depth===!0||this.renderer.stencil===!0)&&(t.depthStencilAttachment={view:this.textureUtils.getDepthBuffer(i.depth,i.stencil).createView()});const n=t.colorAttachments[0];this.renderer.samples>0?n.view=this.colorBuffer.createView():n.resolveTarget=void 0,this.defaultRenderPassdescriptor=t}const e=t.colorAttachments[0];return this.renderer.samples>0?e.resolveTarget=this.context.getCurrentTexture().createView():e.view=this.context.getCurrentTexture().createView(),t}_getRenderPassDescriptor(t){const e=t.renderTarget,i=this.get(e);let n=i.descriptors;if(n===void 0||i.width!==e.width||i.height!==e.height||i.activeMipmapLevel!==e.activeMipmapLevel||i.samples!==e.samples){n={},i.descriptors=n;const a=()=>{e.removeEventListener("dispose",a),this.delete(e)};e.addEventListener("dispose",a)}const s=t.getCacheKey();let o=n[s];if(o===void 0){const a=t.textures,l=[];for(let c=0;c<a.length;c++){const h=this.get(a[c]),u=h.texture.createView({baseMipLevel:t.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:t.activeCubeFace,dimension:tn.TwoD});let d,f;h.msaaTexture!==void 0?(d=h.msaaTexture.createView(),f=u):(d=u,f=void 0),l.push({view:d,resolveTarget:f,loadOp:He.Load,storeOp:oi.Store})}if(o={colorAttachments:l},t.depth){const h={view:this.get(t.depthTexture).texture.createView()};o.depthStencilAttachment=h}n[s]=o,i.width=e.width,i.height=e.height,i.samples=e.samples,i.activeMipmapLevel=e.activeMipmapLevel}return o}beginRender(t){const e=this.get(t),i=this.device,n=t.occlusionQueryCount;let s;n>0&&(e.currentOcclusionQuerySet&&e.currentOcclusionQuerySet.destroy(),e.currentOcclusionQueryBuffer&&e.currentOcclusionQueryBuffer.destroy(),e.currentOcclusionQuerySet=e.occlusionQuerySet,e.currentOcclusionQueryBuffer=e.occlusionQueryBuffer,e.currentOcclusionQueryObjects=e.occlusionQueryObjects,s=i.createQuerySet({type:"occlusion",count:n}),e.occlusionQuerySet=s,e.occlusionQueryIndex=0,e.occlusionQueryObjects=new Array(n),e.lastOcclusionObject=null);let o;t.textures===null?o=this._getDefaultRenderPassDescriptor():o=this._getRenderPassDescriptor(t),this.initTimestampQuery(t,o),o.occlusionQuerySet=s;const a=o.depthStencilAttachment;if(t.textures!==null){const h=o.colorAttachments;for(let u=0;u<h.length;u++){const d=h[u];t.clearColor?(d.clearValue=u===0?t.clearColorValue:{r:0,g:0,b:0,a:1},d.loadOp=He.Clear,d.storeOp=oi.Store):(d.loadOp=He.Load,d.storeOp=oi.Store)}}else{const h=o.colorAttachments[0];t.clearColor?(h.clearValue=t.clearColorValue,h.loadOp=He.Clear,h.storeOp=oi.Store):(h.loadOp=He.Load,h.storeOp=oi.Store)}t.depth&&(t.clearDepth?(a.depthClearValue=t.clearDepthValue,a.depthLoadOp=He.Clear,a.depthStoreOp=oi.Store):(a.depthLoadOp=He.Load,a.depthStoreOp=oi.Store)),t.stencil&&(t.clearStencil?(a.stencilClearValue=t.clearStencilValue,a.stencilLoadOp=He.Clear,a.stencilStoreOp=oi.Store):(a.stencilLoadOp=He.Load,a.stencilStoreOp=oi.Store));const l=i.createCommandEncoder({label:"renderContext_"+t.id}),c=l.beginRenderPass(o);if(e.descriptor=o,e.encoder=l,e.currentPass=c,e.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},e.renderBundles=[],t.viewport&&this.updateViewport(t),t.scissor){const{x:h,y:u,width:d,height:f}=t.scissorValue;c.setScissorRect(h,u,d,f)}}finishRender(t){const e=this.get(t),i=t.occlusionQueryCount;if(e.renderBundles.length>0&&e.currentPass.executeBundles(e.renderBundles),i>e.occlusionQueryIndex&&e.currentPass.endOcclusionQuery(),e.currentPass.end(),i>0){const n=i*8;let s=this.occludedResolveCache.get(n);s===void 0&&(s=this.device.createBuffer({size:n,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(n,s));const o=this.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});e.encoder.resolveQuerySet(e.occlusionQuerySet,0,i,s,0),e.encoder.copyBufferToBuffer(s,0,o,0,n),e.occlusionQueryBuffer=o,this.resolveOccludedAsync(t)}if(this.prepareTimestampBuffer(t,e.encoder),this.device.queue.submit([e.encoder.finish()]),t.textures!==null){const n=t.textures;for(let s=0;s<n.length;s++){const o=n[s];o.generateMipmaps===!0&&this.textureUtils.generateMipmaps(o)}}}isOccluded(t,e){const i=this.get(t);return i.occluded&&i.occluded.has(e)}async resolveOccludedAsync(t){const e=this.get(t),{currentOcclusionQueryBuffer:i,currentOcclusionQueryObjects:n}=e;if(i&&n){const s=new WeakSet;e.currentOcclusionQueryObjects=null,e.currentOcclusionQueryBuffer=null,await i.mapAsync(GPUMapMode.READ);const o=i.getMappedRange(),a=new BigUint64Array(o);for(let l=0;l<n.length;l++)a[l]!==BigInt(0)&&s.add(n[l]);i.destroy(),e.occluded=s}}updateViewport(t){const{currentPass:e}=this.get(t),{x:i,y:n,width:s,height:o,minDepth:a,maxDepth:l}=t.viewportValue;e.setViewport(i,n,s,o,a,l)}clear(t,e,i,n=null){const s=this.device,o=this.renderer;let a=[],l,c,h,u;if(t){const p=this.getClearColor();if(this.renderer.alpha===!0){const _=p.a;c={r:p.r*_,g:p.g*_,b:p.b*_,a:_}}else c={r:p.r,g:p.g,b:p.b,a:p.a}}if(n===null){h=o.depth,u=o.stencil;const p=this._getDefaultRenderPassDescriptor();if(t){a=p.colorAttachments;const _=a[0];_.clearValue=c,_.loadOp=He.Clear,_.storeOp=oi.Store}(h||u)&&(l=p.depthStencilAttachment)}else{if(h=n.depth,u=n.stencil,t)for(const p of n.textures){const _=this.get(p),g=_.texture.createView();let m,y;_.msaaTexture!==void 0?(m=_.msaaTexture.createView(),y=g):(m=g,y=void 0),a.push({view:m,resolveTarget:y,clearValue:c,loadOp:He.Clear,storeOp:oi.Store})}(h||u)&&(l={view:this.get(n.depthTexture).texture.createView()})}h&&(e?(l.depthLoadOp=He.Clear,l.depthClearValue=o.getClearDepth(),l.depthStoreOp=oi.Store):(l.depthLoadOp=He.Load,l.depthStoreOp=oi.Store)),u&&(i?(l.stencilLoadOp=He.Clear,l.stencilClearValue=o.getClearStencil(),l.stencilStoreOp=oi.Store):(l.stencilLoadOp=He.Load,l.stencilStoreOp=oi.Store));const d=s.createCommandEncoder({});d.beginRenderPass({colorAttachments:a,depthStencilAttachment:l}).end(),s.queue.submit([d.finish()])}beginCompute(t){const e=this.get(t),i={};this.initTimestampQuery(t,i),e.cmdEncoderGPU=this.device.createCommandEncoder(),e.passEncoderGPU=e.cmdEncoderGPU.beginComputePass(i)}compute(t,e,i,n){const{passEncoderGPU:s}=this.get(t),o=this.get(n).pipeline;s.setPipeline(o);for(let h=0,u=i.length;h<u;h++){const d=i[h],f=this.get(d);s.setBindGroup(h,f.group)}const a=this.device.limits.maxComputeWorkgroupsPerDimension,l=this.get(e);l.dispatchSize===void 0&&(l.dispatchSize={x:0,y:1,z:1});const{dispatchSize:c}=l;e.dispatchCount>a?(c.x=Math.min(e.dispatchCount,a),c.y=Math.ceil(e.dispatchCount/a)):c.x=e.dispatchCount,s.dispatchWorkgroups(c.x,c.y,c.z)}finishCompute(t){const e=this.get(t);e.passEncoderGPU.end(),this.prepareTimestampBuffer(t,e.cmdEncoderGPU),this.device.queue.submit([e.cmdEncoderGPU.finish()])}async waitForGPU(){await this.device.queue.onSubmittedWorkDone()}draw(t,e){const{object:i,context:n,pipeline:s}=t,o=t.getBindings(),a=this.get(n),l=this.get(s).pipeline,c=a.currentSets,h=a.currentPass,u=t.getDrawParameters();if(u===null)return;c.pipeline!==l&&(h.setPipeline(l),c.pipeline=l);const d=c.bindingGroups;for(let g=0,m=o.length;g<m;g++){const y=o[g],v=this.get(y);d[y.index]!==y.id&&(h.setBindGroup(y.index,v.group),d[y.index]=y.id)}const f=t.getIndex(),p=f!==null;if(p===!0&&c.index!==f){const g=this.get(f).buffer,m=f.array instanceof Uint16Array?pa.Uint16:pa.Uint32;h.setIndexBuffer(g,m),c.index=f}const _=t.getVertexBuffers();for(let g=0,m=_.length;g<m;g++){const y=_[g];if(c.attributes[g]!==y){const v=this.get(y).buffer;h.setVertexBuffer(g,v),c.attributes[g]=y}}if(a.occlusionQuerySet!==void 0){const g=a.lastOcclusionObject;g!==i&&(g!==null&&g.occlusionTest===!0&&(h.endOcclusionQuery(),a.occlusionQueryIndex++),i.occlusionTest===!0&&(h.beginOcclusionQuery(a.occlusionQueryIndex),a.occlusionQueryObjects[a.occlusionQueryIndex]=i),a.lastOcclusionObject=i)}if(i.isBatchedMesh===!0){const g=i._multiDrawStarts,m=i._multiDrawCounts,y=i._multiDrawCount,v=i._multiDrawInstances,x=p?f.array.BYTES_PER_ELEMENT:1;for(let C=0;C<y;C++){const A=v?v[C]:1,E=A>1?0:C;h.drawIndexed(m[C],A,g[C]/x,0,E)}}else if(p===!0){const{vertexCount:g,instanceCount:m,firstVertex:y}=u,v=t.getIndirect();if(v!==null){const x=this.get(v).buffer;h.drawIndexedIndirect(x,0)}else h.drawIndexed(g,m,y,0,0);e.update(i,g,m)}else{const{vertexCount:g,instanceCount:m,firstVertex:y}=u,v=t.getIndirect();if(v!==null){const x=this.get(v).buffer;h.drawIndirect(x,0)}else h.draw(g,m,y,0);e.update(i,g,m)}}needsRenderUpdate(t){const e=this.get(t),{object:i,material:n}=t,s=this.utils,o=s.getSampleCountRenderContext(t.context),a=s.getCurrentColorSpace(t.context),l=s.getCurrentColorFormat(t.context),c=s.getCurrentDepthStencilFormat(t.context),h=s.getPrimitiveTopology(i,n);let u=!1;return(e.material!==n||e.materialVersion!==n.version||e.transparent!==n.transparent||e.blending!==n.blending||e.premultipliedAlpha!==n.premultipliedAlpha||e.blendSrc!==n.blendSrc||e.blendDst!==n.blendDst||e.blendEquation!==n.blendEquation||e.blendSrcAlpha!==n.blendSrcAlpha||e.blendDstAlpha!==n.blendDstAlpha||e.blendEquationAlpha!==n.blendEquationAlpha||e.colorWrite!==n.colorWrite||e.depthWrite!==n.depthWrite||e.depthTest!==n.depthTest||e.depthFunc!==n.depthFunc||e.stencilWrite!==n.stencilWrite||e.stencilFunc!==n.stencilFunc||e.stencilFail!==n.stencilFail||e.stencilZFail!==n.stencilZFail||e.stencilZPass!==n.stencilZPass||e.stencilFuncMask!==n.stencilFuncMask||e.stencilWriteMask!==n.stencilWriteMask||e.side!==n.side||e.alphaToCoverage!==n.alphaToCoverage||e.sampleCount!==o||e.colorSpace!==a||e.colorFormat!==l||e.depthStencilFormat!==c||e.primitiveTopology!==h||e.clippingContextCacheKey!==t.clippingContext.cacheKey)&&(e.material=n,e.materialVersion=n.version,e.transparent=n.transparent,e.blending=n.blending,e.premultipliedAlpha=n.premultipliedAlpha,e.blendSrc=n.blendSrc,e.blendDst=n.blendDst,e.blendEquation=n.blendEquation,e.blendSrcAlpha=n.blendSrcAlpha,e.blendDstAlpha=n.blendDstAlpha,e.blendEquationAlpha=n.blendEquationAlpha,e.colorWrite=n.colorWrite,e.depthWrite=n.depthWrite,e.depthTest=n.depthTest,e.depthFunc=n.depthFunc,e.stencilWrite=n.stencilWrite,e.stencilFunc=n.stencilFunc,e.stencilFail=n.stencilFail,e.stencilZFail=n.stencilZFail,e.stencilZPass=n.stencilZPass,e.stencilFuncMask=n.stencilFuncMask,e.stencilWriteMask=n.stencilWriteMask,e.side=n.side,e.alphaToCoverage=n.alphaToCoverage,e.sampleCount=o,e.colorSpace=a,e.colorFormat=l,e.depthStencilFormat=c,e.primitiveTopology=h,e.clippingContextCacheKey=t.clippingContext.cacheKey,u=!0),u}getRenderCacheKey(t){const{object:e,material:i}=t,n=this.utils,s=t.context;return[i.transparent,i.blending,i.premultipliedAlpha,i.blendSrc,i.blendDst,i.blendEquation,i.blendSrcAlpha,i.blendDstAlpha,i.blendEquationAlpha,i.colorWrite,i.depthWrite,i.depthTest,i.depthFunc,i.stencilWrite,i.stencilFunc,i.stencilFail,i.stencilZFail,i.stencilZPass,i.stencilFuncMask,i.stencilWriteMask,i.side,n.getSampleCountRenderContext(s),n.getCurrentColorSpace(s),n.getCurrentColorFormat(s),n.getCurrentDepthStencilFormat(s),n.getPrimitiveTopology(e,i),t.getGeometryCacheKey(),t.clippingContext.cacheKey].join()}createSampler(t){this.textureUtils.createSampler(t)}destroySampler(t){this.textureUtils.destroySampler(t)}createDefaultTexture(t){this.textureUtils.createDefaultTexture(t)}createTexture(t,e){this.textureUtils.createTexture(t,e)}updateTexture(t,e){this.textureUtils.updateTexture(t,e)}generateMipmaps(t){this.textureUtils.generateMipmaps(t)}destroyTexture(t){this.textureUtils.destroyTexture(t)}copyTextureToBuffer(t,e,i,n,s,o){return this.textureUtils.copyTextureToBuffer(t,e,i,n,s,o)}initTimestampQuery(t,e){if(!this.trackTimestamp)return;const i=this.get(t);if(!i.timeStampQuerySet){const n=this.device.createQuerySet({type:"timestamp",count:2});Object.assign(e,{timestampWrites:{querySet:n,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}}),i.timeStampQuerySet=n}}prepareTimestampBuffer(t,e){if(!this.trackTimestamp)return;const i=this.get(t),n=2*BigInt64Array.BYTES_PER_ELEMENT;i.currentTimestampQueryBuffers===void 0&&(i.currentTimestampQueryBuffers={resolveBuffer:this.device.createBuffer({label:"timestamp resolve buffer",size:n,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),resultBuffer:this.device.createBuffer({label:"timestamp result buffer",size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),isMappingPending:!1});const{resolveBuffer:s,resultBuffer:o,isMappingPending:a}=i.currentTimestampQueryBuffers;a!==!0&&(e.resolveQuerySet(i.timeStampQuerySet,0,2,s,0),e.copyBufferToBuffer(s,0,o,0,n))}async resolveTimestampAsync(t,e="render"){if(!this.trackTimestamp)return;const i=this.get(t);if(i.currentTimestampQueryBuffers===void 0)return;const{resultBuffer:n,isMappingPending:s}=i.currentTimestampQueryBuffers;s!==!0&&(i.currentTimestampQueryBuffers.isMappingPending=!0,n.mapAsync(GPUMapMode.READ).then(()=>{const o=new BigUint64Array(n.getMappedRange()),a=Number(o[1]-o[0])/1e6;this.renderer.info.updateTimestamp(e,a),n.unmap(),i.currentTimestampQueryBuffers.isMappingPending=!1}))}createNodeBuilder(t,e){return new nI(t,e)}createProgram(t){const e=this.get(t);e.module={module:this.device.createShaderModule({code:t.code,label:t.stage}),entryPoint:"main"}}destroyProgram(t){this.delete(t)}createRenderPipeline(t,e){this.pipelineUtils.createRenderPipeline(t,e)}createComputePipeline(t,e){this.pipelineUtils.createComputePipeline(t,e)}beginBundle(t){const e=this.get(t);e._currentPass=e.currentPass,e._currentSets=e.currentSets,e.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},e.currentPass=this.pipelineUtils.createBundleEncoder(t)}finishBundle(t,e){const i=this.get(t),s=i.currentPass.finish();this.get(e).bundleGPU=s,i.currentSets=i._currentSets,i.currentPass=i._currentPass}addBundle(t,e){this.get(t).renderBundles.push(this.get(e).bundleGPU)}createBindings(t){this.bindingUtils.createBindings(t)}updateBindings(t){this.bindingUtils.createBindings(t)}updateBinding(t){this.bindingUtils.updateBinding(t)}createIndexAttribute(t){this.attributeUtils.createAttribute(t,GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createAttribute(t){this.attributeUtils.createAttribute(t,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(t){this.attributeUtils.createAttribute(t,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createIndirectStorageAttribute(t){this.attributeUtils.createAttribute(t,GPUBufferUsage.STORAGE|GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(t){this.attributeUtils.updateAttribute(t)}destroyAttribute(t){this.attributeUtils.destroyAttribute(t)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(t){return this.device.features.has(t)}copyTextureToTexture(t,e,i=null,n=null,s=0){let o=0,a=0,l=0,c=0,h=0,u=0,d=t.image.width,f=t.image.height;i!==null&&(c=i.x,h=i.y,u=i.z||0,d=i.width,f=i.height),n!==null&&(o=n.x,a=n.y,l=n.z||0);const p=this.device.createCommandEncoder({label:"copyTextureToTexture_"+t.id+"_"+e.id}),_=this.get(t).texture,g=this.get(e).texture;p.copyTextureToTexture({texture:_,mipLevel:s,origin:{x:c,y:h,z:u}},{texture:g,mipLevel:s,origin:{x:o,y:a,z:l}},[d,f,1]),this.device.queue.submit([p.finish()])}copyFramebufferToTexture(t,e,i){const n=this.get(e);let s=null;e.renderTarget?t.isDepthTexture?s=this.get(e.depthTexture).texture:s=this.get(e.textures[0]).texture:t.isDepthTexture?s=this.textureUtils.getDepthBuffer(e.depth,e.stencil):s=this.context.getCurrentTexture();const o=this.get(t).texture;if(s.format!==o.format){console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",s.format,o.format);return}let a;if(n.currentPass?(n.currentPass.end(),a=n.encoder):a=this.device.createCommandEncoder({label:"copyFramebufferToTexture_"+t.id}),a.copyTextureToTexture({texture:s,origin:{x:i.x,y:i.y,z:0}},{texture:o},[i.z,i.w]),t.generateMipmaps&&this.textureUtils.generateMipmaps(t),n.currentPass){const{descriptor:l}=n;for(let c=0;c<l.colorAttachments.length;c++)l.colorAttachments[c].loadOp=He.Load;e.depth&&(l.depthStencilAttachment.depthLoadOp=He.Load),e.stencil&&(l.depthStencilAttachment.stencilLoadOp=He.Load),n.currentPass=a.beginRenderPass(l),n.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null}}else this.device.queue.submit([a.finish()])}}class dI extends Hy{constructor(t,e,i,n,s,o){super(t,e,i,n,s,o),this.iesMap=null}copy(t,e){return super.copy(t,e),this.iesMap=t.iesMap,this}}class fI extends pS{constructor(){super(),this.addMaterial(m2,By),this.addMaterial(tS,tm),this.addMaterial(eL,Iy),this.addMaterial(rL,Oy),this.addMaterial(l2,Wh),this.addMaterial(f2,Gy),this.addMaterial(i2,zy),this.addMaterial(cL,ky),this.addMaterial(ZD,Qp),this.addMaterial(JD,Vy),this.addMaterial(uL,Fy),this.addMaterial(mL,Dy),this.addMaterial(xL,Uy),this.addLight(RF,KR),this.addLight(sU,QR),this.addLight(rU,tC),this.addLight(dS,Hy),this.addLight(aU,JR),this.addLight(lU,qR),this.addLight(cU,iC),this.addLight(oU,dI),this.addToneMapping(JL,E1),this.addToneMapping(tF,A1),this.addToneMapping(eF,w1),this.addToneMapping(nF,R1),this.addToneMapping(aF,C1),this.addToneMapping(lF,N1)}}class e3 extends vU{constructor(t={}){let e;t.forceWebGL?e=kx:(e=uI,t.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new kx(t)));const i=new e(t);super(i,t),this.library=new fI,this.isWebGPURenderer=!0}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Vh}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=Vh);const Wd={type:"change"},Nm={type:"start"},Pm={type:"end"},Wx=1e-6,pe={NONE:-1,ROTATE:0,ZOOM:1,PAN:2,TOUCH_ROTATE:3,TOUCH_ZOOM_PAN:4},Wc=new ft,Ws=new ft,pI=new P,$c=new P,$d=new P,Lo=new Fn,$x=new P,Xc=new P,Xd=new P,qc=new P;class i3 extends kh{constructor(t,e=null){super(t,e),this.enabled=!0,this.screen={left:0,top:0,width:0,height:0},this.rotateSpeed=1,this.zoomSpeed=1.2,this.panSpeed=.3,this.noRotate=!1,this.noZoom=!1,this.noPan=!1,this.staticMoving=!1,this.dynamicDampingFactor=.2,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.keys=["KeyA","KeyS","KeyD"],this.mouseButtons={LEFT:ci.ROTATE,MIDDLE:ci.DOLLY,RIGHT:ci.PAN},this.state=pe.NONE,this.keyState=pe.NONE,this.target=new P,this._lastPosition=new P,this._lastZoom=1,this._touchZoomDistanceStart=0,this._touchZoomDistanceEnd=0,this._lastAngle=0,this._eye=new P,this._movePrev=new ft,this._moveCurr=new ft,this._lastAxis=new P,this._zoomStart=new ft,this._zoomEnd=new ft,this._panStart=new ft,this._panEnd=new ft,this._pointers=[],this._pointerPositions={},this._onPointerMove=gI.bind(this),this._onPointerDown=mI.bind(this),this._onPointerUp=_I.bind(this),this._onPointerCancel=xI.bind(this),this._onContextMenu=EI.bind(this),this._onMouseWheel=bI.bind(this),this._onKeyDown=vI.bind(this),this._onKeyUp=yI.bind(this),this._onTouchStart=AI.bind(this),this._onTouchMove=wI.bind(this),this._onTouchEnd=RI.bind(this),this._onMouseDown=SI.bind(this),this._onMouseMove=MI.bind(this),this._onMouseUp=TI.bind(this),this._target0=this.target.clone(),this._position0=this.object.position.clone(),this._up0=this.object.up.clone(),this._zoom0=this.object.zoom,e!==null&&(this.connect(),this.handleResize()),this.update()}connect(){window.addEventListener("keydown",this._onKeyDown),window.addEventListener("keyup",this._onKeyUp),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerCancel),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.style.touchAction="none"}disconnect(){window.removeEventListener("keydown",this._onKeyDown),window.removeEventListener("keyup",this._onKeyUp),this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerCancel),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}handleResize(){const t=this.domElement.getBoundingClientRect(),e=this.domElement.ownerDocument.documentElement;this.screen.left=t.left+window.pageXOffset-e.clientLeft,this.screen.top=t.top+window.pageYOffset-e.clientTop,this.screen.width=t.width,this.screen.height=t.height}update(){this._eye.subVectors(this.object.position,this.target),this.noRotate||this._rotateCamera(),this.noZoom||this._zoomCamera(),this.noPan||this._panCamera(),this.object.position.addVectors(this.target,this._eye),this.object.isPerspectiveCamera?(this._checkDistances(),this.object.lookAt(this.target),this._lastPosition.distanceToSquared(this.object.position)>Wx&&(this.dispatchEvent(Wd),this._lastPosition.copy(this.object.position))):this.object.isOrthographicCamera?(this.object.lookAt(this.target),(this._lastPosition.distanceToSquared(this.object.position)>Wx||this._lastZoom!==this.object.zoom)&&(this.dispatchEvent(Wd),this._lastPosition.copy(this.object.position),this._lastZoom=this.object.zoom)):console.warn("THREE.TrackballControls: Unsupported camera type.")}reset(){this.state=pe.NONE,this.keyState=pe.NONE,this.target.copy(this._target0),this.object.position.copy(this._position0),this.object.up.copy(this._up0),this.object.zoom=this._zoom0,this.object.updateProjectionMatrix(),this._eye.subVectors(this.object.position,this.target),this.object.lookAt(this.target),this.dispatchEvent(Wd),this._lastPosition.copy(this.object.position),this._lastZoom=this.object.zoom}_panCamera(){if(Ws.copy(this._panEnd).sub(this._panStart),Ws.lengthSq()){if(this.object.isOrthographicCamera){const t=(this.object.right-this.object.left)/this.object.zoom/this.domElement.clientWidth,e=(this.object.top-this.object.bottom)/this.object.zoom/this.domElement.clientWidth;Ws.x*=t,Ws.y*=e}Ws.multiplyScalar(this._eye.length()*this.panSpeed),$c.copy(this._eye).cross(this.object.up).setLength(Ws.x),$c.add(pI.copy(this.object.up).setLength(Ws.y)),this.object.position.add($c),this.target.add($c),this.staticMoving?this._panStart.copy(this._panEnd):this._panStart.add(Ws.subVectors(this._panEnd,this._panStart).multiplyScalar(this.dynamicDampingFactor))}}_rotateCamera(){qc.set(this._moveCurr.x-this._movePrev.x,this._moveCurr.y-this._movePrev.y,0);let t=qc.length();t?(this._eye.copy(this.object.position).sub(this.target),$x.copy(this._eye).normalize(),Xc.copy(this.object.up).normalize(),Xd.crossVectors(Xc,$x).normalize(),Xc.setLength(this._moveCurr.y-this._movePrev.y),Xd.setLength(this._moveCurr.x-this._movePrev.x),qc.copy(Xc.add(Xd)),$d.crossVectors(qc,this._eye).normalize(),t*=this.rotateSpeed,Lo.setFromAxisAngle($d,t),this._eye.applyQuaternion(Lo),this.object.up.applyQuaternion(Lo),this._lastAxis.copy($d),this._lastAngle=t):!this.staticMoving&&this._lastAngle&&(this._lastAngle*=Math.sqrt(1-this.dynamicDampingFactor),this._eye.copy(this.object.position).sub(this.target),Lo.setFromAxisAngle(this._lastAxis,this._lastAngle),this._eye.applyQuaternion(Lo),this.object.up.applyQuaternion(Lo)),this._movePrev.copy(this._moveCurr)}_zoomCamera(){let t;this.state===pe.TOUCH_ZOOM_PAN?(t=this._touchZoomDistanceStart/this._touchZoomDistanceEnd,this._touchZoomDistanceStart=this._touchZoomDistanceEnd,this.object.isPerspectiveCamera?this._eye.multiplyScalar(t):this.object.isOrthographicCamera?(this.object.zoom=Uf.clamp(this.object.zoom/t,this.minZoom,this.maxZoom),this._lastZoom!==this.object.zoom&&this.object.updateProjectionMatrix()):console.warn("THREE.TrackballControls: Unsupported camera type")):(t=1+(this._zoomEnd.y-this._zoomStart.y)*this.zoomSpeed,t!==1&&t>0&&(this.object.isPerspectiveCamera?this._eye.multiplyScalar(t):this.object.isOrthographicCamera?(this.object.zoom=Uf.clamp(this.object.zoom/t,this.minZoom,this.maxZoom),this._lastZoom!==this.object.zoom&&this.object.updateProjectionMatrix()):console.warn("THREE.TrackballControls: Unsupported camera type")),this.staticMoving?this._zoomStart.copy(this._zoomEnd):this._zoomStart.y+=(this._zoomEnd.y-this._zoomStart.y)*this.dynamicDampingFactor)}_getMouseOnScreen(t,e){return Wc.set((t-this.screen.left)/this.screen.width,(e-this.screen.top)/this.screen.height),Wc}_getMouseOnCircle(t,e){return Wc.set((t-this.screen.width*.5-this.screen.left)/(this.screen.width*.5),(this.screen.height+2*(this.screen.top-e))/this.screen.width),Wc}_addPointer(t){this._pointers.push(t)}_removePointer(t){delete this._pointerPositions[t.pointerId];for(let e=0;e<this._pointers.length;e++)if(this._pointers[e].pointerId==t.pointerId){this._pointers.splice(e,1);return}}_trackPointer(t){let e=this._pointerPositions[t.pointerId];e===void 0&&(e=new ft,this._pointerPositions[t.pointerId]=e),e.set(t.pageX,t.pageY)}_getSecondPointerPosition(t){const e=t.pointerId===this._pointers[0].pointerId?this._pointers[1]:this._pointers[0];return this._pointerPositions[e.pointerId]}_checkDistances(){(!this.noZoom||!this.noPan)&&(this._eye.lengthSq()>this.maxDistance*this.maxDistance&&(this.object.position.addVectors(this.target,this._eye.setLength(this.maxDistance)),this._zoomStart.copy(this._zoomEnd)),this._eye.lengthSq()<this.minDistance*this.minDistance&&(this.object.position.addVectors(this.target,this._eye.setLength(this.minDistance)),this._zoomStart.copy(this._zoomEnd)))}}function mI(r){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(r.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),this._addPointer(r),r.pointerType==="touch"?this._onTouchStart(r):this._onMouseDown(r))}function gI(r){this.enabled!==!1&&(r.pointerType==="touch"?this._onTouchMove(r):this._onMouseMove(r))}function _I(r){this.enabled!==!1&&(r.pointerType==="touch"?this._onTouchEnd(r):this._onMouseUp(),this._removePointer(r),this._pointers.length===0&&(this.domElement.releasePointerCapture(r.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp)))}function xI(r){this._removePointer(r)}function yI(){this.enabled!==!1&&(this.keyState=pe.NONE,window.addEventListener("keydown",this._onKeyDown))}function vI(r){this.enabled!==!1&&(window.removeEventListener("keydown",this._onKeyDown),this.keyState===pe.NONE&&(r.code===this.keys[pe.ROTATE]&&!this.noRotate?this.keyState=pe.ROTATE:r.code===this.keys[pe.ZOOM]&&!this.noZoom?this.keyState=pe.ZOOM:r.code===this.keys[pe.PAN]&&!this.noPan&&(this.keyState=pe.PAN)))}function SI(r){let t;switch(r.button){case 0:t=this.mouseButtons.LEFT;break;case 1:t=this.mouseButtons.MIDDLE;break;case 2:t=this.mouseButtons.RIGHT;break;default:t=-1}switch(t){case ci.DOLLY:this.state=pe.ZOOM;break;case ci.ROTATE:this.state=pe.ROTATE;break;case ci.PAN:this.state=pe.PAN;break;default:this.state=pe.NONE}const e=this.keyState!==pe.NONE?this.keyState:this.state;e===pe.ROTATE&&!this.noRotate?(this._moveCurr.copy(this._getMouseOnCircle(r.pageX,r.pageY)),this._movePrev.copy(this._moveCurr)):e===pe.ZOOM&&!this.noZoom?(this._zoomStart.copy(this._getMouseOnScreen(r.pageX,r.pageY)),this._zoomEnd.copy(this._zoomStart)):e===pe.PAN&&!this.noPan&&(this._panStart.copy(this._getMouseOnScreen(r.pageX,r.pageY)),this._panEnd.copy(this._panStart)),this.dispatchEvent(Nm)}function MI(r){const t=this.keyState!==pe.NONE?this.keyState:this.state;t===pe.ROTATE&&!this.noRotate?(this._movePrev.copy(this._moveCurr),this._moveCurr.copy(this._getMouseOnCircle(r.pageX,r.pageY))):t===pe.ZOOM&&!this.noZoom?this._zoomEnd.copy(this._getMouseOnScreen(r.pageX,r.pageY)):t===pe.PAN&&!this.noPan&&this._panEnd.copy(this._getMouseOnScreen(r.pageX,r.pageY))}function TI(){this.state=pe.NONE,this.dispatchEvent(Pm)}function bI(r){if(this.enabled!==!1&&this.noZoom!==!0){switch(r.preventDefault(),r.deltaMode){case 2:this._zoomStart.y-=r.deltaY*.025;break;case 1:this._zoomStart.y-=r.deltaY*.01;break;default:this._zoomStart.y-=r.deltaY*25e-5;break}this.dispatchEvent(Nm),this.dispatchEvent(Pm)}}function EI(r){this.enabled!==!1&&r.preventDefault()}function AI(r){switch(this._trackPointer(r),this._pointers.length){case 1:this.state=pe.TOUCH_ROTATE,this._moveCurr.copy(this._getMouseOnCircle(this._pointers[0].pageX,this._pointers[0].pageY)),this._movePrev.copy(this._moveCurr);break;default:this.state=pe.TOUCH_ZOOM_PAN;const t=this._pointers[0].pageX-this._pointers[1].pageX,e=this._pointers[0].pageY-this._pointers[1].pageY;this._touchZoomDistanceEnd=this._touchZoomDistanceStart=Math.sqrt(t*t+e*e);const i=(this._pointers[0].pageX+this._pointers[1].pageX)/2,n=(this._pointers[0].pageY+this._pointers[1].pageY)/2;this._panStart.copy(this._getMouseOnScreen(i,n)),this._panEnd.copy(this._panStart);break}this.dispatchEvent(Nm)}function wI(r){switch(this._trackPointer(r),this._pointers.length){case 1:this._movePrev.copy(this._moveCurr),this._moveCurr.copy(this._getMouseOnCircle(r.pageX,r.pageY));break;default:const t=this._getSecondPointerPosition(r),e=r.pageX-t.x,i=r.pageY-t.y;this._touchZoomDistanceEnd=Math.sqrt(e*e+i*i);const n=(r.pageX+t.x)/2,s=(r.pageY+t.y)/2;this._panEnd.copy(this._getMouseOnScreen(n,s));break}}function RI(r){switch(this._pointers.length){case 0:this.state=pe.NONE;break;case 1:this.state=pe.TOUCH_ROTATE,this._moveCurr.copy(this._getMouseOnCircle(r.pageX,r.pageY)),this._movePrev.copy(this._moveCurr);break;case 2:this.state=pe.TOUCH_ZOOM_PAN;for(let t=0;t<this._pointers.length;t++)if(this._pointers[t].pointerId!==r.pointerId){const e=this._pointerPositions[this._pointers[t].pointerId];this._moveCurr.copy(this._getMouseOnCircle(e.x,e.y)),this._movePrev.copy(this._moveCurr);break}break}this.dispatchEvent(Pm)}const Xx={type:"change"},Dm={type:"start"},TS={type:"end"},Yc=new Oh,qx=new es,CI=Math.cos(70*Uf.DEG2RAD),Ze=new P,Ci=2*Math.PI,Te={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},qd=1e-6;class n3 extends kh{constructor(t,e=null){super(t,e),this.state=Te.NONE,this.enabled=!0,this.target=new P,this.cursor=new P,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:ci.ROTATE,MIDDLE:ci.DOLLY,RIGHT:ci.PAN},this.touches={ONE:cs.ROTATE,TWO:cs.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new P,this._lastQuaternion=new Fn,this._lastTargetPosition=new P,this._quat=new Fn().setFromUnitVectors(t.up,new P(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new Zg,this._sphericalDelta=new Zg,this._scale=1,this._panOffset=new P,this._rotateStart=new ft,this._rotateEnd=new ft,this._rotateDelta=new ft,this._panStart=new ft,this._panEnd=new ft,this._panDelta=new ft,this._dollyStart=new ft,this._dollyEnd=new ft,this._dollyDelta=new ft,this._dollyDirection=new P,this._mouse=new ft,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=PI.bind(this),this._onPointerDown=NI.bind(this),this._onPointerUp=DI.bind(this),this._onContextMenu=zI.bind(this),this._onMouseWheel=UI.bind(this),this._onKeyDown=II.bind(this),this._onTouchStart=BI.bind(this),this._onTouchMove=OI.bind(this),this._onMouseDown=LI.bind(this),this._onMouseMove=FI.bind(this),this._interceptControlDown=GI.bind(this),this._interceptControlUp=kI.bind(this),this.domElement!==null&&this.connect(),this.update()}connect(){this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(t){t.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=t}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(Xx),this.update(),this.state=Te.NONE}update(t=null){const e=this.object.position;Ze.copy(e).sub(this.target),Ze.applyQuaternion(this._quat),this._spherical.setFromVector3(Ze),this.autoRotate&&this.state===Te.NONE&&this._rotateLeft(this._getAutoRotationAngle(t)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let i=this.minAzimuthAngle,n=this.maxAzimuthAngle;isFinite(i)&&isFinite(n)&&(i<-Math.PI?i+=Ci:i>Math.PI&&(i-=Ci),n<-Math.PI?n+=Ci:n>Math.PI&&(n-=Ci),i<=n?this._spherical.theta=Math.max(i,Math.min(n,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(i+n)/2?Math.max(i,this._spherical.theta):Math.min(n,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let s=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const o=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),s=o!=this._spherical.radius}if(Ze.setFromSpherical(this._spherical),Ze.applyQuaternion(this._quatInverse),e.copy(this.target).add(Ze),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let o=null;if(this.object.isPerspectiveCamera){const a=Ze.length();o=this._clampDistance(a*this._scale);const l=a-o;this.object.position.addScaledVector(this._dollyDirection,l),this.object.updateMatrixWorld(),s=!!l}else if(this.object.isOrthographicCamera){const a=new P(this._mouse.x,this._mouse.y,0);a.unproject(this.object);const l=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),s=l!==this.object.zoom;const c=new P(this._mouse.x,this._mouse.y,0);c.unproject(this.object),this.object.position.sub(c).add(a),this.object.updateMatrixWorld(),o=Ze.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;o!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(o).add(this.object.position):(Yc.origin.copy(this.object.position),Yc.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(Yc.direction))<CI?this.object.lookAt(this.target):(qx.setFromNormalAndCoplanarPoint(this.object.up,this.target),Yc.intersectPlane(qx,this.target))))}else if(this.object.isOrthographicCamera){const o=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),o!==this.object.zoom&&(this.object.updateProjectionMatrix(),s=!0)}return this._scale=1,this._performCursorZoom=!1,s||this._lastPosition.distanceToSquared(this.object.position)>qd||8*(1-this._lastQuaternion.dot(this.object.quaternion))>qd||this._lastTargetPosition.distanceToSquared(this.target)>qd?(this.dispatchEvent(Xx),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0):!1}_getAutoRotationAngle(t){return t!==null?Ci/60*this.autoRotateSpeed*t:Ci/60/60*this.autoRotateSpeed}_getZoomScale(t){const e=Math.abs(t*.01);return Math.pow(.95,this.zoomSpeed*e)}_rotateLeft(t){this._sphericalDelta.theta-=t}_rotateUp(t){this._sphericalDelta.phi-=t}_panLeft(t,e){Ze.setFromMatrixColumn(e,0),Ze.multiplyScalar(-t),this._panOffset.add(Ze)}_panUp(t,e){this.screenSpacePanning===!0?Ze.setFromMatrixColumn(e,1):(Ze.setFromMatrixColumn(e,0),Ze.crossVectors(this.object.up,Ze)),Ze.multiplyScalar(t),this._panOffset.add(Ze)}_pan(t,e){const i=this.domElement;if(this.object.isPerspectiveCamera){const n=this.object.position;Ze.copy(n).sub(this.target);let s=Ze.length();s*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*t*s/i.clientHeight,this.object.matrix),this._panUp(2*e*s/i.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(t*(this.object.right-this.object.left)/this.object.zoom/i.clientWidth,this.object.matrix),this._panUp(e*(this.object.top-this.object.bottom)/this.object.zoom/i.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(t,e){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const i=this.domElement.getBoundingClientRect(),n=t-i.left,s=e-i.top,o=i.width,a=i.height;this._mouse.x=n/o*2-1,this._mouse.y=-(s/a)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(t){return Math.max(this.minDistance,Math.min(this.maxDistance,t))}_handleMouseDownRotate(t){this._rotateStart.set(t.clientX,t.clientY)}_handleMouseDownDolly(t){this._updateZoomParameters(t.clientX,t.clientX),this._dollyStart.set(t.clientX,t.clientY)}_handleMouseDownPan(t){this._panStart.set(t.clientX,t.clientY)}_handleMouseMoveRotate(t){this._rotateEnd.set(t.clientX,t.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(Ci*this._rotateDelta.x/e.clientHeight),this._rotateUp(Ci*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(t){this._dollyEnd.set(t.clientX,t.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(t){this._panEnd.set(t.clientX,t.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(t){this._updateZoomParameters(t.clientX,t.clientY),t.deltaY<0?this._dollyIn(this._getZoomScale(t.deltaY)):t.deltaY>0&&this._dollyOut(this._getZoomScale(t.deltaY)),this.update()}_handleKeyDown(t){let e=!1;switch(t.code){case this.keys.UP:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateUp(Ci*this.rotateSpeed/this.domElement.clientHeight):this._pan(0,this.keyPanSpeed),e=!0;break;case this.keys.BOTTOM:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateUp(-Ci*this.rotateSpeed/this.domElement.clientHeight):this._pan(0,-this.keyPanSpeed),e=!0;break;case this.keys.LEFT:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateLeft(Ci*this.rotateSpeed/this.domElement.clientHeight):this._pan(this.keyPanSpeed,0),e=!0;break;case this.keys.RIGHT:t.ctrlKey||t.metaKey||t.shiftKey?this._rotateLeft(-Ci*this.rotateSpeed/this.domElement.clientHeight):this._pan(-this.keyPanSpeed,0),e=!0;break}e&&(t.preventDefault(),this.update())}_handleTouchStartRotate(t){if(this._pointers.length===1)this._rotateStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),i=.5*(t.pageX+e.x),n=.5*(t.pageY+e.y);this._rotateStart.set(i,n)}}_handleTouchStartPan(t){if(this._pointers.length===1)this._panStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),i=.5*(t.pageX+e.x),n=.5*(t.pageY+e.y);this._panStart.set(i,n)}}_handleTouchStartDolly(t){const e=this._getSecondPointerPosition(t),i=t.pageX-e.x,n=t.pageY-e.y,s=Math.sqrt(i*i+n*n);this._dollyStart.set(0,s)}_handleTouchStartDollyPan(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enablePan&&this._handleTouchStartPan(t)}_handleTouchStartDollyRotate(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enableRotate&&this._handleTouchStartRotate(t)}_handleTouchMoveRotate(t){if(this._pointers.length==1)this._rotateEnd.set(t.pageX,t.pageY);else{const i=this._getSecondPointerPosition(t),n=.5*(t.pageX+i.x),s=.5*(t.pageY+i.y);this._rotateEnd.set(n,s)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(Ci*this._rotateDelta.x/e.clientHeight),this._rotateUp(Ci*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(t){if(this._pointers.length===1)this._panEnd.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),i=.5*(t.pageX+e.x),n=.5*(t.pageY+e.y);this._panEnd.set(i,n)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(t){const e=this._getSecondPointerPosition(t),i=t.pageX-e.x,n=t.pageY-e.y,s=Math.sqrt(i*i+n*n);this._dollyEnd.set(0,s),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const o=(t.pageX+e.x)*.5,a=(t.pageY+e.y)*.5;this._updateZoomParameters(o,a)}_handleTouchMoveDollyPan(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enablePan&&this._handleTouchMovePan(t)}_handleTouchMoveDollyRotate(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enableRotate&&this._handleTouchMoveRotate(t)}_addPointer(t){this._pointers.push(t.pointerId)}_removePointer(t){delete this._pointerPositions[t.pointerId];for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId){this._pointers.splice(e,1);return}}_isTrackingPointer(t){for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId)return!0;return!1}_trackPointer(t){let e=this._pointerPositions[t.pointerId];e===void 0&&(e=new ft,this._pointerPositions[t.pointerId]=e),e.set(t.pageX,t.pageY)}_getSecondPointerPosition(t){const e=t.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[e]}_customWheelEvent(t){const e=t.deltaMode,i={clientX:t.clientX,clientY:t.clientY,deltaY:t.deltaY};switch(e){case 1:i.deltaY*=16;break;case 2:i.deltaY*=100;break}return t.ctrlKey&&!this._controlActive&&(i.deltaY*=10),i}}function NI(r){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(r.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),!this._isTrackingPointer(r)&&(this._addPointer(r),r.pointerType==="touch"?this._onTouchStart(r):this._onMouseDown(r)))}function PI(r){this.enabled!==!1&&(r.pointerType==="touch"?this._onTouchMove(r):this._onMouseMove(r))}function DI(r){switch(this._removePointer(r),this._pointers.length){case 0:this.domElement.releasePointerCapture(r.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(TS),this.state=Te.NONE;break;case 1:const t=this._pointers[0],e=this._pointerPositions[t];this._onTouchStart({pointerId:t,pageX:e.x,pageY:e.y});break}}function LI(r){let t;switch(r.button){case 0:t=this.mouseButtons.LEFT;break;case 1:t=this.mouseButtons.MIDDLE;break;case 2:t=this.mouseButtons.RIGHT;break;default:t=-1}switch(t){case ci.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(r),this.state=Te.DOLLY;break;case ci.ROTATE:if(r.ctrlKey||r.metaKey||r.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(r),this.state=Te.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(r),this.state=Te.ROTATE}break;case ci.PAN:if(r.ctrlKey||r.metaKey||r.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(r),this.state=Te.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(r),this.state=Te.PAN}break;default:this.state=Te.NONE}this.state!==Te.NONE&&this.dispatchEvent(Dm)}function FI(r){switch(this.state){case Te.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(r);break;case Te.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(r);break;case Te.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(r);break}}function UI(r){this.enabled===!1||this.enableZoom===!1||this.state!==Te.NONE||(r.preventDefault(),this.dispatchEvent(Dm),this._handleMouseWheel(this._customWheelEvent(r)),this.dispatchEvent(TS))}function II(r){this.enabled===!1||this.enablePan===!1||this._handleKeyDown(r)}function BI(r){switch(this._trackPointer(r),this._pointers.length){case 1:switch(this.touches.ONE){case cs.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(r),this.state=Te.TOUCH_ROTATE;break;case cs.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(r),this.state=Te.TOUCH_PAN;break;default:this.state=Te.NONE}break;case 2:switch(this.touches.TWO){case cs.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(r),this.state=Te.TOUCH_DOLLY_PAN;break;case cs.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(r),this.state=Te.TOUCH_DOLLY_ROTATE;break;default:this.state=Te.NONE}break;default:this.state=Te.NONE}this.state!==Te.NONE&&this.dispatchEvent(Dm)}function OI(r){switch(this._trackPointer(r),this.state){case Te.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(r),this.update();break;case Te.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(r),this.update();break;case Te.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(r),this.update();break;case Te.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(r),this.update();break;default:this.state=Te.NONE}}function zI(r){this.enabled!==!1&&r.preventDefault()}function GI(r){r.key==="Control"&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function kI(r){r.key==="Control"&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}const VI={type:"change"},Yx=1e-6,jx=new Fn;class s3 extends kh{constructor(t,e=null){super(t,e),this.movementSpeed=1,this.rollSpeed=.005,this.dragToLook=!1,this.autoForward=!1,this._moveState={up:0,down:0,left:0,right:0,forward:0,back:0,pitchUp:0,pitchDown:0,yawLeft:0,yawRight:0,rollLeft:0,rollRight:0},this._moveVector=new P(0,0,0),this._rotationVector=new P(0,0,0),this._lastQuaternion=new Fn,this._lastPosition=new P,this._status=0,this._onKeyDown=HI.bind(this),this._onKeyUp=WI.bind(this),this._onPointerMove=XI.bind(this),this._onPointerDown=$I.bind(this),this._onPointerUp=qI.bind(this),this._onPointerCancel=YI.bind(this),this._onContextMenu=jI.bind(this),e!==null&&this.connect()}connect(){window.addEventListener("keydown",this._onKeyDown),window.addEventListener("keyup",this._onKeyUp),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointerup",this._onPointerUp),this.domElement.addEventListener("pointercancel",this._onPointerCancel),this.domElement.addEventListener("contextmenu",this._onContextMenu)}disconnect(){window.removeEventListener("keydown",this._onKeyDown),window.removeEventListener("keyup",this._onKeyUp),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerCancel),this.domElement.removeEventListener("contextmenu",this._onContextMenu)}dispose(){this.disconnect()}update(t){if(this.enabled===!1)return;const e=this.object,i=t*this.movementSpeed,n=t*this.rollSpeed;e.translateX(this._moveVector.x*i),e.translateY(this._moveVector.y*i),e.translateZ(this._moveVector.z*i),jx.set(this._rotationVector.x*n,this._rotationVector.y*n,this._rotationVector.z*n,1).normalize(),e.quaternion.multiply(jx),(this._lastPosition.distanceToSquared(e.position)>Yx||8*(1-this._lastQuaternion.dot(e.quaternion))>Yx)&&(this.dispatchEvent(VI),this._lastQuaternion.copy(e.quaternion),this._lastPosition.copy(e.position))}_updateMovementVector(){const t=this._moveState.forward||this.autoForward&&!this._moveState.back?1:0;this._moveVector.x=-this._moveState.left+this._moveState.right,this._moveVector.y=-this._moveState.down+this._moveState.up,this._moveVector.z=-t+this._moveState.back}_updateRotationVector(){this._rotationVector.x=-this._moveState.pitchDown+this._moveState.pitchUp,this._rotationVector.y=-this._moveState.yawRight+this._moveState.yawLeft,this._rotationVector.z=-this._moveState.rollRight+this._moveState.rollLeft}_getContainerDimensions(){return this.domElement!=document?{size:[this.domElement.offsetWidth,this.domElement.offsetHeight],offset:[this.domElement.offsetLeft,this.domElement.offsetTop]}:{size:[window.innerWidth,window.innerHeight],offset:[0,0]}}}function HI(r){if(!(r.altKey||this.enabled===!1)){switch(r.code){case"ShiftLeft":case"ShiftRight":this.movementSpeedMultiplier=.1;break;case"KeyW":this._moveState.forward=1;break;case"KeyS":this._moveState.back=1;break;case"KeyA":this._moveState.left=1;break;case"KeyD":this._moveState.right=1;break;case"KeyR":this._moveState.up=1;break;case"KeyF":this._moveState.down=1;break;case"ArrowUp":this._moveState.pitchUp=1;break;case"ArrowDown":this._moveState.pitchDown=1;break;case"ArrowLeft":this._moveState.yawLeft=1;break;case"ArrowRight":this._moveState.yawRight=1;break;case"KeyQ":this._moveState.rollLeft=1;break;case"KeyE":this._moveState.rollRight=1;break}this._updateMovementVector(),this._updateRotationVector()}}function WI(r){if(this.enabled!==!1){switch(r.code){case"ShiftLeft":case"ShiftRight":this.movementSpeedMultiplier=1;break;case"KeyW":this._moveState.forward=0;break;case"KeyS":this._moveState.back=0;break;case"KeyA":this._moveState.left=0;break;case"KeyD":this._moveState.right=0;break;case"KeyR":this._moveState.up=0;break;case"KeyF":this._moveState.down=0;break;case"ArrowUp":this._moveState.pitchUp=0;break;case"ArrowDown":this._moveState.pitchDown=0;break;case"ArrowLeft":this._moveState.yawLeft=0;break;case"ArrowRight":this._moveState.yawRight=0;break;case"KeyQ":this._moveState.rollLeft=0;break;case"KeyE":this._moveState.rollRight=0;break}this._updateMovementVector(),this._updateRotationVector()}}function $I(r){if(this.enabled!==!1)if(this.dragToLook)this._status++;else{switch(r.button){case 0:this._moveState.forward=1;break;case 2:this._moveState.back=1;break}this._updateMovementVector()}}function XI(r){if(this.enabled!==!1&&(!this.dragToLook||this._status>0)){const t=this._getContainerDimensions(),e=t.size[0]/2,i=t.size[1]/2;this._moveState.yawLeft=-(r.pageX-t.offset[0]-e)/e,this._moveState.pitchDown=(r.pageY-t.offset[1]-i)/i,this._updateRotationVector()}}function qI(r){if(this.enabled!==!1){if(this.dragToLook)this._status--,this._moveState.yawLeft=this._moveState.pitchDown=0;else{switch(r.button){case 0:this._moveState.forward=0;break;case 2:this._moveState.back=0;break}this._updateMovementVector()}this._updateRotationVector()}}function YI(){this.enabled!==!1&&(this.dragToLook?(this._status=0,this._moveState.yawLeft=this._moveState.pitchDown=0):(this._moveState.forward=0,this._moveState.back=0,this._updateMovementVector()),this._updateRotationVector())}function jI(r){this.enabled!==!1&&r.preventDefault()}const KI={name:"CopyShader",uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`};class su{constructor(){this.isPass=!0,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}dispose(){}}const ZI=new Ip(-1,1,1,-1,0,1);class QI extends An{constructor(){super(),this.setAttribute("position",new Qe([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new Qe([0,2,0,0,2,0],2))}}const JI=new QI;class tB{constructor(t){this._mesh=new Pn(JI,t)}dispose(){this._mesh.geometry.dispose()}render(t){t.render(this._mesh,ZI)}get material(){return this._mesh.material}set material(t){this._mesh.material=t}}class eB extends su{constructor(t,e){super(),this.textureID=e!==void 0?e:"tDiffuse",t instanceof Un?(this.uniforms=t.uniforms,this.material=t):t&&(this.uniforms=A0.clone(t.uniforms),this.material=new Un({name:t.name!==void 0?t.name:"unspecified",defines:Object.assign({},t.defines),uniforms:this.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader})),this.fsQuad=new tB(this.material)}render(t,e,i){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=i.texture),this.fsQuad.material=this.material,this.renderToScreen?(t.setRenderTarget(null),this.fsQuad.render(t)):(t.setRenderTarget(e),this.clear&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),this.fsQuad.render(t))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}class Kx extends su{constructor(t,e){super(),this.scene=t,this.camera=e,this.clear=!0,this.needsSwap=!1,this.inverse=!1}render(t,e,i){const n=t.getContext(),s=t.state;s.buffers.color.setMask(!1),s.buffers.depth.setMask(!1),s.buffers.color.setLocked(!0),s.buffers.depth.setLocked(!0);let o,a;this.inverse?(o=0,a=1):(o=1,a=0),s.buffers.stencil.setTest(!0),s.buffers.stencil.setOp(n.REPLACE,n.REPLACE,n.REPLACE),s.buffers.stencil.setFunc(n.ALWAYS,o,4294967295),s.buffers.stencil.setClear(a),s.buffers.stencil.setLocked(!0),t.setRenderTarget(i),this.clear&&t.clear(),t.render(this.scene,this.camera),t.setRenderTarget(e),this.clear&&t.clear(),t.render(this.scene,this.camera),s.buffers.color.setLocked(!1),s.buffers.depth.setLocked(!1),s.buffers.color.setMask(!0),s.buffers.depth.setMask(!0),s.buffers.stencil.setLocked(!1),s.buffers.stencil.setFunc(n.EQUAL,1,4294967295),s.buffers.stencil.setOp(n.KEEP,n.KEEP,n.KEEP),s.buffers.stencil.setLocked(!0)}}class iB extends su{constructor(){super(),this.needsSwap=!1}render(t){t.state.buffers.stencil.setLocked(!1),t.state.buffers.stencil.setTest(!1)}}class r3{constructor(t,e){if(this.renderer=t,this._pixelRatio=t.getPixelRatio(),e===void 0){const i=t.getSize(new ft);this._width=i.width,this._height=i.height,e=new sr(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:ma}),e.texture.name="EffectComposer.rt1"}else this._width=e.width,this._height=e.height;this.renderTarget1=e,this.renderTarget2=e.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],this.copyPass=new eB(KI),this.copyPass.material.blending=ds,this.clock=new u1}swapBuffers(){const t=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=t}addPass(t){this.passes.push(t),t.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(t,e){this.passes.splice(e,0,t),t.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(t){const e=this.passes.indexOf(t);e!==-1&&this.passes.splice(e,1)}isLastEnabledPass(t){for(let e=t+1;e<this.passes.length;e++)if(this.passes[e].enabled)return!1;return!0}render(t){t===void 0&&(t=this.clock.getDelta());const e=this.renderer.getRenderTarget();let i=!1;for(let n=0,s=this.passes.length;n<s;n++){const o=this.passes[n];if(o.enabled!==!1){if(o.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(n),o.render(this.renderer,this.writeBuffer,this.readBuffer,t,i),o.needsSwap){if(i){const a=this.renderer.getContext(),l=this.renderer.state.buffers.stencil;l.setFunc(a.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,t),l.setFunc(a.EQUAL,1,4294967295)}this.swapBuffers()}Kx!==void 0&&(o instanceof Kx?i=!0:o instanceof iB&&(i=!1))}}this.renderer.setRenderTarget(e)}reset(t){if(t===void 0){const e=this.renderer.getSize(new ft);this._pixelRatio=this.renderer.getPixelRatio(),this._width=e.width,this._height=e.height,t=this.renderTarget1.clone(),t.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=t,this.renderTarget2=t.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}setSize(t,e){this._width=t,this._height=e;const i=this._width*this._pixelRatio,n=this._height*this._pixelRatio;this.renderTarget1.setSize(i,n),this.renderTarget2.setSize(i,n);for(let s=0;s<this.passes.length;s++)this.passes[s].setSize(i,n)}setPixelRatio(t){this._pixelRatio=t,this.setSize(this._width,this._height)}dispose(){this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.copyPass.dispose()}}class o3 extends su{constructor(t,e,i=null,n=null,s=null){super(),this.scene=t,this.camera=e,this.overrideMaterial=i,this.clearColor=n,this.clearAlpha=s,this.clear=!0,this.clearDepth=!1,this.needsSwap=!1,this._oldClearColor=new re}render(t,e,i){const n=t.autoClear;t.autoClear=!1;let s,o;this.overrideMaterial!==null&&(o=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),this.clearColor!==null&&(t.getClearColor(this._oldClearColor),t.setClearColor(this.clearColor,t.getClearAlpha())),this.clearAlpha!==null&&(s=t.getClearAlpha(),t.setClearAlpha(this.clearAlpha)),this.clearDepth==!0&&t.clearDepth(),t.setRenderTarget(this.renderToScreen?null:i),this.clear===!0&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),t.render(this.scene,this.camera),this.clearColor!==null&&t.setClearColor(this._oldClearColor),this.clearAlpha!==null&&t.setClearAlpha(s),this.overrideMaterial!==null&&(this.scene.overrideMaterial=o),t.autoClear=n}}export{ZB as A,An as B,re as C,JB as D,r3 as E,s3 as F,sc as G,Vw as H,GB as L,Pn as M,n3 as O,pn as P,O0 as Q,bp as R,VB as S,k0 as T,P as V,e3 as W,jB as a,HB as b,Mn as c,Pe as d,zp as e,z0 as f,Hw as g,t1 as h,bl as i,o3 as j,i3 as k,LB as l,FB as m,d1 as n,Ji as o,$B as p,ft as q,v0 as r,Fi as s,Wr as t,ci as u,Fn as v,Zg as w,u1 as x,kB as y,OB as z};

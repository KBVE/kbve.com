{"entry":{"id":"xss.mdx","slug":"xss","body":"\nimport MDXLayer from \"@l/MDXLayer.astro\";\nimport Widget from \"@w/Widget.astro\";\nimport MDXJS from \"@w/MDXJS.astro\";\n\n<MDXLayer title={frontmatter.title} description={frontmatter.description}>\n<Widget img={frontmatter.img} skeleton={false}>\n<MDXJS>\n\n\n## Information\n\n- XSS, known as, Cross Site Scripting, is the act of injecting malicious script, usually javascript, into a website with the attempt to hi-jack information and/or alter the underlying production code. Examples include stealing client information, bypassing WAFs/filters and redirecting client (user, staff, entity) to unauthorized locations.\n\n- OWASP breaks XSS into 3 types, defined below:\n  - Reflected XSS - Non-Presistent - Type 1\n  - Stored XSS - Persistent - Type 2\n  - DOM Based XSS - Type 3 (as referenced as Type 0)\n\n---\n\n## Attacks\n\nCommon XSS attack vectors are split into throw main categories.\n\n### ATO\n\nATO - Hostile Account Takeover.\n\n### Cookie Manipulation\n\nCookie Manipulation - Obtaining another client's cookie.\n  \n### DOM Replacement\n\nDOM Replacement - Swapping (Persistent/Non-Presistent) Document Object Model (HTML) with a hostile/malignment node (DOM-entity, Memory HTML).\n\n---\n\n## Defense\n\n- The best defense is to assume every form of client (user, staff, entity, personal) has a malicious intent and should be sanitized at the client and server side. Sanitization encompasses a combination of filtering and encoding, as well as, referencing libraries as tools. The only draw back with heavy filtering / encoding will be performance but its a trade-off worth the safety of the data, client and server.\n  - Encode:\n            - Unicode-escape sequence is a string that starts with a backlash, `\\`, followed by the letter `u` and 4 hexadecimal digits.\n                - The backlash, `\\` , acts as the `UnicodeEscape`.\n                - The letter, `u`, acts as the `UnicodeMarker`.\n                - The 4 digits are referenced as hexDigits:\n                    - `0` , `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `a`, `b`, `c`, `d`, `e`, `f`, `A`, `B`, `C`, `D`, `E`, `F`.\n                - Examples:\n                    - `<` -> UnicodeEscape() -> `\\u003c`\n                    - `>` -> UnicodeEscape() -> `\\u003e`\n            - HTML Entities\n                -\n                - Examples:\n                    - `<` -> HTML_Entities() -> `&lt;`  ||  `&#60;`\n                    - `>` -> HTML_Entities() -> `&gt;`  ||  `&#62;`\n                    - `&` -> HTML_Entities() -> `&amp;` ||  `&#38;`\n  - Filter:\n\n- Libraries: A collection of tools to help prevent common XSS attacks\n  - Check #References\n\n## Vector\n\n- Reflection XSS - Type 1\n- Stored XSS - Type 2\n- DOM XSS - Type 3/0\n\n## Tools\n\n- Leviathan (2019)\n\n---\n\n## REF\n\nBrowser Secrets [Breakdown](https://browsersecrets.restograde.com/)\n\nXSS - The LocalStorage Robbery [Medium](https://shahjerry33.medium.com/xss-the-localstorage-robbery-d5fbf353c6b0)\n\n</MDXJS>\n</Widget>\n</MDXLayer>","collection":"security","data":{"title":"XSS","description":"Research and Development in XSS attack vectors.","tags":["security","def"],"author":"KBVE Team","img":"https://images.unsplash.com/photo-1614064641938-3bbee52942c7?fit=crop&w=1400&h=700&q=75"}}}
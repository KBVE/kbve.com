import{a as l}from"./khashvault.6hCPxH2k.js";const z="5ba581fa-b6fc-4bb0-8222-02fcd6a59e35",$="https://js.hcaptcha.com/1/api.js",f="auth/register",g="auth/login",p="graceful/profile";async function k(e){return new Promise(r=>setTimeout(r,e))}class a{constructor(r,t,s){this.status=r,this.error=r<200||r>=300,this.message=t,this.data=s}display(){console.log(`Status: ${this.status}, Message: ${this.message}, Error: ${this.error}, Data: ${JSON.stringify(this.data)}`)}scope(){try{return JSON.stringify(this.data)}catch(r){return console.error("Parsing error:",r),"Error: Unable to parse data"}}extractField(r){if(this.data&&typeof this.data=="object"&&r in this.data)return this.data[r];try{if(typeof this.message=="string"){const t=JSON.parse(this.message);if(t&&typeof t=="object"&&r in t)return t[r]}}catch(t){console.error("Parsing error when checking message:",t)}return null}extractError(){if(typeof this.message=="string")try{const r=JSON.parse(this.message);if(r&&typeof r=="object"&&"error"in r)return r.error}catch(r){console.error("Parsing error:",r)}return"Error: Unable to parse error message"}token(){if(typeof this.message=="string")try{const r=JSON.parse(this.message);if(r&&typeof r=="object"&&"token"in r)return r.token}catch(r){console.error("Parsing error:",r)}return"Error: Unable to parse token"}async serialize(){try{return JSON.stringify({status:this.status,error:this.error,message:this.message,data:this.data})}catch(r){return console.error("Serialization error:",r),JSON.stringify({status:500,error:!0,message:"Internal Server Error: Unable to serialize response",data:{}})}}static async deserialize(r){try{const t=JSON.parse(r);return new a(t.status,t.message,t.data)}catch(t){return console.error("Deserialization error:",t),new a(500,"Internal Server Error: Unable to deserialize response",{})}}}const x=new RegExp(/^[a-z0-9]+$/i),u=8,m=async e=>e.length<u?new a(400,"Validation Error",{error:"Username is too short. Minimum length is "+u}):x.test(e)?new a(200,"Validation Successful",{message:"Username is valid."}):new a(400,"Validation Error",{error:"Username contains invalid characters."});async function V(e){try{const r=await m(e);return r.status===200?{isValid:!0,error:null}:{isValid:!1,error:r.data.error}}catch{return{isValid:!1,error:"An unexpected error occurred"}}}const y=new RegExp(/(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/),w=async e=>y.test(e)?new a(200,"Validation Successful",{message:"Email is valid."}):new a(400,"Validation Error",{error:"Email is invalid."});async function v(e){try{const r=await w(e);return r.status===200?{isValid:!0,error:null}:{isValid:!1,error:r.data.error}}catch{return{isValid:!1,error:"An unexpected error occurred"}}}const b=async e=>{if(e.length<8)return new a(400,"Validation Error",{error:"Password is too short"});if(e.length>255)return new a(400,"Validation Error",{error:"Password is too long"});const r=/[A-Z]/.test(e),t=/[a-z]/.test(e),s=/\d/.test(e),n=/[^A-Za-z0-9]/.test(e);return!r||!t||!s||!n?new a(400,"Validation Error",{error:"Password must include uppercase, lowercase, digits, and special characters"}):new a(200,"Validation Successful",{message:"Password is valid"})};async function U(e){try{const r=await b(e);return r.status===200?{isValid:!0,error:null}:{isValid:!1,error:r.data.error}}catch{return{isValid:!1,error:"An unexpected error occurred"}}}async function d(e,r,t){try{const s=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json",...t},body:JSON.stringify(r),credentials:"include"}),n=await s.json(),o=!s.ok;let i=s.ok?"Success":"Error";typeof n.message=="object"&&n.message!==null&&(i=JSON.stringify(n.message));const c=o&&n.error?{error:n.error}:n;return new a(s.status,i,c)}catch(s){return console.error("Request failed:",s),new a(500,"Internal Server Error: Request failed",{})}}async function S(e,r,t){try{const s=new URLSearchParams(r).toString(),n=`${e}?${s}`,o=await fetch(n,{method:"GET",headers:{...t},credentials:"include"}),i=await o.json(),c=i.message||(o.ok?"Success":"Error"),h=i.data||i;return new a(o.status,c,h)}catch(s){return console.error("Request failed:",s),new a(500,"Internal Server Error: Request failed",{})}}async function P(e,r,t,s,n){const o=`${e}${l}${f}`;return d(o,{username:r,email:t,password:s,token:n},{"x-kbve-shieldwall":"auth-register"})}async function j(e,r,t){const s=`${e}${l}${g}`;return d(s,{email:r,password:t},{"x-kbve-shieldwall":"auth-login"})}async function O(e,r){const t=`${e}${l}${p}`,s={Authorization:`Bearer ${r}`,"x-kbve-shieldwall":"auth-profile"};return S(t,{},s)}export{$ as a,v as b,V as c,U as d,z as h,j as l,O as p,P as r,k as s};

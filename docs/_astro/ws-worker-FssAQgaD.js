!function(){"use strict";const e=Symbol("Comlink.proxy"),n=Symbol("Comlink.endpoint"),t=Symbol("Comlink.releaseProxy"),r=Symbol("Comlink.finalizer"),o=Symbol("Comlink.thrown"),a=e=>"object"==typeof e&&null!==e||"function"==typeof e,s={canHandle:n=>a(n)&&n[e],serialize(e){const{port1:n,port2:t}=new MessageChannel;return c(e,n),[t,[t]]},deserialize:e=>(e.start(),function(e,n){const t=new Map;return e.addEventListener("message",(function(e){const{data:n}=e;if(!n||!n.id)return;const r=t.get(n.id);if(r)try{r(n)}finally{t.delete(n.id)}})),d(e,t,[],n)}(e))},i=new Map([["proxy",s],["throw",{canHandle:e=>a(e)&&o in e,serialize({value:e}){let n;return n=e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[n,[]]},deserialize(e){throw e.isError?Object.assign(new Error(e.value.message),e.value):e.value}}]]);function c(n,t=globalThis,a=["*"]){t.addEventListener("message",(function s(i){if(!i||!i.data)return;if(!function(e,n){for(const t of e)if(n===t||"*"===t||t instanceof RegExp&&t.test(n))return!0;return!1}(a,i.origin))return void console.warn(`Invalid origin '${i.origin}' for comlink proxy`);const{id:u,type:f,path:p}=Object.assign({path:[]},i.data),g=(i.data.argumentList||[]).map(E);let d;try{const t=p.slice(0,-1).reduce(((e,n)=>e[n]),n),r=p.reduce(((e,n)=>e[n]),n);switch(f){case"GET":d=r;break;case"SET":t[p.slice(-1)[0]]=E(i.data.value),d=!0;break;case"APPLY":d=r.apply(t,g);break;case"CONSTRUCT":d=function(n){return Object.assign(n,{[e]:!0})}(new r(...g));break;case"ENDPOINT":{const{port1:e,port2:t}=new MessageChannel;c(n,t),d=function(e,n){return h.set(e,n),e}(e,[e])}break;case"RELEASE":d=void 0;break;default:return}}catch(e){d={value:e,[o]:0}}Promise.resolve(d).catch((e=>({value:e,[o]:0}))).then((e=>{const[o,a]=b(e);t.postMessage(Object.assign(Object.assign({},o),{id:u}),a),"RELEASE"===f&&(t.removeEventListener("message",s),l(t),r in n&&"function"==typeof n[r]&&n[r]())})).catch((e=>{const[n,r]=b({value:new TypeError("Unserializable return value"),[o]:0});t.postMessage(Object.assign(Object.assign({},n),{id:u}),r)}))})),t.start&&t.start()}function l(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.close()}function u(e){if(e)throw new Error("Proxy has been released and is not useable")}function f(e){return S(e,new Map,{type:"RELEASE"}).then((()=>{l(e)}))}const p=new WeakMap,g="FinalizationRegistry"in globalThis&&new FinalizationRegistry((e=>{const n=(p.get(e)||0)-1;p.set(e,n),0===n&&f(e)}));function d(e,r,o=[],a=function(){}){let s=!1;const i=new Proxy(a,{get(n,a){if(u(s),a===t)return()=>{(function(e){g&&g.unregister(e)})(i),f(e),r.clear(),s=!0};if("then"===a){if(0===o.length)return{then:()=>i};const n=S(e,r,{type:"GET",path:o.map((e=>e.toString()))}).then(E);return n.then.bind(n)}return d(e,r,[...o,a])},set(n,t,a){u(s);const[i,c]=b(a);return S(e,r,{type:"SET",path:[...o,t].map((e=>e.toString())),value:i},c).then(E)},apply(t,a,i){u(s);const c=o[o.length-1];if(c===n)return S(e,r,{type:"ENDPOINT"}).then(E);if("bind"===c)return d(e,r,o.slice(0,-1));const[l,f]=m(i);return S(e,r,{type:"APPLY",path:o.map((e=>e.toString())),argumentList:l},f).then(E)},construct(n,t){u(s);const[a,i]=m(t);return S(e,r,{type:"CONSTRUCT",path:o.map((e=>e.toString())),argumentList:a},i).then(E)}});return function(e,n){const t=(p.get(n)||0)+1;p.set(n,t),g&&g.register(e,n,e)}(i,e),i}function y(e){return Array.prototype.concat.apply([],e)}function m(e){const n=e.map(b);return[n.map((e=>e[0])),y(n.map((e=>e[1])))]}const h=new WeakMap;function b(e){for(const[n,t]of i)if(t.canHandle(e)){const[r,o]=t.serialize(e);return[{type:"HANDLER",name:n,value:r},o]}return[{type:"RAW",value:e},h.get(e)||[]]}function E(e){switch(e.type){case"HANDLER":return i.get(e.name).deserialize(e.value);case"RAW":return e.value}}function S(e,n,t,r){return new Promise((o=>{const a=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");n.set(a,o),e.start&&e.start(),e.postMessage(Object.assign({id:a},t),r)}))}let w=null,v=null;const k={async connect(e){w||(w=new WebSocket(e),w.binaryType="arraybuffer",w.onopen=()=>console.log("[WS] Connected:",e),w.onmessage=e=>{try{console.log("[WS] Received binary message"),e.data instanceof ArrayBuffer&&v?.(e.data)}catch(e){console.error("[WS] Failed to forward message",e)}},w.onerror=e=>console.error("[WS] Error:",e),w.onclose=()=>{console.log("[WS] Disconnected"),w=null})},async send(e){w?.readyState===WebSocket.OPEN?w.send(e):console.warn("[WS] Tried to send while disconnected")},async close(){w?.close(),w=null},onMessage(e){v=e}};self.onconnect=e=>{const n=e.ports[0];n.start(),c(k,n)}}();